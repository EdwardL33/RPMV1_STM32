
RPMv1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063f8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  08006508  08006508  00007508  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068bc  080068bc  000081dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080068bc  080068bc  000078bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068c4  080068c4  000081dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068c4  080068c4  000078c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080068c8  080068c8  000078c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  080068cc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  200001dc  08006aa8  000081dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000067c  08006aa8  0000867c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a2b2  00000000  00000000  00008205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002086  00000000  00000000  000124b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  00014540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007b4  00000000  00000000  00014f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b32  00000000  00000000  0001572c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c74e  00000000  00000000  0002e25e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086fc1  00000000  00000000  0003a9ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c196d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000393c  00000000  00000000  000c19b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000c52ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	080064f0 	.word	0x080064f0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	080064f0 	.word	0x080064f0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* Initialize CAN */
bool CANSPI_Initialize(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;

  /* Intialize Rx Mask values */
  RXM0reg.RXM0SIDH = 0x00;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 8000a92:	2300      	movs	r3, #0
 8000a94:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 8000a96:	2300      	movs	r3, #0
 8000a98:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	71fb      	strb	r3, [r7, #7]

  RXM1reg.RXM1SIDH = 0x00;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	70fb      	strb	r3, [r7, #3]

  /* Intialize Rx Filter values */
  RXF0reg.RXF0SIDH = 0x00;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 8000aba:	2300      	movs	r3, #0
 8000abc:	77fb      	strb	r3, [r7, #31]

  RXF1reg.RXF1SIDH = 0x00;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 8000ac2:	2308      	movs	r3, #8
 8000ac4:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 8000aca:	2300      	movs	r3, #0
 8000acc:	76fb      	strb	r3, [r7, #27]

  RXF2reg.RXF2SIDH = 0x00;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 8000ada:	2300      	movs	r3, #0
 8000adc:	75fb      	strb	r3, [r7, #23]

  RXF3reg.RXF3SIDH = 0x00;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 8000aea:	2300      	movs	r3, #0
 8000aec:	74fb      	strb	r3, [r7, #19]

  RXF4reg.RXF4SIDH = 0x00;
 8000aee:	2300      	movs	r3, #0
 8000af0:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 8000af2:	2300      	movs	r3, #0
 8000af4:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 8000af6:	2300      	movs	r3, #0
 8000af8:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 8000afa:	2300      	movs	r3, #0
 8000afc:	73fb      	strb	r3, [r7, #15]

  RXF5reg.RXF5SIDH = 0x00;
 8000afe:	2300      	movs	r3, #0
 8000b00:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 8000b02:	2308      	movs	r3, #8
 8000b04:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 8000b06:	2300      	movs	r3, #0
 8000b08:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	72fb      	strb	r3, [r7, #11]

  /* Intialize MCP2515, check SPI */
  if(!MCP2515_Initialize())
 8000b0e:	f000 fa0d 	bl	8000f2c <MCP2515_Initialize>
 8000b12:	4603      	mov	r3, r0
 8000b14:	f083 0301 	eor.w	r3, r3, #1
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <CANSPI_Initialize+0x9a>
  {
    return false;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e05e      	b.n	8000be0 <CANSPI_Initialize+0x158>
  }

  /* Change mode as configuration mode */
  if(!MCP2515_SetConfigMode())
 8000b22:	f000 fa25 	bl	8000f70 <MCP2515_SetConfigMode>
 8000b26:	4603      	mov	r3, r0
 8000b28:	f083 0301 	eor.w	r3, r3, #1
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <CANSPI_Initialize+0xae>
  {
    return false;
 8000b32:	2300      	movs	r3, #0
 8000b34:	e054      	b.n	8000be0 <CANSPI_Initialize+0x158>
  }

  /* Configure filter & mask */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	461a      	mov	r2, r3
 8000b3a:	2123      	movs	r1, #35	@ 0x23
 8000b3c:	2020      	movs	r0, #32
 8000b3e:	f000 fabb 	bl	80010b8 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 8000b42:	463b      	mov	r3, r7
 8000b44:	461a      	mov	r2, r3
 8000b46:	2127      	movs	r1, #39	@ 0x27
 8000b48:	2024      	movs	r0, #36	@ 0x24
 8000b4a:	f000 fab5 	bl	80010b8 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 8000b4e:	f107 031c 	add.w	r3, r7, #28
 8000b52:	461a      	mov	r2, r3
 8000b54:	2103      	movs	r1, #3
 8000b56:	2000      	movs	r0, #0
 8000b58:	f000 faae 	bl	80010b8 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 8000b5c:	f107 0318 	add.w	r3, r7, #24
 8000b60:	461a      	mov	r2, r3
 8000b62:	2107      	movs	r1, #7
 8000b64:	2004      	movs	r0, #4
 8000b66:	f000 faa7 	bl	80010b8 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	461a      	mov	r2, r3
 8000b70:	210b      	movs	r1, #11
 8000b72:	2008      	movs	r0, #8
 8000b74:	f000 faa0 	bl	80010b8 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 8000b78:	f107 0310 	add.w	r3, r7, #16
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	2113      	movs	r1, #19
 8000b80:	2010      	movs	r0, #16
 8000b82:	f000 fa99 	bl	80010b8 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 8000b86:	f107 030c 	add.w	r3, r7, #12
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	2117      	movs	r1, #23
 8000b8e:	2014      	movs	r0, #20
 8000b90:	f000 fa92 	bl	80010b8 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 8000b94:	f107 0308 	add.w	r3, r7, #8
 8000b98:	461a      	mov	r2, r3
 8000b9a:	211b      	movs	r1, #27
 8000b9c:	2018      	movs	r0, #24
 8000b9e:	f000 fa8b 	bl	80010b8 <MCP2515_WriteByteSequence>

  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 8000ba2:	2104      	movs	r1, #4
 8000ba4:	2060      	movs	r0, #96	@ 0x60
 8000ba6:	f000 fa63 	bl	8001070 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 8000baa:	2101      	movs	r1, #1
 8000bac:	2070      	movs	r0, #112	@ 0x70
 8000bae:	f000 fa5f 	bl	8001070 <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */

  /* 00(SJW 1tq) 000000 */
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	202a      	movs	r0, #42	@ 0x2a
 8000bb6:	f000 fa5b 	bl	8001070 <MCP2515_WriteByte>

  /* 1 1 100(5tq) 101(6tq) */
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 8000bba:	21e5      	movs	r1, #229	@ 0xe5
 8000bbc:	2029      	movs	r0, #41	@ 0x29
 8000bbe:	f000 fa57 	bl	8001070 <MCP2515_WriteByte>

  /* 1 0 000 011(4tq) */
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 8000bc2:	2183      	movs	r1, #131	@ 0x83
 8000bc4:	2028      	movs	r0, #40	@ 0x28
 8000bc6:	f000 fa53 	bl	8001070 <MCP2515_WriteByte>

  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 8000bca:	f000 f9ef 	bl	8000fac <MCP2515_SetNormalMode>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	f083 0301 	eor.w	r3, r3, #1
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <CANSPI_Initialize+0x156>
    return false;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e000      	b.n	8000be0 <CANSPI_Initialize+0x158>

  return true;
 8000bde:	2301      	movs	r3, #1
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3720      	adds	r7, #32
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <CANSPI_Transmit>:

/* Transmit CAN message */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	73fb      	strb	r3, [r7, #15]

  idReg.tempSIDH = 0;
 8000bf4:	4b36      	ldr	r3, [pc, #216]	@ (8000cd0 <CANSPI_Transmit+0xe8>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 8000bfa:	4b35      	ldr	r3, [pc, #212]	@ (8000cd0 <CANSPI_Transmit+0xe8>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 8000c00:	4b33      	ldr	r3, [pc, #204]	@ (8000cd0 <CANSPI_Transmit+0xe8>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 8000c06:	4b32      	ldr	r3, [pc, #200]	@ (8000cd0 <CANSPI_Transmit+0xe8>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	70da      	strb	r2, [r3, #3]

  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 8000c0c:	f000 fac2 	bl	8001194 <MCP2515_ReadStatus>
 8000c10:	4603      	mov	r3, r0
 8000c12:	461a      	mov	r2, r3
 8000c14:	4b2f      	ldr	r3, [pc, #188]	@ (8000cd4 <CANSPI_Transmit+0xec>)
 8000c16:	701a      	strb	r2, [r3, #0]

  /* Finding empty buffer */
  if (ctrlStatus.TXB0REQ != 1)
 8000c18:	4b2e      	ldr	r3, [pc, #184]	@ (8000cd4 <CANSPI_Transmit+0xec>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	f003 0304 	and.w	r3, r3, #4
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d115      	bne.n	8000c52 <CANSPI_Transmit+0x6a>
  {
    /* convert CAN ID for register */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6858      	ldr	r0, [r3, #4]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	4a28      	ldr	r2, [pc, #160]	@ (8000cd0 <CANSPI_Transmit+0xe8>)
 8000c30:	4619      	mov	r1, r3
 8000c32:	f000 f927 	bl	8000e84 <convertCANid2Reg>

    /* Load data to Tx Buffer */
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	7a1a      	ldrb	r2, [r3, #8]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	3309      	adds	r3, #9
 8000c3e:	4924      	ldr	r1, [pc, #144]	@ (8000cd0 <CANSPI_Transmit+0xe8>)
 8000c40:	2040      	movs	r0, #64	@ 0x40
 8000c42:	f000 fa63 	bl	800110c <MCP2515_LoadTxSequence>

    /* Request to transmit */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 8000c46:	2081      	movs	r0, #129	@ 0x81
 8000c48:	f000 fa8a 	bl	8001160 <MCP2515_RequestToSend>

    returnValue = 1;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	73fb      	strb	r3, [r7, #15]
 8000c50:	e038      	b.n	8000cc4 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 8000c52:	4b20      	ldr	r3, [pc, #128]	@ (8000cd4 <CANSPI_Transmit+0xec>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	f003 0310 	and.w	r3, r3, #16
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d115      	bne.n	8000c8c <CANSPI_Transmit+0xa4>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6858      	ldr	r0, [r3, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	4a19      	ldr	r2, [pc, #100]	@ (8000cd0 <CANSPI_Transmit+0xe8>)
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	f000 f90a 	bl	8000e84 <convertCANid2Reg>

    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	7a1a      	ldrb	r2, [r3, #8]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3309      	adds	r3, #9
 8000c78:	4915      	ldr	r1, [pc, #84]	@ (8000cd0 <CANSPI_Transmit+0xe8>)
 8000c7a:	2042      	movs	r0, #66	@ 0x42
 8000c7c:	f000 fa46 	bl	800110c <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 8000c80:	2082      	movs	r0, #130	@ 0x82
 8000c82:	f000 fa6d 	bl	8001160 <MCP2515_RequestToSend>

    returnValue = 1;
 8000c86:	2301      	movs	r3, #1
 8000c88:	73fb      	strb	r3, [r7, #15]
 8000c8a:	e01b      	b.n	8000cc4 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 8000c8c:	4b11      	ldr	r3, [pc, #68]	@ (8000cd4 <CANSPI_Transmit+0xec>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d114      	bne.n	8000cc4 <CANSPI_Transmit+0xdc>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6858      	ldr	r0, [r3, #4]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	4a0b      	ldr	r2, [pc, #44]	@ (8000cd0 <CANSPI_Transmit+0xe8>)
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	f000 f8ed 	bl	8000e84 <convertCANid2Reg>

    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	7a1a      	ldrb	r2, [r3, #8]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	3309      	adds	r3, #9
 8000cb2:	4907      	ldr	r1, [pc, #28]	@ (8000cd0 <CANSPI_Transmit+0xe8>)
 8000cb4:	2044      	movs	r0, #68	@ 0x44
 8000cb6:	f000 fa29 	bl	800110c <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 8000cba:	2084      	movs	r0, #132	@ 0x84
 8000cbc:	f000 fa50 	bl	8001160 <MCP2515_RequestToSend>

    returnValue = 1;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	73fb      	strb	r3, [r7, #15]
  }

  return (returnValue);
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200001fc 	.word	0x200001fc
 8000cd4:	200001f8 	.word	0x200001f8

08000cd8 <CANSPI_Receive>:

/* Receive CAN message */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;

  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 8000ce4:	f000 fa72 	bl	80011cc <MCP2515_GetRxStatus>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	733b      	strb	r3, [r7, #12]

  /* Check receive buffer */
  if (rxStatus.rxBuffer != 0)
 8000cec:	7b3b      	ldrb	r3, [r7, #12]
 8000cee:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d066      	beq.n	8000dc6 <CANSPI_Receive+0xee>
  {
    /* finding buffer which has a message */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 8000cf8:	7b3b      	ldrb	r3, [r7, #12]
 8000cfa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	2b40      	cmp	r3, #64	@ 0x40
 8000d02:	bf0c      	ite	eq
 8000d04:	2301      	moveq	r3, #1
 8000d06:	2300      	movne	r3, #0
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	7b3b      	ldrb	r3, [r7, #12]
 8000d0c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	2bc0      	cmp	r3, #192	@ 0xc0
 8000d14:	bf0c      	ite	eq
 8000d16:	2301      	moveq	r3, #1
 8000d18:	2300      	movne	r3, #0
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d007      	beq.n	8000d34 <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8000d24:	f107 0310 	add.w	r3, r7, #16
 8000d28:	220d      	movs	r2, #13
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	2090      	movs	r0, #144	@ 0x90
 8000d2e:	f000 f97d 	bl	800102c <MCP2515_ReadRxSequence>
 8000d32:	e00c      	b.n	8000d4e <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 8000d34:	7b3b      	ldrb	r3, [r7, #12]
 8000d36:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	2b80      	cmp	r3, #128	@ 0x80
 8000d3e:	d106      	bne.n	8000d4e <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8000d40:	f107 0310 	add.w	r3, r7, #16
 8000d44:	220d      	movs	r2, #13
 8000d46:	4619      	mov	r1, r3
 8000d48:	2094      	movs	r0, #148	@ 0x94
 8000d4a:	f000 f96f 	bl	800102c <MCP2515_ReadRxSequence>
    }

    /* if the message is extended CAN type */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 8000d4e:	7b3b      	ldrb	r3, [r7, #12]
 8000d50:	f003 0318 	and.w	r3, r3, #24
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	2b10      	cmp	r3, #16
 8000d58:	d10c      	bne.n	8000d74 <CANSPI_Receive+0x9c>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2202      	movs	r2, #2
 8000d5e:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8000d60:	7cb8      	ldrb	r0, [r7, #18]
 8000d62:	7cf9      	ldrb	r1, [r7, #19]
 8000d64:	7c3a      	ldrb	r2, [r7, #16]
 8000d66:	7c7b      	ldrb	r3, [r7, #17]
 8000d68:	f000 f832 	bl	8000dd0 <convertReg2ExtendedCANid>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	e00b      	b.n	8000d8c <CANSPI_Receive+0xb4>
    }
    else
    {
      /* Standard type */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2201      	movs	r2, #1
 8000d78:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8000d7a:	7c3b      	ldrb	r3, [r7, #16]
 8000d7c:	7c7a      	ldrb	r2, [r7, #17]
 8000d7e:	4611      	mov	r1, r2
 8000d80:	4618      	mov	r0, r3
 8000d82:	f000 f863 	bl	8000e4c <convertReg2StandardCANid>
 8000d86:	4602      	mov	r2, r0
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	605a      	str	r2, [r3, #4]
    }

    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 8000d8c:	7d3a      	ldrb	r2, [r7, #20]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 8000d92:	7d7a      	ldrb	r2, [r7, #21]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 8000d98:	7dba      	ldrb	r2, [r7, #22]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 8000d9e:	7dfa      	ldrb	r2, [r7, #23]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 8000da4:	7e3a      	ldrb	r2, [r7, #24]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 8000daa:	7e7a      	ldrb	r2, [r7, #25]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 8000db0:	7eba      	ldrb	r2, [r7, #26]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 8000db6:	7efa      	ldrb	r2, [r7, #27]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 8000dbc:	7f3a      	ldrb	r2, [r7, #28]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	741a      	strb	r2, [r3, #16]

    returnValue = 1;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	77fb      	strb	r3, [r7, #31]
  }

  return (returnValue);
 8000dc6:	7ffb      	ldrb	r3, [r7, #31]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3720      	adds	r7, #32
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* convert register value to extended CAN ID */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 8000dd0:	b490      	push	{r4, r7}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4604      	mov	r4, r0
 8000dd8:	4608      	mov	r0, r1
 8000dda:	4611      	mov	r1, r2
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4623      	mov	r3, r4
 8000de0:	71fb      	strb	r3, [r7, #7]
 8000de2:	4603      	mov	r3, r0
 8000de4:	71bb      	strb	r3, [r7, #6]
 8000de6:	460b      	mov	r3, r1
 8000de8:	717b      	strb	r3, [r7, #5]
 8000dea:	4613      	mov	r3, r2
 8000dec:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;

  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 8000df6:	793b      	ldrb	r3, [r7, #4]
 8000df8:	f003 0303 	and.w	r3, r3, #3
 8000dfc:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 8000dfe:	793b      	ldrb	r3, [r7, #4]
 8000e00:	095b      	lsrs	r3, r3, #5
 8000e02:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 8000e04:	797b      	ldrb	r3, [r7, #5]
 8000e06:	00db      	lsls	r3, r3, #3
 8000e08:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 8000e0a:	7bbb      	ldrb	r3, [r7, #14]
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	4413      	add	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	021b      	lsls	r3, r3, #8
 8000e24:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	021b      	lsls	r3, r3, #8
 8000e32:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 8000e34:	79bb      	ldrb	r3, [r7, #6]
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4413      	add	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	617b      	str	r3, [r7, #20]
  return (returnValue);
 8000e40:	697b      	ldr	r3, [r7, #20]
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3718      	adds	r7, #24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc90      	pop	{r4, r7}
 8000e4a:	4770      	bx	lr

08000e4c <convertReg2StandardCANid>:

/* convert register value to standard CAN ID */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	460a      	mov	r2, r1
 8000e56:	71fb      	strb	r3, [r7, #7]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;

  ConvertedID = (tempRXBn_SIDH << 3);
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	00db      	lsls	r3, r3, #3
 8000e64:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 8000e66:	79bb      	ldrb	r3, [r7, #6]
 8000e68:	095b      	lsrs	r3, r3, #5
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	4413      	add	r3, r2
 8000e72:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	60fb      	str	r3, [r7, #12]

  return (returnValue);
 8000e78:	68fb      	ldr	r3, [r7, #12]
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3714      	adds	r7, #20
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr

08000e84 <convertCANid2Reg>:

/* convert CAN ID to register value */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b087      	sub	sp, #28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	607a      	str	r2, [r7, #4]
 8000e90:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	75fb      	strb	r3, [r7, #23]

  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B)
 8000e96:	7afb      	ldrb	r3, [r7, #11]
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d12e      	bne.n	8000efa <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	0a1b      	lsrs	r3, r3, #8
 8000ea8:	60fb      	str	r3, [r7, #12]

    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	0a1b      	lsrs	r3, r3, #8
 8000eb6:	60fb      	str	r3, [r7, #12]

    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	f003 0303 	and.w	r3, r3, #3
 8000ec0:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	f023 031f 	bic.w	r3, r3, #31
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	7dfb      	ldrb	r3, [r7, #23]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 8000ed8:	7dfb      	ldrb	r3, [r7, #23]
 8000eda:	3308      	adds	r3, #8
 8000edc:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 8000ede:	7dfb      	ldrb	r3, [r7, #23]
 8000ee0:	f023 0314 	bic.w	r3, r3, #20
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	705a      	strb	r2, [r3, #1]

    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	0a1b      	lsrs	r3, r3, #8
 8000eee:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 8000ef8:	e013      	b.n	8000f22 <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2200      	movs	r2, #0
 8000f04:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	015b      	lsls	r3, r3, #5
 8000f0a:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	0a1b      	lsrs	r3, r3, #8
 8000f18:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	701a      	strb	r2, [r3, #0]
}
 8000f22:	bf00      	nop
 8000f24:	371c      	adds	r7, #28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr

08000f2c <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* initialize MCP2515 */
bool MCP2515_Initialize(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();
 8000f32:	2201      	movs	r2, #1
 8000f34:	2110      	movs	r1, #16
 8000f36:	480c      	ldr	r0, [pc, #48]	@ (8000f68 <MCP2515_Initialize+0x3c>)
 8000f38:	f001 f932 	bl	80021a0 <HAL_GPIO_WritePin>

  uint8_t loop = 10;
 8000f3c:	230a      	movs	r3, #10
 8000f3e:	71fb      	strb	r3, [r7, #7]

  do {
    /* check SPI Ready */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 8000f40:	480a      	ldr	r0, [pc, #40]	@ (8000f6c <MCP2515_Initialize+0x40>)
 8000f42:	f002 f9df 	bl	8003304 <HAL_SPI_GetState>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d101      	bne.n	8000f50 <MCP2515_Initialize+0x24>
      return true;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e006      	b.n	8000f5e <MCP2515_Initialize+0x32>

    loop--;
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	3b01      	subs	r3, #1
 8000f54:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d1f1      	bne.n	8000f40 <MCP2515_Initialize+0x14>

  return false;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40010800 	.word	0x40010800
 8000f6c:	20000488 	.word	0x20000488

08000f70 <MCP2515_SetConfigMode>:

/* change mode as configuration mode */
bool MCP2515_SetConfigMode(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 8000f76:	2180      	movs	r1, #128	@ 0x80
 8000f78:	200f      	movs	r0, #15
 8000f7a:	f000 f879 	bl	8001070 <MCP2515_WriteByte>

  uint8_t loop = 10;
 8000f7e:	230a      	movs	r3, #10
 8000f80:	71fb      	strb	r3, [r7, #7]

  do {
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 8000f82:	200e      	movs	r0, #14
 8000f84:	f000 f830 	bl	8000fe8 <MCP2515_ReadByte>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000f8e:	2b80      	cmp	r3, #128	@ 0x80
 8000f90:	d101      	bne.n	8000f96 <MCP2515_SetConfigMode+0x26>
      return true;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e006      	b.n	8000fa4 <MCP2515_SetConfigMode+0x34>

    loop--;
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d1ef      	bne.n	8000f82 <MCP2515_SetConfigMode+0x12>

  return false;
 8000fa2:	2300      	movs	r3, #0
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <MCP2515_SetNormalMode>:

/* change mode as normal mode */
bool MCP2515_SetNormalMode(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	200f      	movs	r0, #15
 8000fb6:	f000 f85b 	bl	8001070 <MCP2515_WriteByte>

  uint8_t loop = 10;
 8000fba:	230a      	movs	r3, #10
 8000fbc:	71fb      	strb	r3, [r7, #7]

  do {
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 8000fbe:	200e      	movs	r0, #14
 8000fc0:	f000 f812 	bl	8000fe8 <MCP2515_ReadByte>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d101      	bne.n	8000fd2 <MCP2515_SetNormalMode+0x26>
      return true;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e006      	b.n	8000fe0 <MCP2515_SetNormalMode+0x34>

    loop--;
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	3b01      	subs	r3, #1
 8000fd6:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d1ef      	bne.n	8000fbe <MCP2515_SetNormalMode+0x12>

  return false;
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* read single byte */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;

  MCP2515_CS_LOW();
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2110      	movs	r1, #16
 8000ff6:	480c      	ldr	r0, [pc, #48]	@ (8001028 <MCP2515_ReadByte+0x40>)
 8000ff8:	f001 f8d2 	bl	80021a0 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ);
 8000ffc:	2003      	movs	r0, #3
 8000ffe:	f000 f901 	bl	8001204 <SPI_Tx>
  SPI_Tx(address);
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	4618      	mov	r0, r3
 8001006:	f000 f8fd 	bl	8001204 <SPI_Tx>
  retVal = SPI_Rx();
 800100a:	f000 f921 	bl	8001250 <SPI_Rx>
 800100e:	4603      	mov	r3, r0
 8001010:	73fb      	strb	r3, [r7, #15]

  MCP2515_CS_HIGH();
 8001012:	2201      	movs	r2, #1
 8001014:	2110      	movs	r1, #16
 8001016:	4804      	ldr	r0, [pc, #16]	@ (8001028 <MCP2515_ReadByte+0x40>)
 8001018:	f001 f8c2 	bl	80021a0 <HAL_GPIO_WritePin>

  return retVal;
 800101c:	7bfb      	ldrb	r3, [r7, #15]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40010800 	.word	0x40010800

0800102c <MCP2515_ReadRxSequence>:

/* read buffer */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	6039      	str	r1, [r7, #0]
 8001036:	71fb      	strb	r3, [r7, #7]
 8001038:	4613      	mov	r3, r2
 800103a:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 800103c:	2200      	movs	r2, #0
 800103e:	2110      	movs	r1, #16
 8001040:	480a      	ldr	r0, [pc, #40]	@ (800106c <MCP2515_ReadRxSequence+0x40>)
 8001042:	f001 f8ad 	bl	80021a0 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	4618      	mov	r0, r3
 800104a:	f000 f8db 	bl	8001204 <SPI_Tx>
  SPI_RxBuffer(data, length);
 800104e:	79bb      	ldrb	r3, [r7, #6]
 8001050:	4619      	mov	r1, r3
 8001052:	6838      	ldr	r0, [r7, #0]
 8001054:	f000 f90c 	bl	8001270 <SPI_RxBuffer>

  MCP2515_CS_HIGH();
 8001058:	2201      	movs	r2, #1
 800105a:	2110      	movs	r1, #16
 800105c:	4803      	ldr	r0, [pc, #12]	@ (800106c <MCP2515_ReadRxSequence+0x40>)
 800105e:	f001 f89f 	bl	80021a0 <HAL_GPIO_WritePin>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40010800 	.word	0x40010800

08001070 <MCP2515_WriteByte>:

/* write single byte */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	460a      	mov	r2, r1
 800107a:	71fb      	strb	r3, [r7, #7]
 800107c:	4613      	mov	r3, r2
 800107e:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8001080:	2200      	movs	r2, #0
 8001082:	2110      	movs	r1, #16
 8001084:	480b      	ldr	r0, [pc, #44]	@ (80010b4 <MCP2515_WriteByte+0x44>)
 8001086:	f001 f88b 	bl	80021a0 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 800108a:	2002      	movs	r0, #2
 800108c:	f000 f8ba 	bl	8001204 <SPI_Tx>
  SPI_Tx(address);
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	4618      	mov	r0, r3
 8001094:	f000 f8b6 	bl	8001204 <SPI_Tx>
  SPI_Tx(data);
 8001098:	79bb      	ldrb	r3, [r7, #6]
 800109a:	4618      	mov	r0, r3
 800109c:	f000 f8b2 	bl	8001204 <SPI_Tx>

  MCP2515_CS_HIGH();
 80010a0:	2201      	movs	r2, #1
 80010a2:	2110      	movs	r1, #16
 80010a4:	4803      	ldr	r0, [pc, #12]	@ (80010b4 <MCP2515_WriteByte+0x44>)
 80010a6:	f001 f87b 	bl	80021a0 <HAL_GPIO_WritePin>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40010800 	.word	0x40010800

080010b8 <MCP2515_WriteByteSequence>:

/* write buffer */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	603a      	str	r2, [r7, #0]
 80010c2:	71fb      	strb	r3, [r7, #7]
 80010c4:	460b      	mov	r3, r1
 80010c6:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 80010c8:	2200      	movs	r2, #0
 80010ca:	2110      	movs	r1, #16
 80010cc:	480e      	ldr	r0, [pc, #56]	@ (8001108 <MCP2515_WriteByteSequence+0x50>)
 80010ce:	f001 f867 	bl	80021a0 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 80010d2:	2002      	movs	r0, #2
 80010d4:	f000 f896 	bl	8001204 <SPI_Tx>
  SPI_Tx(startAddress);
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 f892 	bl	8001204 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 80010e0:	79ba      	ldrb	r2, [r7, #6]
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	3301      	adds	r3, #1
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	4619      	mov	r1, r3
 80010ee:	6838      	ldr	r0, [r7, #0]
 80010f0:	f000 f89a 	bl	8001228 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 80010f4:	2201      	movs	r2, #1
 80010f6:	2110      	movs	r1, #16
 80010f8:	4803      	ldr	r0, [pc, #12]	@ (8001108 <MCP2515_WriteByteSequence+0x50>)
 80010fa:	f001 f851 	bl	80021a0 <HAL_GPIO_WritePin>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40010800 	.word	0x40010800

0800110c <MCP2515_LoadTxSequence>:

/* write to TxBuffer */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	60b9      	str	r1, [r7, #8]
 8001114:	607b      	str	r3, [r7, #4]
 8001116:	4603      	mov	r3, r0
 8001118:	73fb      	strb	r3, [r7, #15]
 800111a:	4613      	mov	r3, r2
 800111c:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 800111e:	2200      	movs	r2, #0
 8001120:	2110      	movs	r1, #16
 8001122:	480e      	ldr	r0, [pc, #56]	@ (800115c <MCP2515_LoadTxSequence+0x50>)
 8001124:	f001 f83c 	bl	80021a0 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8001128:	7bfb      	ldrb	r3, [r7, #15]
 800112a:	4618      	mov	r0, r3
 800112c:	f000 f86a 	bl	8001204 <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 8001130:	2104      	movs	r1, #4
 8001132:	68b8      	ldr	r0, [r7, #8]
 8001134:	f000 f878 	bl	8001228 <SPI_TxBuffer>
  SPI_Tx(dlc);
 8001138:	7bbb      	ldrb	r3, [r7, #14]
 800113a:	4618      	mov	r0, r3
 800113c:	f000 f862 	bl	8001204 <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 8001140:	7bbb      	ldrb	r3, [r7, #14]
 8001142:	4619      	mov	r1, r3
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f000 f86f 	bl	8001228 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 800114a:	2201      	movs	r2, #1
 800114c:	2110      	movs	r1, #16
 800114e:	4803      	ldr	r0, [pc, #12]	@ (800115c <MCP2515_LoadTxSequence+0x50>)
 8001150:	f001 f826 	bl	80021a0 <HAL_GPIO_WritePin>
}
 8001154:	bf00      	nop
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40010800 	.word	0x40010800

08001160 <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH();
}

/* request to send */
void MCP2515_RequestToSend(uint8_t instruction)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 800116a:	2200      	movs	r2, #0
 800116c:	2110      	movs	r1, #16
 800116e:	4808      	ldr	r0, [pc, #32]	@ (8001190 <MCP2515_RequestToSend+0x30>)
 8001170:	f001 f816 	bl	80021a0 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	4618      	mov	r0, r3
 8001178:	f000 f844 	bl	8001204 <SPI_Tx>

  MCP2515_CS_HIGH();
 800117c:	2201      	movs	r2, #1
 800117e:	2110      	movs	r1, #16
 8001180:	4803      	ldr	r0, [pc, #12]	@ (8001190 <MCP2515_RequestToSend+0x30>)
 8001182:	f001 f80d 	bl	80021a0 <HAL_GPIO_WritePin>
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40010800 	.word	0x40010800

08001194 <MCP2515_ReadStatus>:

/* read status */
uint8_t MCP2515_ReadStatus(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 800119a:	2200      	movs	r2, #0
 800119c:	2110      	movs	r1, #16
 800119e:	480a      	ldr	r0, [pc, #40]	@ (80011c8 <MCP2515_ReadStatus+0x34>)
 80011a0:	f000 fffe 	bl	80021a0 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ_STATUS);
 80011a4:	20a0      	movs	r0, #160	@ 0xa0
 80011a6:	f000 f82d 	bl	8001204 <SPI_Tx>
  retVal = SPI_Rx();
 80011aa:	f000 f851 	bl	8001250 <SPI_Rx>
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 80011b2:	2201      	movs	r2, #1
 80011b4:	2110      	movs	r1, #16
 80011b6:	4804      	ldr	r0, [pc, #16]	@ (80011c8 <MCP2515_ReadStatus+0x34>)
 80011b8:	f000 fff2 	bl	80021a0 <HAL_GPIO_WritePin>

  return retVal;
 80011bc:	79fb      	ldrb	r3, [r7, #7]
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40010800 	.word	0x40010800

080011cc <MCP2515_GetRxStatus>:

/* read RX STATUS register */
uint8_t MCP2515_GetRxStatus(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 80011d2:	2200      	movs	r2, #0
 80011d4:	2110      	movs	r1, #16
 80011d6:	480a      	ldr	r0, [pc, #40]	@ (8001200 <MCP2515_GetRxStatus+0x34>)
 80011d8:	f000 ffe2 	bl	80021a0 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_RX_STATUS);
 80011dc:	20b0      	movs	r0, #176	@ 0xb0
 80011de:	f000 f811 	bl	8001204 <SPI_Tx>
  retVal = SPI_Rx();
 80011e2:	f000 f835 	bl	8001250 <SPI_Rx>
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 80011ea:	2201      	movs	r2, #1
 80011ec:	2110      	movs	r1, #16
 80011ee:	4804      	ldr	r0, [pc, #16]	@ (8001200 <MCP2515_GetRxStatus+0x34>)
 80011f0:	f000 ffd6 	bl	80021a0 <HAL_GPIO_WritePin>

  return retVal;
 80011f4:	79fb      	ldrb	r3, [r7, #7]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40010800 	.word	0x40010800

08001204 <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx wrapper function  */
static void SPI_Tx(uint8_t data)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 800120e:	1df9      	adds	r1, r7, #7
 8001210:	230a      	movs	r3, #10
 8001212:	2201      	movs	r2, #1
 8001214:	4803      	ldr	r0, [pc, #12]	@ (8001224 <SPI_Tx+0x20>)
 8001216:	f001 fc6f 	bl	8002af8 <HAL_SPI_Transmit>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000488 	.word	0x20000488

08001228 <SPI_TxBuffer>:

/* SPI Tx wrapper function */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8001234:	78fb      	ldrb	r3, [r7, #3]
 8001236:	b29a      	uxth	r2, r3
 8001238:	230a      	movs	r3, #10
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	4803      	ldr	r0, [pc, #12]	@ (800124c <SPI_TxBuffer+0x24>)
 800123e:	f001 fc5b 	bl	8002af8 <HAL_SPI_Transmit>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000488 	.word	0x20000488

08001250 <SPI_Rx>:

/* SPI Rx wrapper function */
static uint8_t SPI_Rx(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8001256:	1df9      	adds	r1, r7, #7
 8001258:	230a      	movs	r3, #10
 800125a:	2201      	movs	r2, #1
 800125c:	4803      	ldr	r0, [pc, #12]	@ (800126c <SPI_Rx+0x1c>)
 800125e:	f001 fd8f 	bl	8002d80 <HAL_SPI_Receive>
  return retVal;
 8001262:	79fb      	ldrb	r3, [r7, #7]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000488 	.word	0x20000488

08001270 <SPI_RxBuffer>:

/* SPI Rx wrapper function */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 800127c:	78fb      	ldrb	r3, [r7, #3]
 800127e:	b29a      	uxth	r2, r3
 8001280:	230a      	movs	r3, #10
 8001282:	6879      	ldr	r1, [r7, #4]
 8001284:	4803      	ldr	r0, [pc, #12]	@ (8001294 <SPI_RxBuffer+0x24>)
 8001286:	f001 fd7b 	bl	8002d80 <HAL_SPI_Receive>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000488 	.word	0x20000488

08001298 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129e:	f107 0308 	add.w	r3, r7, #8
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ac:	4b17      	ldr	r3, [pc, #92]	@ (800130c <MX_GPIO_Init+0x74>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	4a16      	ldr	r2, [pc, #88]	@ (800130c <MX_GPIO_Init+0x74>)
 80012b2:	f043 0320 	orr.w	r3, r3, #32
 80012b6:	6193      	str	r3, [r2, #24]
 80012b8:	4b14      	ldr	r3, [pc, #80]	@ (800130c <MX_GPIO_Init+0x74>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	f003 0320 	and.w	r3, r3, #32
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c4:	4b11      	ldr	r3, [pc, #68]	@ (800130c <MX_GPIO_Init+0x74>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	4a10      	ldr	r2, [pc, #64]	@ (800130c <MX_GPIO_Init+0x74>)
 80012ca:	f043 0304 	orr.w	r3, r3, #4
 80012ce:	6193      	str	r3, [r2, #24]
 80012d0:	4b0e      	ldr	r3, [pc, #56]	@ (800130c <MX_GPIO_Init+0x74>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	603b      	str	r3, [r7, #0]
 80012da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_RESET);
 80012dc:	2200      	movs	r2, #0
 80012de:	2110      	movs	r1, #16
 80012e0:	480b      	ldr	r0, [pc, #44]	@ (8001310 <MX_GPIO_Init+0x78>)
 80012e2:	f000 ff5d 	bl	80021a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAN_CS_Pin */
  GPIO_InitStruct.Pin = CAN_CS_Pin;
 80012e6:	2310      	movs	r3, #16
 80012e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ea:	2301      	movs	r3, #1
 80012ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f2:	2302      	movs	r3, #2
 80012f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 80012f6:	f107 0308 	add.w	r3, r7, #8
 80012fa:	4619      	mov	r1, r3
 80012fc:	4804      	ldr	r0, [pc, #16]	@ (8001310 <MX_GPIO_Init+0x78>)
 80012fe:	f000 fdcb 	bl	8001e98 <HAL_GPIO_Init>

}
 8001302:	bf00      	nop
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40021000 	.word	0x40021000
 8001310:	40010800 	.word	0x40010800

08001314 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001314:	b5b0      	push	{r4, r5, r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af06      	add	r7, sp, #24

  /* USER CODE BEGIN 1 */
	motors[0] = motorA;
 800131a:	4a42      	ldr	r2, [pc, #264]	@ (8001424 <main+0x110>)
 800131c:	4b42      	ldr	r3, [pc, #264]	@ (8001428 <main+0x114>)
 800131e:	4614      	mov	r4, r2
 8001320:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001322:	c407      	stmia	r4!, {r0, r1, r2}
 8001324:	8023      	strh	r3, [r4, #0]
	motors[1] = motorB;
 8001326:	4b3f      	ldr	r3, [pc, #252]	@ (8001424 <main+0x110>)
 8001328:	4a40      	ldr	r2, [pc, #256]	@ (800142c <main+0x118>)
 800132a:	f103 040e 	add.w	r4, r3, #14
 800132e:	4613      	mov	r3, r2
 8001330:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001332:	6020      	str	r0, [r4, #0]
 8001334:	6061      	str	r1, [r4, #4]
 8001336:	60a2      	str	r2, [r4, #8]
 8001338:	881b      	ldrh	r3, [r3, #0]
 800133a:	81a3      	strh	r3, [r4, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800133c:	f000 fc42 	bl	8001bc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001340:	f000 f886 	bl	8001450 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001344:	f7ff ffa8 	bl	8001298 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001348:	f000 f9fa 	bl	8001740 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800134c:	f000 fb9e 	bl	8001a8c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, rx_buff, 1);
 8001350:	2201      	movs	r2, #1
 8001352:	4937      	ldr	r1, [pc, #220]	@ (8001430 <main+0x11c>)
 8001354:	4837      	ldr	r0, [pc, #220]	@ (8001434 <main+0x120>)
 8001356:	f002 f973 	bl	8003640 <HAL_UART_Receive_IT>

  CANSPI_Initialize();
 800135a:	f7ff fb95 	bl	8000a88 <CANSPI_Initialize>
  HAL_Delay(1000);
 800135e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001362:	f000 fc91 	bl	8001c88 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // if we receive data from the motor, parse it into the motor struct
	  if (CANSPI_Receive(&rxMessage)) {
 8001366:	4834      	ldr	r0, [pc, #208]	@ (8001438 <main+0x124>)
 8001368:	f7ff fcb6 	bl	8000cd8 <CANSPI_Receive>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <main+0x62>
		  getFeedback();
 8001372:	f000 f913 	bl	800159c <getFeedback>
	  }

	  // 'a is the only state when motors are running
	  if (state == 'a'){
 8001376:	4b31      	ldr	r3, [pc, #196]	@ (800143c <main+0x128>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b61      	cmp	r3, #97	@ 0x61
 800137c:	d10c      	bne.n	8001398 <main+0x84>
		  setVelocity(0x141, MAX_VELO_RPM * 6 * 100);
 800137e:	f242 3128 	movw	r1, #9000	@ 0x2328
 8001382:	f240 1041 	movw	r0, #321	@ 0x141
 8001386:	f000 f8a8 	bl	80014da <setVelocity>
		  setVelocity(0x142, MAX_VELO_RPM * 6 * 100);
 800138a:	f242 3128 	movw	r1, #9000	@ 0x2328
 800138e:	f44f 70a1 	mov.w	r0, #322	@ 0x142
 8001392:	f000 f8a2 	bl	80014da <setVelocity>
 8001396:	e007      	b.n	80013a8 <main+0x94>
	  } else {
		  resetMotor(0x141);
 8001398:	f240 1041 	movw	r0, #321	@ 0x141
 800139c:	f000 f8f0 	bl	8001580 <resetMotor>
		  resetMotor(0x142);
 80013a0:	f44f 70a1 	mov.w	r0, #322	@ 0x142
 80013a4:	f000 f8ec 	bl	8001580 <resetMotor>
	  }

	  // timed print
	  if (HAL_GetTick() - lastPrintTime >= printInterval) {
 80013a8:	f000 fc64 	bl	8001c74 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	4b24      	ldr	r3, [pc, #144]	@ (8001440 <main+0x12c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	1ad2      	subs	r2, r2, r3
 80013b4:	4b23      	ldr	r3, [pc, #140]	@ (8001444 <main+0x130>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d3d4      	bcc.n	8001366 <main+0x52>
		  lastPrintTime = HAL_GetTick();
 80013bc:	f000 fc5a 	bl	8001c74 <HAL_GetTick>
 80013c0:	4603      	mov	r3, r0
 80013c2:	4a1f      	ldr	r2, [pc, #124]	@ (8001440 <main+0x12c>)
 80013c4:	6013      	str	r3, [r2, #0]
		  memset(msg, 0, sizeof(msg));  // clear garbage from buffer
 80013c6:	2240      	movs	r2, #64	@ 0x40
 80013c8:	2100      	movs	r1, #0
 80013ca:	481f      	ldr	r0, [pc, #124]	@ (8001448 <main+0x134>)
 80013cc:	f002 ffb9 	bl	8004342 <memset>
		  int len = snprintf(msg, sizeof(msg),
				  "%d %d %d %d %d %d\n",
				  motors[0].angle, motors[0].velocity, motors[0].encoder,
 80013d0:	4b14      	ldr	r3, [pc, #80]	@ (8001424 <main+0x110>)
 80013d2:	f9b3 3000 	ldrsh.w	r3, [r3]
		  int len = snprintf(msg, sizeof(msg),
 80013d6:	461d      	mov	r5, r3
				  motors[0].angle, motors[0].velocity, motors[0].encoder,
 80013d8:	4b12      	ldr	r3, [pc, #72]	@ (8001424 <main+0x110>)
 80013da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
		  int len = snprintf(msg, sizeof(msg),
 80013de:	461a      	mov	r2, r3
				  motors[0].angle, motors[0].velocity, motors[0].encoder,
 80013e0:	4b10      	ldr	r3, [pc, #64]	@ (8001424 <main+0x110>)
 80013e2:	891b      	ldrh	r3, [r3, #8]
		  int len = snprintf(msg, sizeof(msg),
 80013e4:	4619      	mov	r1, r3
				  motors[1].angle, motors[1].velocity, motors[1].encoder);
 80013e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001424 <main+0x110>)
 80013e8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
		  int len = snprintf(msg, sizeof(msg),
 80013ec:	4618      	mov	r0, r3
				  motors[1].angle, motors[1].velocity, motors[1].encoder);
 80013ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001424 <main+0x110>)
 80013f0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
		  int len = snprintf(msg, sizeof(msg),
 80013f4:	461c      	mov	r4, r3
				  motors[1].angle, motors[1].velocity, motors[1].encoder);
 80013f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001424 <main+0x110>)
 80013f8:	8adb      	ldrh	r3, [r3, #22]
		  int len = snprintf(msg, sizeof(msg),
 80013fa:	9304      	str	r3, [sp, #16]
 80013fc:	9403      	str	r4, [sp, #12]
 80013fe:	9002      	str	r0, [sp, #8]
 8001400:	9101      	str	r1, [sp, #4]
 8001402:	9200      	str	r2, [sp, #0]
 8001404:	462b      	mov	r3, r5
 8001406:	4a11      	ldr	r2, [pc, #68]	@ (800144c <main+0x138>)
 8001408:	2140      	movs	r1, #64	@ 0x40
 800140a:	480f      	ldr	r0, [pc, #60]	@ (8001448 <main+0x134>)
 800140c:	f002 ff20 	bl	8004250 <sniprintf>
 8001410:	6078      	str	r0, [r7, #4]

		  // Send over UART using interrupt
		  HAL_UART_Transmit_IT(&huart1, (uint8_t*)msg, len);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	b29b      	uxth	r3, r3
 8001416:	461a      	mov	r2, r3
 8001418:	490b      	ldr	r1, [pc, #44]	@ (8001448 <main+0x134>)
 800141a:	4806      	ldr	r0, [pc, #24]	@ (8001434 <main+0x120>)
 800141c:	f002 f8db 	bl	80035d6 <HAL_UART_Transmit_IT>
	  if (CANSPI_Receive(&rxMessage)) {
 8001420:	e7a1      	b.n	8001366 <main+0x52>
 8001422:	bf00      	nop
 8001424:	2000046c 	.word	0x2000046c
 8001428:	2000044c 	.word	0x2000044c
 800142c:	2000045c 	.word	0x2000045c
 8001430:	20000218 	.word	0x20000218
 8001434:	200004e4 	.word	0x200004e4
 8001438:	20000204 	.word	0x20000204
 800143c:	20000000 	.word	0x20000000
 8001440:	20000200 	.word	0x20000200
 8001444:	20000004 	.word	0x20000004
 8001448:	2000040c 	.word	0x2000040c
 800144c:	08006508 	.word	0x08006508

08001450 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b090      	sub	sp, #64	@ 0x40
 8001454:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001456:	f107 0318 	add.w	r3, r7, #24
 800145a:	2228      	movs	r2, #40	@ 0x28
 800145c:	2100      	movs	r1, #0
 800145e:	4618      	mov	r0, r3
 8001460:	f002 ff6f 	bl	8004342 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
 8001470:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001472:	2301      	movs	r3, #1
 8001474:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001476:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800147a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800147c:	2300      	movs	r3, #0
 800147e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001480:	2301      	movs	r3, #1
 8001482:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001484:	2302      	movs	r3, #2
 8001486:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001488:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800148c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800148e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001492:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001494:	f107 0318 	add.w	r3, r7, #24
 8001498:	4618      	mov	r0, r3
 800149a:	f000 fe99 	bl	80021d0 <HAL_RCC_OscConfig>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80014a4:	f000 f946 	bl	8001734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a8:	230f      	movs	r3, #15
 80014aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ac:	2302      	movs	r3, #2
 80014ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	2102      	movs	r1, #2
 80014c2:	4618      	mov	r0, r3
 80014c4:	f001 f906 	bl	80026d4 <HAL_RCC_ClockConfig>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80014ce:	f000 f931 	bl	8001734 <Error_Handler>
  }
}
 80014d2:	bf00      	nop
 80014d4:	3740      	adds	r7, #64	@ 0x40
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <setVelocity>:

	// necessary to prime the next callback
	HAL_UART_Receive_IT(&huart1, rx_buff + rx_buff_arm, 1); // the next character will be stored in the next index
}

void setVelocity(uint16_t canID, int32_t velocity_dps_hundreth){
 80014da:	b580      	push	{r7, lr}
 80014dc:	b088      	sub	sp, #32
 80014de:	af00      	add	r7, sp, #0
 80014e0:	4603      	mov	r3, r0
 80014e2:	6039      	str	r1, [r7, #0]
 80014e4:	80fb      	strh	r3, [r7, #6]
	uCAN_MSG txMessage;

	// sending data to motor
	txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 80014e6:	2301      	movs	r3, #1
 80014e8:	733b      	strb	r3, [r7, #12]
	txMessage.frame.id = canID; // ID can be between Hex1 and Hex7FF (1-2047 decimal)
 80014ea:	88fb      	ldrh	r3, [r7, #6]
 80014ec:	613b      	str	r3, [r7, #16]
	txMessage.frame.dlc = 8;
 80014ee:	2308      	movs	r3, #8
 80014f0:	753b      	strb	r3, [r7, #20]

	txMessage.frame.data0 = 0xA2;
 80014f2:	23a2      	movs	r3, #162	@ 0xa2
 80014f4:	757b      	strb	r3, [r7, #21]
	txMessage.frame.data1 = 0x00;
 80014f6:	2300      	movs	r3, #0
 80014f8:	75bb      	strb	r3, [r7, #22]
	txMessage.frame.data2 = 0x00;
 80014fa:	2300      	movs	r3, #0
 80014fc:	75fb      	strb	r3, [r7, #23]
	txMessage.frame.data3 = 0x00;
 80014fe:	2300      	movs	r3, #0
 8001500:	763b      	strb	r3, [r7, #24]
	txMessage.frame.data4 = (uint8_t)(velocity_dps_hundreth);
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	b2db      	uxtb	r3, r3
 8001506:	767b      	strb	r3, [r7, #25]
	txMessage.frame.data5 = (uint8_t)(velocity_dps_hundreth>>8);
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	121b      	asrs	r3, r3, #8
 800150c:	b2db      	uxtb	r3, r3
 800150e:	76bb      	strb	r3, [r7, #26]
	txMessage.frame.data6 = (uint8_t)(velocity_dps_hundreth>>16);
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	141b      	asrs	r3, r3, #16
 8001514:	b2db      	uxtb	r3, r3
 8001516:	76fb      	strb	r3, [r7, #27]
	txMessage.frame.data7 = (uint8_t)(velocity_dps_hundreth>>24);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	161b      	asrs	r3, r3, #24
 800151c:	b2db      	uxtb	r3, r3
 800151e:	773b      	strb	r3, [r7, #28]

	CANSPI_Transmit(&txMessage);
 8001520:	f107 030c 	add.w	r3, r7, #12
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fb5f 	bl	8000be8 <CANSPI_Transmit>
}
 800152a:	bf00      	nop
 800152c:	3720      	adds	r7, #32
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <sendCommand>:


void sendCommand(uint16_t canID, uint8_t command){
 8001532:	b580      	push	{r7, lr}
 8001534:	b088      	sub	sp, #32
 8001536:	af00      	add	r7, sp, #0
 8001538:	4603      	mov	r3, r0
 800153a:	460a      	mov	r2, r1
 800153c:	80fb      	strh	r3, [r7, #6]
 800153e:	4613      	mov	r3, r2
 8001540:	717b      	strb	r3, [r7, #5]
	uCAN_MSG txMessage;

	// sending data to motor
	txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 8001542:	2301      	movs	r3, #1
 8001544:	733b      	strb	r3, [r7, #12]
	txMessage.frame.id = canID; // ID can be between Hex1 and Hex7FF (1-2047 decimal)
 8001546:	88fb      	ldrh	r3, [r7, #6]
 8001548:	613b      	str	r3, [r7, #16]
	txMessage.frame.dlc = 8;
 800154a:	2308      	movs	r3, #8
 800154c:	753b      	strb	r3, [r7, #20]

	txMessage.frame.data0 = command;
 800154e:	797b      	ldrb	r3, [r7, #5]
 8001550:	757b      	strb	r3, [r7, #21]
	txMessage.frame.data1 = 0x00;
 8001552:	2300      	movs	r3, #0
 8001554:	75bb      	strb	r3, [r7, #22]
	txMessage.frame.data2 = 0x00;
 8001556:	2300      	movs	r3, #0
 8001558:	75fb      	strb	r3, [r7, #23]
	txMessage.frame.data3 = 0x00;
 800155a:	2300      	movs	r3, #0
 800155c:	763b      	strb	r3, [r7, #24]
	txMessage.frame.data4 = 0x00;
 800155e:	2300      	movs	r3, #0
 8001560:	767b      	strb	r3, [r7, #25]
	txMessage.frame.data5 = 0x00;
 8001562:	2300      	movs	r3, #0
 8001564:	76bb      	strb	r3, [r7, #26]
	txMessage.frame.data6 = 0x00;
 8001566:	2300      	movs	r3, #0
 8001568:	76fb      	strb	r3, [r7, #27]
	txMessage.frame.data7 = 0x00;
 800156a:	2300      	movs	r3, #0
 800156c:	773b      	strb	r3, [r7, #28]

	CANSPI_Transmit(&txMessage);
 800156e:	f107 030c 	add.w	r3, r7, #12
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fb38 	bl	8000be8 <CANSPI_Transmit>
}
 8001578:	bf00      	nop
 800157a:	3720      	adds	r7, #32
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <resetMotor>:


void resetMotor(uint16_t canID){
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	80fb      	strh	r3, [r7, #6]
  sendCommand(canID, 0x76);
 800158a:	88fb      	ldrh	r3, [r7, #6]
 800158c:	2176      	movs	r1, #118	@ 0x76
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff ffcf 	bl	8001532 <sendCommand>
}
 8001594:	bf00      	nop
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <getFeedback>:

void getFeedback(){
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
	uint8_t data[8] = {rxMessage.frame.data0, rxMessage.frame.data1, rxMessage.frame.data2,
 80015a2:	4b62      	ldr	r3, [pc, #392]	@ (800172c <getFeedback+0x190>)
 80015a4:	7a5b      	ldrb	r3, [r3, #9]
 80015a6:	703b      	strb	r3, [r7, #0]
 80015a8:	4b60      	ldr	r3, [pc, #384]	@ (800172c <getFeedback+0x190>)
 80015aa:	7a9b      	ldrb	r3, [r3, #10]
 80015ac:	707b      	strb	r3, [r7, #1]
 80015ae:	4b5f      	ldr	r3, [pc, #380]	@ (800172c <getFeedback+0x190>)
 80015b0:	7adb      	ldrb	r3, [r3, #11]
 80015b2:	70bb      	strb	r3, [r7, #2]
					   rxMessage.frame.data3, rxMessage.frame.data4, rxMessage.frame.data5,
 80015b4:	4b5d      	ldr	r3, [pc, #372]	@ (800172c <getFeedback+0x190>)
 80015b6:	7b1b      	ldrb	r3, [r3, #12]
	uint8_t data[8] = {rxMessage.frame.data0, rxMessage.frame.data1, rxMessage.frame.data2,
 80015b8:	70fb      	strb	r3, [r7, #3]
					   rxMessage.frame.data3, rxMessage.frame.data4, rxMessage.frame.data5,
 80015ba:	4b5c      	ldr	r3, [pc, #368]	@ (800172c <getFeedback+0x190>)
 80015bc:	7b5b      	ldrb	r3, [r3, #13]
	uint8_t data[8] = {rxMessage.frame.data0, rxMessage.frame.data1, rxMessage.frame.data2,
 80015be:	713b      	strb	r3, [r7, #4]
					   rxMessage.frame.data3, rxMessage.frame.data4, rxMessage.frame.data5,
 80015c0:	4b5a      	ldr	r3, [pc, #360]	@ (800172c <getFeedback+0x190>)
 80015c2:	7b9b      	ldrb	r3, [r3, #14]
	uint8_t data[8] = {rxMessage.frame.data0, rxMessage.frame.data1, rxMessage.frame.data2,
 80015c4:	717b      	strb	r3, [r7, #5]
					   rxMessage.frame.data6, rxMessage.frame.data7};
 80015c6:	4b59      	ldr	r3, [pc, #356]	@ (800172c <getFeedback+0x190>)
 80015c8:	7bdb      	ldrb	r3, [r3, #15]
	uint8_t data[8] = {rxMessage.frame.data0, rxMessage.frame.data1, rxMessage.frame.data2,
 80015ca:	71bb      	strb	r3, [r7, #6]
					   rxMessage.frame.data6, rxMessage.frame.data7};
 80015cc:	4b57      	ldr	r3, [pc, #348]	@ (800172c <getFeedback+0x190>)
 80015ce:	7c1b      	ldrb	r3, [r3, #16]
	uint8_t data[8] = {rxMessage.frame.data0, rxMessage.frame.data1, rxMessage.frame.data2,
 80015d0:	71fb      	strb	r3, [r7, #7]

	// first motor
	if (rxMessage.frame.id == 0x141 && rxMessage.frame.data0 == 0xA2) {
 80015d2:	4b56      	ldr	r3, [pc, #344]	@ (800172c <getFeedback+0x190>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f240 1241 	movw	r2, #321	@ 0x141
 80015da:	4293      	cmp	r3, r2
 80015dc:	d125      	bne.n	800162a <getFeedback+0x8e>
 80015de:	4b53      	ldr	r3, [pc, #332]	@ (800172c <getFeedback+0x190>)
 80015e0:	7a5b      	ldrb	r3, [r3, #9]
 80015e2:	2ba2      	cmp	r3, #162	@ 0xa2
 80015e4:	d121      	bne.n	800162a <getFeedback+0x8e>
		motors[0].angle = (int16_t)(data[6] | (data[7]<<8));
 80015e6:	79bb      	ldrb	r3, [r7, #6]
 80015e8:	b21a      	sxth	r2, r3
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	b21b      	sxth	r3, r3
 80015ee:	021b      	lsls	r3, r3, #8
 80015f0:	b21b      	sxth	r3, r3
 80015f2:	4313      	orrs	r3, r2
 80015f4:	b21a      	sxth	r2, r3
 80015f6:	4b4e      	ldr	r3, [pc, #312]	@ (8001730 <getFeedback+0x194>)
 80015f8:	801a      	strh	r2, [r3, #0]
		motors[0].velocity = (int16_t)(data[4] | (data[5]<<8));
 80015fa:	793b      	ldrb	r3, [r7, #4]
 80015fc:	b21a      	sxth	r2, r3
 80015fe:	797b      	ldrb	r3, [r7, #5]
 8001600:	b21b      	sxth	r3, r3
 8001602:	021b      	lsls	r3, r3, #8
 8001604:	b21b      	sxth	r3, r3
 8001606:	4313      	orrs	r3, r2
 8001608:	b21a      	sxth	r2, r3
 800160a:	4b49      	ldr	r3, [pc, #292]	@ (8001730 <getFeedback+0x194>)
 800160c:	805a      	strh	r2, [r3, #2]
		motors[0].current = (int16_t)(data[2] | (data[3]<<8));
 800160e:	78bb      	ldrb	r3, [r7, #2]
 8001610:	b21a      	sxth	r2, r3
 8001612:	78fb      	ldrb	r3, [r7, #3]
 8001614:	b21b      	sxth	r3, r3
 8001616:	021b      	lsls	r3, r3, #8
 8001618:	b21b      	sxth	r3, r3
 800161a:	4313      	orrs	r3, r2
 800161c:	b21a      	sxth	r2, r3
 800161e:	4b44      	ldr	r3, [pc, #272]	@ (8001730 <getFeedback+0x194>)
 8001620:	809a      	strh	r2, [r3, #4]
		motors[0].temp = data[1];
 8001622:	787a      	ldrb	r2, [r7, #1]
 8001624:	4b42      	ldr	r3, [pc, #264]	@ (8001730 <getFeedback+0x194>)
 8001626:	719a      	strb	r2, [r3, #6]
 8001628:	e028      	b.n	800167c <getFeedback+0xe0>
	}else if(rxMessage.frame.id == 0x141 && data[0] == 0x90){
 800162a:	4b40      	ldr	r3, [pc, #256]	@ (800172c <getFeedback+0x190>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f240 1241 	movw	r2, #321	@ 0x141
 8001632:	4293      	cmp	r3, r2
 8001634:	d122      	bne.n	800167c <getFeedback+0xe0>
 8001636:	783b      	ldrb	r3, [r7, #0]
 8001638:	2b90      	cmp	r3, #144	@ 0x90
 800163a:	d11f      	bne.n	800167c <getFeedback+0xe0>
        motors[0].encoder = (int16_t)(data[2] | (data[3]<<8));
 800163c:	78bb      	ldrb	r3, [r7, #2]
 800163e:	b21a      	sxth	r2, r3
 8001640:	78fb      	ldrb	r3, [r7, #3]
 8001642:	b21b      	sxth	r3, r3
 8001644:	021b      	lsls	r3, r3, #8
 8001646:	b21b      	sxth	r3, r3
 8001648:	4313      	orrs	r3, r2
 800164a:	b21b      	sxth	r3, r3
 800164c:	b29a      	uxth	r2, r3
 800164e:	4b38      	ldr	r3, [pc, #224]	@ (8001730 <getFeedback+0x194>)
 8001650:	811a      	strh	r2, [r3, #8]
        motors[0].encoderRaw = (int16_t)(data[4] | (data[5]<<8));
 8001652:	793b      	ldrb	r3, [r7, #4]
 8001654:	b21a      	sxth	r2, r3
 8001656:	797b      	ldrb	r3, [r7, #5]
 8001658:	b21b      	sxth	r3, r3
 800165a:	021b      	lsls	r3, r3, #8
 800165c:	b21b      	sxth	r3, r3
 800165e:	4313      	orrs	r3, r2
 8001660:	b21b      	sxth	r3, r3
 8001662:	b29a      	uxth	r2, r3
 8001664:	4b32      	ldr	r3, [pc, #200]	@ (8001730 <getFeedback+0x194>)
 8001666:	815a      	strh	r2, [r3, #10]
        motors[0].encoderOffset = (int16_t)(data[6] | (data[7]<<8));
 8001668:	79bb      	ldrb	r3, [r7, #6]
 800166a:	b21a      	sxth	r2, r3
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	b21b      	sxth	r3, r3
 8001670:	021b      	lsls	r3, r3, #8
 8001672:	b21b      	sxth	r3, r3
 8001674:	4313      	orrs	r3, r2
 8001676:	b21a      	sxth	r2, r3
 8001678:	4b2d      	ldr	r3, [pc, #180]	@ (8001730 <getFeedback+0x194>)
 800167a:	819a      	strh	r2, [r3, #12]
    }

	// second motor
	if (rxMessage.frame.id == 0x142 && rxMessage.frame.data0 == 0xA2) {
 800167c:	4b2b      	ldr	r3, [pc, #172]	@ (800172c <getFeedback+0x190>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f5b3 7fa1 	cmp.w	r3, #322	@ 0x142
 8001684:	d125      	bne.n	80016d2 <getFeedback+0x136>
 8001686:	4b29      	ldr	r3, [pc, #164]	@ (800172c <getFeedback+0x190>)
 8001688:	7a5b      	ldrb	r3, [r3, #9]
 800168a:	2ba2      	cmp	r3, #162	@ 0xa2
 800168c:	d121      	bne.n	80016d2 <getFeedback+0x136>
		motors[1].angle = (int16_t)(data[6] | (data[7]<<8));
 800168e:	79bb      	ldrb	r3, [r7, #6]
 8001690:	b21a      	sxth	r2, r3
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	b21b      	sxth	r3, r3
 8001696:	021b      	lsls	r3, r3, #8
 8001698:	b21b      	sxth	r3, r3
 800169a:	4313      	orrs	r3, r2
 800169c:	b21a      	sxth	r2, r3
 800169e:	4b24      	ldr	r3, [pc, #144]	@ (8001730 <getFeedback+0x194>)
 80016a0:	81da      	strh	r2, [r3, #14]
		motors[1].velocity = (int16_t)(data[4] | (data[5]<<8));
 80016a2:	793b      	ldrb	r3, [r7, #4]
 80016a4:	b21a      	sxth	r2, r3
 80016a6:	797b      	ldrb	r3, [r7, #5]
 80016a8:	b21b      	sxth	r3, r3
 80016aa:	021b      	lsls	r3, r3, #8
 80016ac:	b21b      	sxth	r3, r3
 80016ae:	4313      	orrs	r3, r2
 80016b0:	b21a      	sxth	r2, r3
 80016b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001730 <getFeedback+0x194>)
 80016b4:	821a      	strh	r2, [r3, #16]
		motors[1].current = (int16_t)(data[2] | (data[3]<<8));
 80016b6:	78bb      	ldrb	r3, [r7, #2]
 80016b8:	b21a      	sxth	r2, r3
 80016ba:	78fb      	ldrb	r3, [r7, #3]
 80016bc:	b21b      	sxth	r3, r3
 80016be:	021b      	lsls	r3, r3, #8
 80016c0:	b21b      	sxth	r3, r3
 80016c2:	4313      	orrs	r3, r2
 80016c4:	b21a      	sxth	r2, r3
 80016c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001730 <getFeedback+0x194>)
 80016c8:	825a      	strh	r2, [r3, #18]
		motors[1].temp = data[1];
 80016ca:	787a      	ldrb	r2, [r7, #1]
 80016cc:	4b18      	ldr	r3, [pc, #96]	@ (8001730 <getFeedback+0x194>)
 80016ce:	751a      	strb	r2, [r3, #20]
	}else if(rxMessage.frame.id == 0x142 && data[0] == 0x90){
        motors[1].encoder = (int16_t)(data[2] | (data[3]<<8));
        motors[1].encoderRaw = (int16_t)(data[4] | (data[5]<<8));
        motors[1].encoderOffset = (int16_t)(data[6] | (data[7]<<8));
    }
}
 80016d0:	e027      	b.n	8001722 <getFeedback+0x186>
	}else if(rxMessage.frame.id == 0x142 && data[0] == 0x90){
 80016d2:	4b16      	ldr	r3, [pc, #88]	@ (800172c <getFeedback+0x190>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f5b3 7fa1 	cmp.w	r3, #322	@ 0x142
 80016da:	d122      	bne.n	8001722 <getFeedback+0x186>
 80016dc:	783b      	ldrb	r3, [r7, #0]
 80016de:	2b90      	cmp	r3, #144	@ 0x90
 80016e0:	d11f      	bne.n	8001722 <getFeedback+0x186>
        motors[1].encoder = (int16_t)(data[2] | (data[3]<<8));
 80016e2:	78bb      	ldrb	r3, [r7, #2]
 80016e4:	b21a      	sxth	r2, r3
 80016e6:	78fb      	ldrb	r3, [r7, #3]
 80016e8:	b21b      	sxth	r3, r3
 80016ea:	021b      	lsls	r3, r3, #8
 80016ec:	b21b      	sxth	r3, r3
 80016ee:	4313      	orrs	r3, r2
 80016f0:	b21b      	sxth	r3, r3
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001730 <getFeedback+0x194>)
 80016f6:	82da      	strh	r2, [r3, #22]
        motors[1].encoderRaw = (int16_t)(data[4] | (data[5]<<8));
 80016f8:	793b      	ldrb	r3, [r7, #4]
 80016fa:	b21a      	sxth	r2, r3
 80016fc:	797b      	ldrb	r3, [r7, #5]
 80016fe:	b21b      	sxth	r3, r3
 8001700:	021b      	lsls	r3, r3, #8
 8001702:	b21b      	sxth	r3, r3
 8001704:	4313      	orrs	r3, r2
 8001706:	b21b      	sxth	r3, r3
 8001708:	b29a      	uxth	r2, r3
 800170a:	4b09      	ldr	r3, [pc, #36]	@ (8001730 <getFeedback+0x194>)
 800170c:	831a      	strh	r2, [r3, #24]
        motors[1].encoderOffset = (int16_t)(data[6] | (data[7]<<8));
 800170e:	79bb      	ldrb	r3, [r7, #6]
 8001710:	b21a      	sxth	r2, r3
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	b21b      	sxth	r3, r3
 8001716:	021b      	lsls	r3, r3, #8
 8001718:	b21b      	sxth	r3, r3
 800171a:	4313      	orrs	r3, r2
 800171c:	b21a      	sxth	r2, r3
 800171e:	4b04      	ldr	r3, [pc, #16]	@ (8001730 <getFeedback+0x194>)
 8001720:	835a      	strh	r2, [r3, #26]
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr
 800172c:	20000204 	.word	0x20000204
 8001730:	2000046c 	.word	0x2000046c

08001734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001738:	b672      	cpsid	i
}
 800173a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <Error_Handler+0x8>

08001740 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001744:	4b17      	ldr	r3, [pc, #92]	@ (80017a4 <MX_SPI1_Init+0x64>)
 8001746:	4a18      	ldr	r2, [pc, #96]	@ (80017a8 <MX_SPI1_Init+0x68>)
 8001748:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800174a:	4b16      	ldr	r3, [pc, #88]	@ (80017a4 <MX_SPI1_Init+0x64>)
 800174c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001750:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001752:	4b14      	ldr	r3, [pc, #80]	@ (80017a4 <MX_SPI1_Init+0x64>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001758:	4b12      	ldr	r3, [pc, #72]	@ (80017a4 <MX_SPI1_Init+0x64>)
 800175a:	2200      	movs	r2, #0
 800175c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800175e:	4b11      	ldr	r3, [pc, #68]	@ (80017a4 <MX_SPI1_Init+0x64>)
 8001760:	2200      	movs	r2, #0
 8001762:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001764:	4b0f      	ldr	r3, [pc, #60]	@ (80017a4 <MX_SPI1_Init+0x64>)
 8001766:	2200      	movs	r2, #0
 8001768:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800176a:	4b0e      	ldr	r3, [pc, #56]	@ (80017a4 <MX_SPI1_Init+0x64>)
 800176c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001770:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001772:	4b0c      	ldr	r3, [pc, #48]	@ (80017a4 <MX_SPI1_Init+0x64>)
 8001774:	2210      	movs	r2, #16
 8001776:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001778:	4b0a      	ldr	r3, [pc, #40]	@ (80017a4 <MX_SPI1_Init+0x64>)
 800177a:	2200      	movs	r2, #0
 800177c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800177e:	4b09      	ldr	r3, [pc, #36]	@ (80017a4 <MX_SPI1_Init+0x64>)
 8001780:	2200      	movs	r2, #0
 8001782:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001784:	4b07      	ldr	r3, [pc, #28]	@ (80017a4 <MX_SPI1_Init+0x64>)
 8001786:	2200      	movs	r2, #0
 8001788:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800178a:	4b06      	ldr	r3, [pc, #24]	@ (80017a4 <MX_SPI1_Init+0x64>)
 800178c:	220a      	movs	r2, #10
 800178e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001790:	4804      	ldr	r0, [pc, #16]	@ (80017a4 <MX_SPI1_Init+0x64>)
 8001792:	f001 f92d 	bl	80029f0 <HAL_SPI_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800179c:	f7ff ffca 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000488 	.word	0x20000488
 80017a8:	40013000 	.word	0x40013000

080017ac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b088      	sub	sp, #32
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	f107 0310 	add.w	r3, r7, #16
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a1b      	ldr	r2, [pc, #108]	@ (8001834 <HAL_SPI_MspInit+0x88>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d12f      	bne.n	800182c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001838 <HAL_SPI_MspInit+0x8c>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	4a19      	ldr	r2, [pc, #100]	@ (8001838 <HAL_SPI_MspInit+0x8c>)
 80017d2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017d6:	6193      	str	r3, [r2, #24]
 80017d8:	4b17      	ldr	r3, [pc, #92]	@ (8001838 <HAL_SPI_MspInit+0x8c>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e4:	4b14      	ldr	r3, [pc, #80]	@ (8001838 <HAL_SPI_MspInit+0x8c>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	4a13      	ldr	r2, [pc, #76]	@ (8001838 <HAL_SPI_MspInit+0x8c>)
 80017ea:	f043 0304 	orr.w	r3, r3, #4
 80017ee:	6193      	str	r3, [r2, #24]
 80017f0:	4b11      	ldr	r3, [pc, #68]	@ (8001838 <HAL_SPI_MspInit+0x8c>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80017fc:	23a0      	movs	r3, #160	@ 0xa0
 80017fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001800:	2302      	movs	r3, #2
 8001802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001804:	2303      	movs	r3, #3
 8001806:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001808:	f107 0310 	add.w	r3, r7, #16
 800180c:	4619      	mov	r1, r3
 800180e:	480b      	ldr	r0, [pc, #44]	@ (800183c <HAL_SPI_MspInit+0x90>)
 8001810:	f000 fb42 	bl	8001e98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001814:	2340      	movs	r3, #64	@ 0x40
 8001816:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001818:	2300      	movs	r3, #0
 800181a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001820:	f107 0310 	add.w	r3, r7, #16
 8001824:	4619      	mov	r1, r3
 8001826:	4805      	ldr	r0, [pc, #20]	@ (800183c <HAL_SPI_MspInit+0x90>)
 8001828:	f000 fb36 	bl	8001e98 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800182c:	bf00      	nop
 800182e:	3720      	adds	r7, #32
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40013000 	.word	0x40013000
 8001838:	40021000 	.word	0x40021000
 800183c:	40010800 	.word	0x40010800

08001840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001846:	4b15      	ldr	r3, [pc, #84]	@ (800189c <HAL_MspInit+0x5c>)
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	4a14      	ldr	r2, [pc, #80]	@ (800189c <HAL_MspInit+0x5c>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	6193      	str	r3, [r2, #24]
 8001852:	4b12      	ldr	r3, [pc, #72]	@ (800189c <HAL_MspInit+0x5c>)
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800185e:	4b0f      	ldr	r3, [pc, #60]	@ (800189c <HAL_MspInit+0x5c>)
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	4a0e      	ldr	r2, [pc, #56]	@ (800189c <HAL_MspInit+0x5c>)
 8001864:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001868:	61d3      	str	r3, [r2, #28]
 800186a:	4b0c      	ldr	r3, [pc, #48]	@ (800189c <HAL_MspInit+0x5c>)
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001876:	4b0a      	ldr	r3, [pc, #40]	@ (80018a0 <HAL_MspInit+0x60>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	4a04      	ldr	r2, [pc, #16]	@ (80018a0 <HAL_MspInit+0x60>)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001892:	bf00      	nop
 8001894:	3714      	adds	r7, #20
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr
 800189c:	40021000 	.word	0x40021000
 80018a0:	40010000 	.word	0x40010000

080018a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018a8:	bf00      	nop
 80018aa:	e7fd      	b.n	80018a8 <NMI_Handler+0x4>

080018ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018b0:	bf00      	nop
 80018b2:	e7fd      	b.n	80018b0 <HardFault_Handler+0x4>

080018b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b8:	bf00      	nop
 80018ba:	e7fd      	b.n	80018b8 <MemManage_Handler+0x4>

080018bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018c0:	bf00      	nop
 80018c2:	e7fd      	b.n	80018c0 <BusFault_Handler+0x4>

080018c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018c8:	bf00      	nop
 80018ca:	e7fd      	b.n	80018c8 <UsageFault_Handler+0x4>

080018cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr

080018d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr

080018e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr

080018f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018f4:	f000 f9ac 	bl	8001c50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}

080018fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return 1;
 8001900:	2301      	movs	r3, #1
}
 8001902:	4618      	mov	r0, r3
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr

0800190a <_kill>:

int _kill(int pid, int sig)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b082      	sub	sp, #8
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
 8001912:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001914:	f002 fd68 	bl	80043e8 <__errno>
 8001918:	4603      	mov	r3, r0
 800191a:	2216      	movs	r2, #22
 800191c:	601a      	str	r2, [r3, #0]
  return -1;
 800191e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <_exit>:

void _exit (int status)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b082      	sub	sp, #8
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001932:	f04f 31ff 	mov.w	r1, #4294967295
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff ffe7 	bl	800190a <_kill>
  while (1) {}    /* Make sure we hang here */
 800193c:	bf00      	nop
 800193e:	e7fd      	b.n	800193c <_exit+0x12>

08001940 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	e00a      	b.n	8001968 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001952:	f3af 8000 	nop.w
 8001956:	4601      	mov	r1, r0
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	1c5a      	adds	r2, r3, #1
 800195c:	60ba      	str	r2, [r7, #8]
 800195e:	b2ca      	uxtb	r2, r1
 8001960:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	3301      	adds	r3, #1
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	429a      	cmp	r2, r3
 800196e:	dbf0      	blt.n	8001952 <_read+0x12>
  }

  return len;
 8001970:	687b      	ldr	r3, [r7, #4]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b086      	sub	sp, #24
 800197e:	af00      	add	r7, sp, #0
 8001980:	60f8      	str	r0, [r7, #12]
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001986:	2300      	movs	r3, #0
 8001988:	617b      	str	r3, [r7, #20]
 800198a:	e009      	b.n	80019a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	1c5a      	adds	r2, r3, #1
 8001990:	60ba      	str	r2, [r7, #8]
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	3301      	adds	r3, #1
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	dbf1      	blt.n	800198c <_write+0x12>
  }
  return len;
 80019a8:	687b      	ldr	r3, [r7, #4]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <_close>:

int _close(int file)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b083      	sub	sp, #12
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019be:	4618      	mov	r0, r3
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr

080019c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019d8:	605a      	str	r2, [r3, #4]
  return 0;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr

080019e6 <_isatty>:

int _isatty(int file)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019ee:	2301      	movs	r3, #1
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr

080019fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b085      	sub	sp, #20
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	60f8      	str	r0, [r7, #12]
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr
	...

08001a14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a1c:	4a14      	ldr	r2, [pc, #80]	@ (8001a70 <_sbrk+0x5c>)
 8001a1e:	4b15      	ldr	r3, [pc, #84]	@ (8001a74 <_sbrk+0x60>)
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a28:	4b13      	ldr	r3, [pc, #76]	@ (8001a78 <_sbrk+0x64>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d102      	bne.n	8001a36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a30:	4b11      	ldr	r3, [pc, #68]	@ (8001a78 <_sbrk+0x64>)
 8001a32:	4a12      	ldr	r2, [pc, #72]	@ (8001a7c <_sbrk+0x68>)
 8001a34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a36:	4b10      	ldr	r3, [pc, #64]	@ (8001a78 <_sbrk+0x64>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d207      	bcs.n	8001a54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a44:	f002 fcd0 	bl	80043e8 <__errno>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	220c      	movs	r2, #12
 8001a4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a52:	e009      	b.n	8001a68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a54:	4b08      	ldr	r3, [pc, #32]	@ (8001a78 <_sbrk+0x64>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a5a:	4b07      	ldr	r3, [pc, #28]	@ (8001a78 <_sbrk+0x64>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	4a05      	ldr	r2, [pc, #20]	@ (8001a78 <_sbrk+0x64>)
 8001a64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a66:	68fb      	ldr	r3, [r7, #12]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20005000 	.word	0x20005000
 8001a74:	00000400 	.word	0x00000400
 8001a78:	200004e0 	.word	0x200004e0
 8001a7c:	20000680 	.word	0x20000680

08001a80 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr

08001a8c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a90:	4b11      	ldr	r3, [pc, #68]	@ (8001ad8 <MX_USART1_UART_Init+0x4c>)
 8001a92:	4a12      	ldr	r2, [pc, #72]	@ (8001adc <MX_USART1_UART_Init+0x50>)
 8001a94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a96:	4b10      	ldr	r3, [pc, #64]	@ (8001ad8 <MX_USART1_UART_Init+0x4c>)
 8001a98:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad8 <MX_USART1_UART_Init+0x4c>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad8 <MX_USART1_UART_Init+0x4c>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad8 <MX_USART1_UART_Init+0x4c>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ab0:	4b09      	ldr	r3, [pc, #36]	@ (8001ad8 <MX_USART1_UART_Init+0x4c>)
 8001ab2:	220c      	movs	r2, #12
 8001ab4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ab6:	4b08      	ldr	r3, [pc, #32]	@ (8001ad8 <MX_USART1_UART_Init+0x4c>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001abc:	4b06      	ldr	r3, [pc, #24]	@ (8001ad8 <MX_USART1_UART_Init+0x4c>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ac2:	4805      	ldr	r0, [pc, #20]	@ (8001ad8 <MX_USART1_UART_Init+0x4c>)
 8001ac4:	f001 fd37 	bl	8003536 <HAL_UART_Init>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ace:	f7ff fe31 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	200004e4 	.word	0x200004e4
 8001adc:	40013800 	.word	0x40013800

08001ae0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b088      	sub	sp, #32
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae8:	f107 0310 	add.w	r3, r7, #16
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a1c      	ldr	r2, [pc, #112]	@ (8001b6c <HAL_UART_MspInit+0x8c>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d131      	bne.n	8001b64 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b00:	4b1b      	ldr	r3, [pc, #108]	@ (8001b70 <HAL_UART_MspInit+0x90>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	4a1a      	ldr	r2, [pc, #104]	@ (8001b70 <HAL_UART_MspInit+0x90>)
 8001b06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b0a:	6193      	str	r3, [r2, #24]
 8001b0c:	4b18      	ldr	r3, [pc, #96]	@ (8001b70 <HAL_UART_MspInit+0x90>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b18:	4b15      	ldr	r3, [pc, #84]	@ (8001b70 <HAL_UART_MspInit+0x90>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	4a14      	ldr	r2, [pc, #80]	@ (8001b70 <HAL_UART_MspInit+0x90>)
 8001b1e:	f043 0304 	orr.w	r3, r3, #4
 8001b22:	6193      	str	r3, [r2, #24]
 8001b24:	4b12      	ldr	r3, [pc, #72]	@ (8001b70 <HAL_UART_MspInit+0x90>)
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b36:	2302      	movs	r3, #2
 8001b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3e:	f107 0310 	add.w	r3, r7, #16
 8001b42:	4619      	mov	r1, r3
 8001b44:	480b      	ldr	r0, [pc, #44]	@ (8001b74 <HAL_UART_MspInit+0x94>)
 8001b46:	f000 f9a7 	bl	8001e98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b58:	f107 0310 	add.w	r3, r7, #16
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4805      	ldr	r0, [pc, #20]	@ (8001b74 <HAL_UART_MspInit+0x94>)
 8001b60:	f000 f99a 	bl	8001e98 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001b64:	bf00      	nop
 8001b66:	3720      	adds	r7, #32
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40013800 	.word	0x40013800
 8001b70:	40021000 	.word	0x40021000
 8001b74:	40010800 	.word	0x40010800

08001b78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b78:	f7ff ff82 	bl	8001a80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b7c:	480b      	ldr	r0, [pc, #44]	@ (8001bac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b7e:	490c      	ldr	r1, [pc, #48]	@ (8001bb0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b80:	4a0c      	ldr	r2, [pc, #48]	@ (8001bb4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b84:	e002      	b.n	8001b8c <LoopCopyDataInit>

08001b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b8a:	3304      	adds	r3, #4

08001b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b90:	d3f9      	bcc.n	8001b86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b92:	4a09      	ldr	r2, [pc, #36]	@ (8001bb8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b94:	4c09      	ldr	r4, [pc, #36]	@ (8001bbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b98:	e001      	b.n	8001b9e <LoopFillZerobss>

08001b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b9c:	3204      	adds	r2, #4

08001b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ba0:	d3fb      	bcc.n	8001b9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ba2:	f002 fc27 	bl	80043f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ba6:	f7ff fbb5 	bl	8001314 <main>
  bx lr
 8001baa:	4770      	bx	lr
  ldr r0, =_sdata
 8001bac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bb0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001bb4:	080068cc 	.word	0x080068cc
  ldr r2, =_sbss
 8001bb8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001bbc:	2000067c 	.word	0x2000067c

08001bc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bc0:	e7fe      	b.n	8001bc0 <ADC1_2_IRQHandler>
	...

08001bc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bc8:	4b08      	ldr	r3, [pc, #32]	@ (8001bec <HAL_Init+0x28>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a07      	ldr	r2, [pc, #28]	@ (8001bec <HAL_Init+0x28>)
 8001bce:	f043 0310 	orr.w	r3, r3, #16
 8001bd2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd4:	2003      	movs	r0, #3
 8001bd6:	f000 f92b 	bl	8001e30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bda:	200f      	movs	r0, #15
 8001bdc:	f000 f808 	bl	8001bf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001be0:	f7ff fe2e 	bl	8001840 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40022000 	.word	0x40022000

08001bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bf8:	4b12      	ldr	r3, [pc, #72]	@ (8001c44 <HAL_InitTick+0x54>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4b12      	ldr	r3, [pc, #72]	@ (8001c48 <HAL_InitTick+0x58>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	4619      	mov	r1, r3
 8001c02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f000 f935 	bl	8001e7e <HAL_SYSTICK_Config>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e00e      	b.n	8001c3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b0f      	cmp	r3, #15
 8001c22:	d80a      	bhi.n	8001c3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c24:	2200      	movs	r2, #0
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	f04f 30ff 	mov.w	r0, #4294967295
 8001c2c:	f000 f90b 	bl	8001e46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c30:	4a06      	ldr	r2, [pc, #24]	@ (8001c4c <HAL_InitTick+0x5c>)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
 8001c38:	e000      	b.n	8001c3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20000008 	.word	0x20000008
 8001c48:	20000010 	.word	0x20000010
 8001c4c:	2000000c 	.word	0x2000000c

08001c50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c54:	4b05      	ldr	r3, [pc, #20]	@ (8001c6c <HAL_IncTick+0x1c>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4b05      	ldr	r3, [pc, #20]	@ (8001c70 <HAL_IncTick+0x20>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4413      	add	r3, r2
 8001c60:	4a03      	ldr	r2, [pc, #12]	@ (8001c70 <HAL_IncTick+0x20>)
 8001c62:	6013      	str	r3, [r2, #0]
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr
 8001c6c:	20000010 	.word	0x20000010
 8001c70:	2000052c 	.word	0x2000052c

08001c74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return uwTick;
 8001c78:	4b02      	ldr	r3, [pc, #8]	@ (8001c84 <HAL_GetTick+0x10>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr
 8001c84:	2000052c 	.word	0x2000052c

08001c88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c90:	f7ff fff0 	bl	8001c74 <HAL_GetTick>
 8001c94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca0:	d005      	beq.n	8001cae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ccc <HAL_Delay+0x44>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4413      	add	r3, r2
 8001cac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cae:	bf00      	nop
 8001cb0:	f7ff ffe0 	bl	8001c74 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d8f7      	bhi.n	8001cb0 <HAL_Delay+0x28>
  {
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	bf00      	nop
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000010 	.word	0x20000010

08001cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cec:	4013      	ands	r3, r2
 8001cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cf8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d02:	4a04      	ldr	r2, [pc, #16]	@ (8001d14 <__NVIC_SetPriorityGrouping+0x44>)
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	60d3      	str	r3, [r2, #12]
}
 8001d08:	bf00      	nop
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc80      	pop	{r7}
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d1c:	4b04      	ldr	r3, [pc, #16]	@ (8001d30 <__NVIC_GetPriorityGrouping+0x18>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	0a1b      	lsrs	r3, r3, #8
 8001d22:	f003 0307 	and.w	r3, r3, #7
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	6039      	str	r1, [r7, #0]
 8001d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	db0a      	blt.n	8001d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	490c      	ldr	r1, [pc, #48]	@ (8001d80 <__NVIC_SetPriority+0x4c>)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	0112      	lsls	r2, r2, #4
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	440b      	add	r3, r1
 8001d58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d5c:	e00a      	b.n	8001d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	4908      	ldr	r1, [pc, #32]	@ (8001d84 <__NVIC_SetPriority+0x50>)
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	3b04      	subs	r3, #4
 8001d6c:	0112      	lsls	r2, r2, #4
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	440b      	add	r3, r1
 8001d72:	761a      	strb	r2, [r3, #24]
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	e000e100 	.word	0xe000e100
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b089      	sub	sp, #36	@ 0x24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f1c3 0307 	rsb	r3, r3, #7
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	bf28      	it	cs
 8001da6:	2304      	movcs	r3, #4
 8001da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	3304      	adds	r3, #4
 8001dae:	2b06      	cmp	r3, #6
 8001db0:	d902      	bls.n	8001db8 <NVIC_EncodePriority+0x30>
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3b03      	subs	r3, #3
 8001db6:	e000      	b.n	8001dba <NVIC_EncodePriority+0x32>
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43da      	mvns	r2, r3
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	401a      	ands	r2, r3
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dda:	43d9      	mvns	r1, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de0:	4313      	orrs	r3, r2
         );
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3724      	adds	r7, #36	@ 0x24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr

08001dec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dfc:	d301      	bcc.n	8001e02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e00f      	b.n	8001e22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e02:	4a0a      	ldr	r2, [pc, #40]	@ (8001e2c <SysTick_Config+0x40>)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3b01      	subs	r3, #1
 8001e08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e0a:	210f      	movs	r1, #15
 8001e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e10:	f7ff ff90 	bl	8001d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e14:	4b05      	ldr	r3, [pc, #20]	@ (8001e2c <SysTick_Config+0x40>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e1a:	4b04      	ldr	r3, [pc, #16]	@ (8001e2c <SysTick_Config+0x40>)
 8001e1c:	2207      	movs	r2, #7
 8001e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	e000e010 	.word	0xe000e010

08001e30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f7ff ff49 	bl	8001cd0 <__NVIC_SetPriorityGrouping>
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b086      	sub	sp, #24
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	60b9      	str	r1, [r7, #8]
 8001e50:	607a      	str	r2, [r7, #4]
 8001e52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e58:	f7ff ff5e 	bl	8001d18 <__NVIC_GetPriorityGrouping>
 8001e5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	68b9      	ldr	r1, [r7, #8]
 8001e62:	6978      	ldr	r0, [r7, #20]
 8001e64:	f7ff ff90 	bl	8001d88 <NVIC_EncodePriority>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e6e:	4611      	mov	r1, r2
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff ff5f 	bl	8001d34 <__NVIC_SetPriority>
}
 8001e76:	bf00      	nop
 8001e78:	3718      	adds	r7, #24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7ff ffb0 	bl	8001dec <SysTick_Config>
 8001e8c:	4603      	mov	r3, r0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b08b      	sub	sp, #44	@ 0x2c
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eaa:	e169      	b.n	8002180 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001eac:	2201      	movs	r2, #1
 8001eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	69fa      	ldr	r2, [r7, #28]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	f040 8158 	bne.w	800217a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	4a9a      	ldr	r2, [pc, #616]	@ (8002138 <HAL_GPIO_Init+0x2a0>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d05e      	beq.n	8001f92 <HAL_GPIO_Init+0xfa>
 8001ed4:	4a98      	ldr	r2, [pc, #608]	@ (8002138 <HAL_GPIO_Init+0x2a0>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d875      	bhi.n	8001fc6 <HAL_GPIO_Init+0x12e>
 8001eda:	4a98      	ldr	r2, [pc, #608]	@ (800213c <HAL_GPIO_Init+0x2a4>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d058      	beq.n	8001f92 <HAL_GPIO_Init+0xfa>
 8001ee0:	4a96      	ldr	r2, [pc, #600]	@ (800213c <HAL_GPIO_Init+0x2a4>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d86f      	bhi.n	8001fc6 <HAL_GPIO_Init+0x12e>
 8001ee6:	4a96      	ldr	r2, [pc, #600]	@ (8002140 <HAL_GPIO_Init+0x2a8>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d052      	beq.n	8001f92 <HAL_GPIO_Init+0xfa>
 8001eec:	4a94      	ldr	r2, [pc, #592]	@ (8002140 <HAL_GPIO_Init+0x2a8>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d869      	bhi.n	8001fc6 <HAL_GPIO_Init+0x12e>
 8001ef2:	4a94      	ldr	r2, [pc, #592]	@ (8002144 <HAL_GPIO_Init+0x2ac>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d04c      	beq.n	8001f92 <HAL_GPIO_Init+0xfa>
 8001ef8:	4a92      	ldr	r2, [pc, #584]	@ (8002144 <HAL_GPIO_Init+0x2ac>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d863      	bhi.n	8001fc6 <HAL_GPIO_Init+0x12e>
 8001efe:	4a92      	ldr	r2, [pc, #584]	@ (8002148 <HAL_GPIO_Init+0x2b0>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d046      	beq.n	8001f92 <HAL_GPIO_Init+0xfa>
 8001f04:	4a90      	ldr	r2, [pc, #576]	@ (8002148 <HAL_GPIO_Init+0x2b0>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d85d      	bhi.n	8001fc6 <HAL_GPIO_Init+0x12e>
 8001f0a:	2b12      	cmp	r3, #18
 8001f0c:	d82a      	bhi.n	8001f64 <HAL_GPIO_Init+0xcc>
 8001f0e:	2b12      	cmp	r3, #18
 8001f10:	d859      	bhi.n	8001fc6 <HAL_GPIO_Init+0x12e>
 8001f12:	a201      	add	r2, pc, #4	@ (adr r2, 8001f18 <HAL_GPIO_Init+0x80>)
 8001f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f18:	08001f93 	.word	0x08001f93
 8001f1c:	08001f6d 	.word	0x08001f6d
 8001f20:	08001f7f 	.word	0x08001f7f
 8001f24:	08001fc1 	.word	0x08001fc1
 8001f28:	08001fc7 	.word	0x08001fc7
 8001f2c:	08001fc7 	.word	0x08001fc7
 8001f30:	08001fc7 	.word	0x08001fc7
 8001f34:	08001fc7 	.word	0x08001fc7
 8001f38:	08001fc7 	.word	0x08001fc7
 8001f3c:	08001fc7 	.word	0x08001fc7
 8001f40:	08001fc7 	.word	0x08001fc7
 8001f44:	08001fc7 	.word	0x08001fc7
 8001f48:	08001fc7 	.word	0x08001fc7
 8001f4c:	08001fc7 	.word	0x08001fc7
 8001f50:	08001fc7 	.word	0x08001fc7
 8001f54:	08001fc7 	.word	0x08001fc7
 8001f58:	08001fc7 	.word	0x08001fc7
 8001f5c:	08001f75 	.word	0x08001f75
 8001f60:	08001f89 	.word	0x08001f89
 8001f64:	4a79      	ldr	r2, [pc, #484]	@ (800214c <HAL_GPIO_Init+0x2b4>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d013      	beq.n	8001f92 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f6a:	e02c      	b.n	8001fc6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	623b      	str	r3, [r7, #32]
          break;
 8001f72:	e029      	b.n	8001fc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	3304      	adds	r3, #4
 8001f7a:	623b      	str	r3, [r7, #32]
          break;
 8001f7c:	e024      	b.n	8001fc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	3308      	adds	r3, #8
 8001f84:	623b      	str	r3, [r7, #32]
          break;
 8001f86:	e01f      	b.n	8001fc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	330c      	adds	r3, #12
 8001f8e:	623b      	str	r3, [r7, #32]
          break;
 8001f90:	e01a      	b.n	8001fc8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d102      	bne.n	8001fa0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f9a:	2304      	movs	r3, #4
 8001f9c:	623b      	str	r3, [r7, #32]
          break;
 8001f9e:	e013      	b.n	8001fc8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d105      	bne.n	8001fb4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fa8:	2308      	movs	r3, #8
 8001faa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	69fa      	ldr	r2, [r7, #28]
 8001fb0:	611a      	str	r2, [r3, #16]
          break;
 8001fb2:	e009      	b.n	8001fc8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fb4:	2308      	movs	r3, #8
 8001fb6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69fa      	ldr	r2, [r7, #28]
 8001fbc:	615a      	str	r2, [r3, #20]
          break;
 8001fbe:	e003      	b.n	8001fc8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	623b      	str	r3, [r7, #32]
          break;
 8001fc4:	e000      	b.n	8001fc8 <HAL_GPIO_Init+0x130>
          break;
 8001fc6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	2bff      	cmp	r3, #255	@ 0xff
 8001fcc:	d801      	bhi.n	8001fd2 <HAL_GPIO_Init+0x13a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	e001      	b.n	8001fd6 <HAL_GPIO_Init+0x13e>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	2bff      	cmp	r3, #255	@ 0xff
 8001fdc:	d802      	bhi.n	8001fe4 <HAL_GPIO_Init+0x14c>
 8001fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	e002      	b.n	8001fea <HAL_GPIO_Init+0x152>
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe6:	3b08      	subs	r3, #8
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	210f      	movs	r1, #15
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	401a      	ands	r2, r3
 8001ffc:	6a39      	ldr	r1, [r7, #32]
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	fa01 f303 	lsl.w	r3, r1, r3
 8002004:	431a      	orrs	r2, r3
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 80b1 	beq.w	800217a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002018:	4b4d      	ldr	r3, [pc, #308]	@ (8002150 <HAL_GPIO_Init+0x2b8>)
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	4a4c      	ldr	r2, [pc, #304]	@ (8002150 <HAL_GPIO_Init+0x2b8>)
 800201e:	f043 0301 	orr.w	r3, r3, #1
 8002022:	6193      	str	r3, [r2, #24]
 8002024:	4b4a      	ldr	r3, [pc, #296]	@ (8002150 <HAL_GPIO_Init+0x2b8>)
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002030:	4a48      	ldr	r2, [pc, #288]	@ (8002154 <HAL_GPIO_Init+0x2bc>)
 8002032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002034:	089b      	lsrs	r3, r3, #2
 8002036:	3302      	adds	r3, #2
 8002038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800203c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800203e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002040:	f003 0303 	and.w	r3, r3, #3
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	220f      	movs	r2, #15
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	4013      	ands	r3, r2
 8002052:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a40      	ldr	r2, [pc, #256]	@ (8002158 <HAL_GPIO_Init+0x2c0>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d013      	beq.n	8002084 <HAL_GPIO_Init+0x1ec>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a3f      	ldr	r2, [pc, #252]	@ (800215c <HAL_GPIO_Init+0x2c4>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d00d      	beq.n	8002080 <HAL_GPIO_Init+0x1e8>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a3e      	ldr	r2, [pc, #248]	@ (8002160 <HAL_GPIO_Init+0x2c8>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d007      	beq.n	800207c <HAL_GPIO_Init+0x1e4>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a3d      	ldr	r2, [pc, #244]	@ (8002164 <HAL_GPIO_Init+0x2cc>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d101      	bne.n	8002078 <HAL_GPIO_Init+0x1e0>
 8002074:	2303      	movs	r3, #3
 8002076:	e006      	b.n	8002086 <HAL_GPIO_Init+0x1ee>
 8002078:	2304      	movs	r3, #4
 800207a:	e004      	b.n	8002086 <HAL_GPIO_Init+0x1ee>
 800207c:	2302      	movs	r3, #2
 800207e:	e002      	b.n	8002086 <HAL_GPIO_Init+0x1ee>
 8002080:	2301      	movs	r3, #1
 8002082:	e000      	b.n	8002086 <HAL_GPIO_Init+0x1ee>
 8002084:	2300      	movs	r3, #0
 8002086:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002088:	f002 0203 	and.w	r2, r2, #3
 800208c:	0092      	lsls	r2, r2, #2
 800208e:	4093      	lsls	r3, r2
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	4313      	orrs	r3, r2
 8002094:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002096:	492f      	ldr	r1, [pc, #188]	@ (8002154 <HAL_GPIO_Init+0x2bc>)
 8002098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209a:	089b      	lsrs	r3, r3, #2
 800209c:	3302      	adds	r3, #2
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d006      	beq.n	80020be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002168 <HAL_GPIO_Init+0x2d0>)
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	492c      	ldr	r1, [pc, #176]	@ (8002168 <HAL_GPIO_Init+0x2d0>)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	608b      	str	r3, [r1, #8]
 80020bc:	e006      	b.n	80020cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020be:	4b2a      	ldr	r3, [pc, #168]	@ (8002168 <HAL_GPIO_Init+0x2d0>)
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	43db      	mvns	r3, r3
 80020c6:	4928      	ldr	r1, [pc, #160]	@ (8002168 <HAL_GPIO_Init+0x2d0>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d006      	beq.n	80020e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020d8:	4b23      	ldr	r3, [pc, #140]	@ (8002168 <HAL_GPIO_Init+0x2d0>)
 80020da:	68da      	ldr	r2, [r3, #12]
 80020dc:	4922      	ldr	r1, [pc, #136]	@ (8002168 <HAL_GPIO_Init+0x2d0>)
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	60cb      	str	r3, [r1, #12]
 80020e4:	e006      	b.n	80020f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020e6:	4b20      	ldr	r3, [pc, #128]	@ (8002168 <HAL_GPIO_Init+0x2d0>)
 80020e8:	68da      	ldr	r2, [r3, #12]
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	43db      	mvns	r3, r3
 80020ee:	491e      	ldr	r1, [pc, #120]	@ (8002168 <HAL_GPIO_Init+0x2d0>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d006      	beq.n	800210e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002100:	4b19      	ldr	r3, [pc, #100]	@ (8002168 <HAL_GPIO_Init+0x2d0>)
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	4918      	ldr	r1, [pc, #96]	@ (8002168 <HAL_GPIO_Init+0x2d0>)
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	4313      	orrs	r3, r2
 800210a:	604b      	str	r3, [r1, #4]
 800210c:	e006      	b.n	800211c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800210e:	4b16      	ldr	r3, [pc, #88]	@ (8002168 <HAL_GPIO_Init+0x2d0>)
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	43db      	mvns	r3, r3
 8002116:	4914      	ldr	r1, [pc, #80]	@ (8002168 <HAL_GPIO_Init+0x2d0>)
 8002118:	4013      	ands	r3, r2
 800211a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d021      	beq.n	800216c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002128:	4b0f      	ldr	r3, [pc, #60]	@ (8002168 <HAL_GPIO_Init+0x2d0>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	490e      	ldr	r1, [pc, #56]	@ (8002168 <HAL_GPIO_Init+0x2d0>)
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	4313      	orrs	r3, r2
 8002132:	600b      	str	r3, [r1, #0]
 8002134:	e021      	b.n	800217a <HAL_GPIO_Init+0x2e2>
 8002136:	bf00      	nop
 8002138:	10320000 	.word	0x10320000
 800213c:	10310000 	.word	0x10310000
 8002140:	10220000 	.word	0x10220000
 8002144:	10210000 	.word	0x10210000
 8002148:	10120000 	.word	0x10120000
 800214c:	10110000 	.word	0x10110000
 8002150:	40021000 	.word	0x40021000
 8002154:	40010000 	.word	0x40010000
 8002158:	40010800 	.word	0x40010800
 800215c:	40010c00 	.word	0x40010c00
 8002160:	40011000 	.word	0x40011000
 8002164:	40011400 	.word	0x40011400
 8002168:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800216c:	4b0b      	ldr	r3, [pc, #44]	@ (800219c <HAL_GPIO_Init+0x304>)
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	43db      	mvns	r3, r3
 8002174:	4909      	ldr	r1, [pc, #36]	@ (800219c <HAL_GPIO_Init+0x304>)
 8002176:	4013      	ands	r3, r2
 8002178:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800217a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217c:	3301      	adds	r3, #1
 800217e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002186:	fa22 f303 	lsr.w	r3, r2, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	f47f ae8e 	bne.w	8001eac <HAL_GPIO_Init+0x14>
  }
}
 8002190:	bf00      	nop
 8002192:	bf00      	nop
 8002194:	372c      	adds	r7, #44	@ 0x2c
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr
 800219c:	40010400 	.word	0x40010400

080021a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	460b      	mov	r3, r1
 80021aa:	807b      	strh	r3, [r7, #2]
 80021ac:	4613      	mov	r3, r2
 80021ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021b0:	787b      	ldrb	r3, [r7, #1]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021b6:	887a      	ldrh	r2, [r7, #2]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021bc:	e003      	b.n	80021c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021be:	887b      	ldrh	r3, [r7, #2]
 80021c0:	041a      	lsls	r2, r3, #16
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	611a      	str	r2, [r3, #16]
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr

080021d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e272      	b.n	80026c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f000 8087 	beq.w	80022fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021f0:	4b92      	ldr	r3, [pc, #584]	@ (800243c <HAL_RCC_OscConfig+0x26c>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 030c 	and.w	r3, r3, #12
 80021f8:	2b04      	cmp	r3, #4
 80021fa:	d00c      	beq.n	8002216 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021fc:	4b8f      	ldr	r3, [pc, #572]	@ (800243c <HAL_RCC_OscConfig+0x26c>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 030c 	and.w	r3, r3, #12
 8002204:	2b08      	cmp	r3, #8
 8002206:	d112      	bne.n	800222e <HAL_RCC_OscConfig+0x5e>
 8002208:	4b8c      	ldr	r3, [pc, #560]	@ (800243c <HAL_RCC_OscConfig+0x26c>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002210:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002214:	d10b      	bne.n	800222e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002216:	4b89      	ldr	r3, [pc, #548]	@ (800243c <HAL_RCC_OscConfig+0x26c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d06c      	beq.n	80022fc <HAL_RCC_OscConfig+0x12c>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d168      	bne.n	80022fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e24c      	b.n	80026c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002236:	d106      	bne.n	8002246 <HAL_RCC_OscConfig+0x76>
 8002238:	4b80      	ldr	r3, [pc, #512]	@ (800243c <HAL_RCC_OscConfig+0x26c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a7f      	ldr	r2, [pc, #508]	@ (800243c <HAL_RCC_OscConfig+0x26c>)
 800223e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002242:	6013      	str	r3, [r2, #0]
 8002244:	e02e      	b.n	80022a4 <HAL_RCC_OscConfig+0xd4>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10c      	bne.n	8002268 <HAL_RCC_OscConfig+0x98>
 800224e:	4b7b      	ldr	r3, [pc, #492]	@ (800243c <HAL_RCC_OscConfig+0x26c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a7a      	ldr	r2, [pc, #488]	@ (800243c <HAL_RCC_OscConfig+0x26c>)
 8002254:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	4b78      	ldr	r3, [pc, #480]	@ (800243c <HAL_RCC_OscConfig+0x26c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a77      	ldr	r2, [pc, #476]	@ (800243c <HAL_RCC_OscConfig+0x26c>)
 8002260:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	e01d      	b.n	80022a4 <HAL_RCC_OscConfig+0xd4>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002270:	d10c      	bne.n	800228c <HAL_RCC_OscConfig+0xbc>
 8002272:	4b72      	ldr	r3, [pc, #456]	@ (800243c <HAL_RCC_OscConfig+0x26c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a71      	ldr	r2, [pc, #452]	@ (800243c <HAL_RCC_OscConfig+0x26c>)
 8002278:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800227c:	6013      	str	r3, [r2, #0]
 800227e:	4b6f      	ldr	r3, [pc, #444]	@ (800243c <HAL_RCC_OscConfig+0x26c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a6e      	ldr	r2, [pc, #440]	@ (800243c <HAL_RCC_OscConfig+0x26c>)
 8002284:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	e00b      	b.n	80022a4 <HAL_RCC_OscConfig+0xd4>
 800228c:	4b6b      	ldr	r3, [pc, #428]	@ (800243c <HAL_RCC_OscConfig+0x26c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a6a      	ldr	r2, [pc, #424]	@ (800243c <HAL_RCC_OscConfig+0x26c>)
 8002292:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002296:	6013      	str	r3, [r2, #0]
 8002298:	4b68      	ldr	r3, [pc, #416]	@ (800243c <HAL_RCC_OscConfig+0x26c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a67      	ldr	r2, [pc, #412]	@ (800243c <HAL_RCC_OscConfig+0x26c>)
 800229e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d013      	beq.n	80022d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ac:	f7ff fce2 	bl	8001c74 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022b4:	f7ff fcde 	bl	8001c74 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b64      	cmp	r3, #100	@ 0x64
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e200      	b.n	80026c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c6:	4b5d      	ldr	r3, [pc, #372]	@ (800243c <HAL_RCC_OscConfig+0x26c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d0f0      	beq.n	80022b4 <HAL_RCC_OscConfig+0xe4>
 80022d2:	e014      	b.n	80022fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d4:	f7ff fcce 	bl	8001c74 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022dc:	f7ff fcca 	bl	8001c74 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b64      	cmp	r3, #100	@ 0x64
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e1ec      	b.n	80026c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ee:	4b53      	ldr	r3, [pc, #332]	@ (800243c <HAL_RCC_OscConfig+0x26c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f0      	bne.n	80022dc <HAL_RCC_OscConfig+0x10c>
 80022fa:	e000      	b.n	80022fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d063      	beq.n	80023d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800230a:	4b4c      	ldr	r3, [pc, #304]	@ (800243c <HAL_RCC_OscConfig+0x26c>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f003 030c 	and.w	r3, r3, #12
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00b      	beq.n	800232e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002316:	4b49      	ldr	r3, [pc, #292]	@ (800243c <HAL_RCC_OscConfig+0x26c>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f003 030c 	and.w	r3, r3, #12
 800231e:	2b08      	cmp	r3, #8
 8002320:	d11c      	bne.n	800235c <HAL_RCC_OscConfig+0x18c>
 8002322:	4b46      	ldr	r3, [pc, #280]	@ (800243c <HAL_RCC_OscConfig+0x26c>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d116      	bne.n	800235c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800232e:	4b43      	ldr	r3, [pc, #268]	@ (800243c <HAL_RCC_OscConfig+0x26c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d005      	beq.n	8002346 <HAL_RCC_OscConfig+0x176>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d001      	beq.n	8002346 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e1c0      	b.n	80026c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002346:	4b3d      	ldr	r3, [pc, #244]	@ (800243c <HAL_RCC_OscConfig+0x26c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	4939      	ldr	r1, [pc, #228]	@ (800243c <HAL_RCC_OscConfig+0x26c>)
 8002356:	4313      	orrs	r3, r2
 8002358:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800235a:	e03a      	b.n	80023d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d020      	beq.n	80023a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002364:	4b36      	ldr	r3, [pc, #216]	@ (8002440 <HAL_RCC_OscConfig+0x270>)
 8002366:	2201      	movs	r2, #1
 8002368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236a:	f7ff fc83 	bl	8001c74 <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002372:	f7ff fc7f 	bl	8001c74 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e1a1      	b.n	80026c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002384:	4b2d      	ldr	r3, [pc, #180]	@ (800243c <HAL_RCC_OscConfig+0x26c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0f0      	beq.n	8002372 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002390:	4b2a      	ldr	r3, [pc, #168]	@ (800243c <HAL_RCC_OscConfig+0x26c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	4927      	ldr	r1, [pc, #156]	@ (800243c <HAL_RCC_OscConfig+0x26c>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	600b      	str	r3, [r1, #0]
 80023a4:	e015      	b.n	80023d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023a6:	4b26      	ldr	r3, [pc, #152]	@ (8002440 <HAL_RCC_OscConfig+0x270>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ac:	f7ff fc62 	bl	8001c74 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b4:	f7ff fc5e 	bl	8001c74 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e180      	b.n	80026c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023c6:	4b1d      	ldr	r3, [pc, #116]	@ (800243c <HAL_RCC_OscConfig+0x26c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1f0      	bne.n	80023b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d03a      	beq.n	8002454 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d019      	beq.n	800241a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023e6:	4b17      	ldr	r3, [pc, #92]	@ (8002444 <HAL_RCC_OscConfig+0x274>)
 80023e8:	2201      	movs	r2, #1
 80023ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ec:	f7ff fc42 	bl	8001c74 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023f4:	f7ff fc3e 	bl	8001c74 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e160      	b.n	80026c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002406:	4b0d      	ldr	r3, [pc, #52]	@ (800243c <HAL_RCC_OscConfig+0x26c>)
 8002408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0f0      	beq.n	80023f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002412:	2001      	movs	r0, #1
 8002414:	f000 face 	bl	80029b4 <RCC_Delay>
 8002418:	e01c      	b.n	8002454 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800241a:	4b0a      	ldr	r3, [pc, #40]	@ (8002444 <HAL_RCC_OscConfig+0x274>)
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002420:	f7ff fc28 	bl	8001c74 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002426:	e00f      	b.n	8002448 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002428:	f7ff fc24 	bl	8001c74 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d908      	bls.n	8002448 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e146      	b.n	80026c8 <HAL_RCC_OscConfig+0x4f8>
 800243a:	bf00      	nop
 800243c:	40021000 	.word	0x40021000
 8002440:	42420000 	.word	0x42420000
 8002444:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002448:	4b92      	ldr	r3, [pc, #584]	@ (8002694 <HAL_RCC_OscConfig+0x4c4>)
 800244a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1e9      	bne.n	8002428 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 80a6 	beq.w	80025ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002462:	2300      	movs	r3, #0
 8002464:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002466:	4b8b      	ldr	r3, [pc, #556]	@ (8002694 <HAL_RCC_OscConfig+0x4c4>)
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10d      	bne.n	800248e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002472:	4b88      	ldr	r3, [pc, #544]	@ (8002694 <HAL_RCC_OscConfig+0x4c4>)
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	4a87      	ldr	r2, [pc, #540]	@ (8002694 <HAL_RCC_OscConfig+0x4c4>)
 8002478:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800247c:	61d3      	str	r3, [r2, #28]
 800247e:	4b85      	ldr	r3, [pc, #532]	@ (8002694 <HAL_RCC_OscConfig+0x4c4>)
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002486:	60bb      	str	r3, [r7, #8]
 8002488:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800248a:	2301      	movs	r3, #1
 800248c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800248e:	4b82      	ldr	r3, [pc, #520]	@ (8002698 <HAL_RCC_OscConfig+0x4c8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002496:	2b00      	cmp	r3, #0
 8002498:	d118      	bne.n	80024cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800249a:	4b7f      	ldr	r3, [pc, #508]	@ (8002698 <HAL_RCC_OscConfig+0x4c8>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a7e      	ldr	r2, [pc, #504]	@ (8002698 <HAL_RCC_OscConfig+0x4c8>)
 80024a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024a6:	f7ff fbe5 	bl	8001c74 <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ae:	f7ff fbe1 	bl	8001c74 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b64      	cmp	r3, #100	@ 0x64
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e103      	b.n	80026c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c0:	4b75      	ldr	r3, [pc, #468]	@ (8002698 <HAL_RCC_OscConfig+0x4c8>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0f0      	beq.n	80024ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d106      	bne.n	80024e2 <HAL_RCC_OscConfig+0x312>
 80024d4:	4b6f      	ldr	r3, [pc, #444]	@ (8002694 <HAL_RCC_OscConfig+0x4c4>)
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	4a6e      	ldr	r2, [pc, #440]	@ (8002694 <HAL_RCC_OscConfig+0x4c4>)
 80024da:	f043 0301 	orr.w	r3, r3, #1
 80024de:	6213      	str	r3, [r2, #32]
 80024e0:	e02d      	b.n	800253e <HAL_RCC_OscConfig+0x36e>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10c      	bne.n	8002504 <HAL_RCC_OscConfig+0x334>
 80024ea:	4b6a      	ldr	r3, [pc, #424]	@ (8002694 <HAL_RCC_OscConfig+0x4c4>)
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	4a69      	ldr	r2, [pc, #420]	@ (8002694 <HAL_RCC_OscConfig+0x4c4>)
 80024f0:	f023 0301 	bic.w	r3, r3, #1
 80024f4:	6213      	str	r3, [r2, #32]
 80024f6:	4b67      	ldr	r3, [pc, #412]	@ (8002694 <HAL_RCC_OscConfig+0x4c4>)
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	4a66      	ldr	r2, [pc, #408]	@ (8002694 <HAL_RCC_OscConfig+0x4c4>)
 80024fc:	f023 0304 	bic.w	r3, r3, #4
 8002500:	6213      	str	r3, [r2, #32]
 8002502:	e01c      	b.n	800253e <HAL_RCC_OscConfig+0x36e>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	2b05      	cmp	r3, #5
 800250a:	d10c      	bne.n	8002526 <HAL_RCC_OscConfig+0x356>
 800250c:	4b61      	ldr	r3, [pc, #388]	@ (8002694 <HAL_RCC_OscConfig+0x4c4>)
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	4a60      	ldr	r2, [pc, #384]	@ (8002694 <HAL_RCC_OscConfig+0x4c4>)
 8002512:	f043 0304 	orr.w	r3, r3, #4
 8002516:	6213      	str	r3, [r2, #32]
 8002518:	4b5e      	ldr	r3, [pc, #376]	@ (8002694 <HAL_RCC_OscConfig+0x4c4>)
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	4a5d      	ldr	r2, [pc, #372]	@ (8002694 <HAL_RCC_OscConfig+0x4c4>)
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	6213      	str	r3, [r2, #32]
 8002524:	e00b      	b.n	800253e <HAL_RCC_OscConfig+0x36e>
 8002526:	4b5b      	ldr	r3, [pc, #364]	@ (8002694 <HAL_RCC_OscConfig+0x4c4>)
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	4a5a      	ldr	r2, [pc, #360]	@ (8002694 <HAL_RCC_OscConfig+0x4c4>)
 800252c:	f023 0301 	bic.w	r3, r3, #1
 8002530:	6213      	str	r3, [r2, #32]
 8002532:	4b58      	ldr	r3, [pc, #352]	@ (8002694 <HAL_RCC_OscConfig+0x4c4>)
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	4a57      	ldr	r2, [pc, #348]	@ (8002694 <HAL_RCC_OscConfig+0x4c4>)
 8002538:	f023 0304 	bic.w	r3, r3, #4
 800253c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d015      	beq.n	8002572 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002546:	f7ff fb95 	bl	8001c74 <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800254c:	e00a      	b.n	8002564 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800254e:	f7ff fb91 	bl	8001c74 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	f241 3288 	movw	r2, #5000	@ 0x1388
 800255c:	4293      	cmp	r3, r2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e0b1      	b.n	80026c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002564:	4b4b      	ldr	r3, [pc, #300]	@ (8002694 <HAL_RCC_OscConfig+0x4c4>)
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0ee      	beq.n	800254e <HAL_RCC_OscConfig+0x37e>
 8002570:	e014      	b.n	800259c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002572:	f7ff fb7f 	bl	8001c74 <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002578:	e00a      	b.n	8002590 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800257a:	f7ff fb7b 	bl	8001c74 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002588:	4293      	cmp	r3, r2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e09b      	b.n	80026c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002590:	4b40      	ldr	r3, [pc, #256]	@ (8002694 <HAL_RCC_OscConfig+0x4c4>)
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1ee      	bne.n	800257a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800259c:	7dfb      	ldrb	r3, [r7, #23]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d105      	bne.n	80025ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a2:	4b3c      	ldr	r3, [pc, #240]	@ (8002694 <HAL_RCC_OscConfig+0x4c4>)
 80025a4:	69db      	ldr	r3, [r3, #28]
 80025a6:	4a3b      	ldr	r2, [pc, #236]	@ (8002694 <HAL_RCC_OscConfig+0x4c4>)
 80025a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f000 8087 	beq.w	80026c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025b8:	4b36      	ldr	r3, [pc, #216]	@ (8002694 <HAL_RCC_OscConfig+0x4c4>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 030c 	and.w	r3, r3, #12
 80025c0:	2b08      	cmp	r3, #8
 80025c2:	d061      	beq.n	8002688 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	69db      	ldr	r3, [r3, #28]
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d146      	bne.n	800265a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025cc:	4b33      	ldr	r3, [pc, #204]	@ (800269c <HAL_RCC_OscConfig+0x4cc>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d2:	f7ff fb4f 	bl	8001c74 <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d8:	e008      	b.n	80025ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025da:	f7ff fb4b 	bl	8001c74 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e06d      	b.n	80026c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ec:	4b29      	ldr	r3, [pc, #164]	@ (8002694 <HAL_RCC_OscConfig+0x4c4>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1f0      	bne.n	80025da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002600:	d108      	bne.n	8002614 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002602:	4b24      	ldr	r3, [pc, #144]	@ (8002694 <HAL_RCC_OscConfig+0x4c4>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	4921      	ldr	r1, [pc, #132]	@ (8002694 <HAL_RCC_OscConfig+0x4c4>)
 8002610:	4313      	orrs	r3, r2
 8002612:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002614:	4b1f      	ldr	r3, [pc, #124]	@ (8002694 <HAL_RCC_OscConfig+0x4c4>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a19      	ldr	r1, [r3, #32]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002624:	430b      	orrs	r3, r1
 8002626:	491b      	ldr	r1, [pc, #108]	@ (8002694 <HAL_RCC_OscConfig+0x4c4>)
 8002628:	4313      	orrs	r3, r2
 800262a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800262c:	4b1b      	ldr	r3, [pc, #108]	@ (800269c <HAL_RCC_OscConfig+0x4cc>)
 800262e:	2201      	movs	r2, #1
 8002630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002632:	f7ff fb1f 	bl	8001c74 <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800263a:	f7ff fb1b 	bl	8001c74 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e03d      	b.n	80026c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800264c:	4b11      	ldr	r3, [pc, #68]	@ (8002694 <HAL_RCC_OscConfig+0x4c4>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0f0      	beq.n	800263a <HAL_RCC_OscConfig+0x46a>
 8002658:	e035      	b.n	80026c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800265a:	4b10      	ldr	r3, [pc, #64]	@ (800269c <HAL_RCC_OscConfig+0x4cc>)
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002660:	f7ff fb08 	bl	8001c74 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002668:	f7ff fb04 	bl	8001c74 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e026      	b.n	80026c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800267a:	4b06      	ldr	r3, [pc, #24]	@ (8002694 <HAL_RCC_OscConfig+0x4c4>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f0      	bne.n	8002668 <HAL_RCC_OscConfig+0x498>
 8002686:	e01e      	b.n	80026c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	69db      	ldr	r3, [r3, #28]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d107      	bne.n	80026a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e019      	b.n	80026c8 <HAL_RCC_OscConfig+0x4f8>
 8002694:	40021000 	.word	0x40021000
 8002698:	40007000 	.word	0x40007000
 800269c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026a0:	4b0b      	ldr	r3, [pc, #44]	@ (80026d0 <HAL_RCC_OscConfig+0x500>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d106      	bne.n	80026c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026be:	429a      	cmp	r2, r3
 80026c0:	d001      	beq.n	80026c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3718      	adds	r7, #24
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40021000 	.word	0x40021000

080026d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e0d0      	b.n	800288a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026e8:	4b6a      	ldr	r3, [pc, #424]	@ (8002894 <HAL_RCC_ClockConfig+0x1c0>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d910      	bls.n	8002718 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f6:	4b67      	ldr	r3, [pc, #412]	@ (8002894 <HAL_RCC_ClockConfig+0x1c0>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f023 0207 	bic.w	r2, r3, #7
 80026fe:	4965      	ldr	r1, [pc, #404]	@ (8002894 <HAL_RCC_ClockConfig+0x1c0>)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	4313      	orrs	r3, r2
 8002704:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002706:	4b63      	ldr	r3, [pc, #396]	@ (8002894 <HAL_RCC_ClockConfig+0x1c0>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	429a      	cmp	r2, r3
 8002712:	d001      	beq.n	8002718 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e0b8      	b.n	800288a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d020      	beq.n	8002766 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002730:	4b59      	ldr	r3, [pc, #356]	@ (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	4a58      	ldr	r2, [pc, #352]	@ (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800273a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0308 	and.w	r3, r3, #8
 8002744:	2b00      	cmp	r3, #0
 8002746:	d005      	beq.n	8002754 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002748:	4b53      	ldr	r3, [pc, #332]	@ (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	4a52      	ldr	r2, [pc, #328]	@ (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 800274e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002752:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002754:	4b50      	ldr	r3, [pc, #320]	@ (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	494d      	ldr	r1, [pc, #308]	@ (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 8002762:	4313      	orrs	r3, r2
 8002764:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d040      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d107      	bne.n	800278a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277a:	4b47      	ldr	r3, [pc, #284]	@ (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d115      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e07f      	b.n	800288a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b02      	cmp	r3, #2
 8002790:	d107      	bne.n	80027a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002792:	4b41      	ldr	r3, [pc, #260]	@ (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d109      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e073      	b.n	800288a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e06b      	b.n	800288a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027b2:	4b39      	ldr	r3, [pc, #228]	@ (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f023 0203 	bic.w	r2, r3, #3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	4936      	ldr	r1, [pc, #216]	@ (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027c4:	f7ff fa56 	bl	8001c74 <HAL_GetTick>
 80027c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ca:	e00a      	b.n	80027e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027cc:	f7ff fa52 	bl	8001c74 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027da:	4293      	cmp	r3, r2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e053      	b.n	800288a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e2:	4b2d      	ldr	r3, [pc, #180]	@ (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f003 020c 	and.w	r2, r3, #12
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d1eb      	bne.n	80027cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027f4:	4b27      	ldr	r3, [pc, #156]	@ (8002894 <HAL_RCC_ClockConfig+0x1c0>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d210      	bcs.n	8002824 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002802:	4b24      	ldr	r3, [pc, #144]	@ (8002894 <HAL_RCC_ClockConfig+0x1c0>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f023 0207 	bic.w	r2, r3, #7
 800280a:	4922      	ldr	r1, [pc, #136]	@ (8002894 <HAL_RCC_ClockConfig+0x1c0>)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	4313      	orrs	r3, r2
 8002810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002812:	4b20      	ldr	r3, [pc, #128]	@ (8002894 <HAL_RCC_ClockConfig+0x1c0>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	429a      	cmp	r2, r3
 800281e:	d001      	beq.n	8002824 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e032      	b.n	800288a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b00      	cmp	r3, #0
 800282e:	d008      	beq.n	8002842 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002830:	4b19      	ldr	r3, [pc, #100]	@ (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	4916      	ldr	r1, [pc, #88]	@ (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 800283e:	4313      	orrs	r3, r2
 8002840:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	2b00      	cmp	r3, #0
 800284c:	d009      	beq.n	8002862 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800284e:	4b12      	ldr	r3, [pc, #72]	@ (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	490e      	ldr	r1, [pc, #56]	@ (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 800285e:	4313      	orrs	r3, r2
 8002860:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002862:	f000 f821 	bl	80028a8 <HAL_RCC_GetSysClockFreq>
 8002866:	4602      	mov	r2, r0
 8002868:	4b0b      	ldr	r3, [pc, #44]	@ (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	091b      	lsrs	r3, r3, #4
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	490a      	ldr	r1, [pc, #40]	@ (800289c <HAL_RCC_ClockConfig+0x1c8>)
 8002874:	5ccb      	ldrb	r3, [r1, r3]
 8002876:	fa22 f303 	lsr.w	r3, r2, r3
 800287a:	4a09      	ldr	r2, [pc, #36]	@ (80028a0 <HAL_RCC_ClockConfig+0x1cc>)
 800287c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800287e:	4b09      	ldr	r3, [pc, #36]	@ (80028a4 <HAL_RCC_ClockConfig+0x1d0>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff f9b4 	bl	8001bf0 <HAL_InitTick>

  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40022000 	.word	0x40022000
 8002898:	40021000 	.word	0x40021000
 800289c:	0800651c 	.word	0x0800651c
 80028a0:	20000008 	.word	0x20000008
 80028a4:	2000000c 	.word	0x2000000c

080028a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	60fb      	str	r3, [r7, #12]
 80028b2:	2300      	movs	r3, #0
 80028b4:	60bb      	str	r3, [r7, #8]
 80028b6:	2300      	movs	r3, #0
 80028b8:	617b      	str	r3, [r7, #20]
 80028ba:	2300      	movs	r3, #0
 80028bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028be:	2300      	movs	r3, #0
 80028c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028c2:	4b1e      	ldr	r3, [pc, #120]	@ (800293c <HAL_RCC_GetSysClockFreq+0x94>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f003 030c 	and.w	r3, r3, #12
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d002      	beq.n	80028d8 <HAL_RCC_GetSysClockFreq+0x30>
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d003      	beq.n	80028de <HAL_RCC_GetSysClockFreq+0x36>
 80028d6:	e027      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028d8:	4b19      	ldr	r3, [pc, #100]	@ (8002940 <HAL_RCC_GetSysClockFreq+0x98>)
 80028da:	613b      	str	r3, [r7, #16]
      break;
 80028dc:	e027      	b.n	800292e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	0c9b      	lsrs	r3, r3, #18
 80028e2:	f003 030f 	and.w	r3, r3, #15
 80028e6:	4a17      	ldr	r2, [pc, #92]	@ (8002944 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028e8:	5cd3      	ldrb	r3, [r2, r3]
 80028ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d010      	beq.n	8002918 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028f6:	4b11      	ldr	r3, [pc, #68]	@ (800293c <HAL_RCC_GetSysClockFreq+0x94>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	0c5b      	lsrs	r3, r3, #17
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	4a11      	ldr	r2, [pc, #68]	@ (8002948 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002902:	5cd3      	ldrb	r3, [r2, r3]
 8002904:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a0d      	ldr	r2, [pc, #52]	@ (8002940 <HAL_RCC_GetSysClockFreq+0x98>)
 800290a:	fb03 f202 	mul.w	r2, r3, r2
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	fbb2 f3f3 	udiv	r3, r2, r3
 8002914:	617b      	str	r3, [r7, #20]
 8002916:	e004      	b.n	8002922 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a0c      	ldr	r2, [pc, #48]	@ (800294c <HAL_RCC_GetSysClockFreq+0xa4>)
 800291c:	fb02 f303 	mul.w	r3, r2, r3
 8002920:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	613b      	str	r3, [r7, #16]
      break;
 8002926:	e002      	b.n	800292e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002928:	4b05      	ldr	r3, [pc, #20]	@ (8002940 <HAL_RCC_GetSysClockFreq+0x98>)
 800292a:	613b      	str	r3, [r7, #16]
      break;
 800292c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800292e:	693b      	ldr	r3, [r7, #16]
}
 8002930:	4618      	mov	r0, r3
 8002932:	371c      	adds	r7, #28
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	40021000 	.word	0x40021000
 8002940:	007a1200 	.word	0x007a1200
 8002944:	08006534 	.word	0x08006534
 8002948:	08006544 	.word	0x08006544
 800294c:	003d0900 	.word	0x003d0900

08002950 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002954:	4b02      	ldr	r3, [pc, #8]	@ (8002960 <HAL_RCC_GetHCLKFreq+0x10>)
 8002956:	681b      	ldr	r3, [r3, #0]
}
 8002958:	4618      	mov	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr
 8002960:	20000008 	.word	0x20000008

08002964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002968:	f7ff fff2 	bl	8002950 <HAL_RCC_GetHCLKFreq>
 800296c:	4602      	mov	r2, r0
 800296e:	4b05      	ldr	r3, [pc, #20]	@ (8002984 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	0a1b      	lsrs	r3, r3, #8
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	4903      	ldr	r1, [pc, #12]	@ (8002988 <HAL_RCC_GetPCLK1Freq+0x24>)
 800297a:	5ccb      	ldrb	r3, [r1, r3]
 800297c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002980:	4618      	mov	r0, r3
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40021000 	.word	0x40021000
 8002988:	0800652c 	.word	0x0800652c

0800298c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002990:	f7ff ffde 	bl	8002950 <HAL_RCC_GetHCLKFreq>
 8002994:	4602      	mov	r2, r0
 8002996:	4b05      	ldr	r3, [pc, #20]	@ (80029ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	0adb      	lsrs	r3, r3, #11
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	4903      	ldr	r1, [pc, #12]	@ (80029b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029a2:	5ccb      	ldrb	r3, [r1, r3]
 80029a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40021000 	.word	0x40021000
 80029b0:	0800652c 	.word	0x0800652c

080029b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029bc:	4b0a      	ldr	r3, [pc, #40]	@ (80029e8 <RCC_Delay+0x34>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a0a      	ldr	r2, [pc, #40]	@ (80029ec <RCC_Delay+0x38>)
 80029c2:	fba2 2303 	umull	r2, r3, r2, r3
 80029c6:	0a5b      	lsrs	r3, r3, #9
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	fb02 f303 	mul.w	r3, r2, r3
 80029ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029d0:	bf00      	nop
  }
  while (Delay --);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	1e5a      	subs	r2, r3, #1
 80029d6:	60fa      	str	r2, [r7, #12]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1f9      	bne.n	80029d0 <RCC_Delay+0x1c>
}
 80029dc:	bf00      	nop
 80029de:	bf00      	nop
 80029e0:	3714      	adds	r7, #20
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr
 80029e8:	20000008 	.word	0x20000008
 80029ec:	10624dd3 	.word	0x10624dd3

080029f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e076      	b.n	8002af0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d108      	bne.n	8002a1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a12:	d009      	beq.n	8002a28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	61da      	str	r2, [r3, #28]
 8002a1a:	e005      	b.n	8002a28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d106      	bne.n	8002a48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7fe feb2 	bl	80017ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002a70:	431a      	orrs	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	431a      	orrs	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aac:	ea42 0103 	orr.w	r1, r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	0c1a      	lsrs	r2, r3, #16
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f002 0204 	and.w	r2, r2, #4
 8002ace:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	69da      	ldr	r2, [r3, #28]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ade:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b088      	sub	sp, #32
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	603b      	str	r3, [r7, #0]
 8002b04:	4613      	mov	r3, r2
 8002b06:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b08:	f7ff f8b4 	bl	8001c74 <HAL_GetTick>
 8002b0c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002b0e:	88fb      	ldrh	r3, [r7, #6]
 8002b10:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d001      	beq.n	8002b22 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e12a      	b.n	8002d78 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d002      	beq.n	8002b2e <HAL_SPI_Transmit+0x36>
 8002b28:	88fb      	ldrh	r3, [r7, #6]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e122      	b.n	8002d78 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d101      	bne.n	8002b40 <HAL_SPI_Transmit+0x48>
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	e11b      	b.n	8002d78 <HAL_SPI_Transmit+0x280>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2203      	movs	r2, #3
 8002b4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	88fa      	ldrh	r2, [r7, #6]
 8002b60:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	88fa      	ldrh	r2, [r7, #6]
 8002b66:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b8e:	d10f      	bne.n	8002bb0 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b9e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002bae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bba:	2b40      	cmp	r3, #64	@ 0x40
 8002bbc:	d007      	beq.n	8002bce <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002bcc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bd6:	d152      	bne.n	8002c7e <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d002      	beq.n	8002be6 <HAL_SPI_Transmit+0xee>
 8002be0:	8b7b      	ldrh	r3, [r7, #26]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d145      	bne.n	8002c72 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bea:	881a      	ldrh	r2, [r3, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf6:	1c9a      	adds	r2, r3, #2
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	3b01      	subs	r3, #1
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c0a:	e032      	b.n	8002c72 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d112      	bne.n	8002c40 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1e:	881a      	ldrh	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2a:	1c9a      	adds	r2, r3, #2
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	3b01      	subs	r3, #1
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002c3e:	e018      	b.n	8002c72 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c40:	f7ff f818 	bl	8001c74 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d803      	bhi.n	8002c58 <HAL_SPI_Transmit+0x160>
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c56:	d102      	bne.n	8002c5e <HAL_SPI_Transmit+0x166>
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d109      	bne.n	8002c72 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e082      	b.n	8002d78 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1c7      	bne.n	8002c0c <HAL_SPI_Transmit+0x114>
 8002c7c:	e053      	b.n	8002d26 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d002      	beq.n	8002c8c <HAL_SPI_Transmit+0x194>
 8002c86:	8b7b      	ldrh	r3, [r7, #26]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d147      	bne.n	8002d1c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	330c      	adds	r3, #12
 8002c96:	7812      	ldrb	r2, [r2, #0]
 8002c98:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9e:	1c5a      	adds	r2, r3, #1
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	3b01      	subs	r3, #1
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002cb2:	e033      	b.n	8002d1c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d113      	bne.n	8002cea <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	330c      	adds	r3, #12
 8002ccc:	7812      	ldrb	r2, [r2, #0]
 8002cce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd4:	1c5a      	adds	r2, r3, #1
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002ce8:	e018      	b.n	8002d1c <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cea:	f7fe ffc3 	bl	8001c74 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d803      	bhi.n	8002d02 <HAL_SPI_Transmit+0x20a>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d00:	d102      	bne.n	8002d08 <HAL_SPI_Transmit+0x210>
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d109      	bne.n	8002d1c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e02d      	b.n	8002d78 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1c6      	bne.n	8002cb4 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d26:	69fa      	ldr	r2, [r7, #28]
 8002d28:	6839      	ldr	r1, [r7, #0]
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f000 fbd2 	bl	80034d4 <SPI_EndRxTxTransaction>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d002      	beq.n	8002d3c <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2220      	movs	r2, #32
 8002d3a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d10a      	bne.n	8002d5a <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d44:	2300      	movs	r3, #0
 8002d46:	617b      	str	r3, [r7, #20]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	617b      	str	r3, [r7, #20]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	617b      	str	r3, [r7, #20]
 8002d58:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002d76:	2300      	movs	r3, #0
  }
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3720      	adds	r7, #32
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b088      	sub	sp, #32
 8002d84:	af02      	add	r7, sp, #8
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	603b      	str	r3, [r7, #0]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d001      	beq.n	8002da0 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	e104      	b.n	8002faa <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002da8:	d112      	bne.n	8002dd0 <HAL_SPI_Receive+0x50>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10e      	bne.n	8002dd0 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2204      	movs	r2, #4
 8002db6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002dba:	88fa      	ldrh	r2, [r7, #6]
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	68b9      	ldr	r1, [r7, #8]
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f000 f8f3 	bl	8002fb2 <HAL_SPI_TransmitReceive>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	e0ec      	b.n	8002faa <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002dd0:	f7fe ff50 	bl	8001c74 <HAL_GetTick>
 8002dd4:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d002      	beq.n	8002de2 <HAL_SPI_Receive+0x62>
 8002ddc:	88fb      	ldrh	r3, [r7, #6]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e0e1      	b.n	8002faa <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <HAL_SPI_Receive+0x74>
 8002df0:	2302      	movs	r3, #2
 8002df2:	e0da      	b.n	8002faa <HAL_SPI_Receive+0x22a>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2204      	movs	r2, #4
 8002e00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	68ba      	ldr	r2, [r7, #8]
 8002e0e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	88fa      	ldrh	r2, [r7, #6]
 8002e14:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	88fa      	ldrh	r2, [r7, #6]
 8002e1a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e42:	d10f      	bne.n	8002e64 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e52:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002e62:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e6e:	2b40      	cmp	r3, #64	@ 0x40
 8002e70:	d007      	beq.n	8002e82 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e80:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d170      	bne.n	8002f6c <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002e8a:	e035      	b.n	8002ef8 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d115      	bne.n	8002ec6 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f103 020c 	add.w	r2, r3, #12
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ea6:	7812      	ldrb	r2, [r2, #0]
 8002ea8:	b2d2      	uxtb	r2, r2
 8002eaa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eb0:	1c5a      	adds	r2, r3, #1
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002ec4:	e018      	b.n	8002ef8 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ec6:	f7fe fed5 	bl	8001c74 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d803      	bhi.n	8002ede <HAL_SPI_Receive+0x15e>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002edc:	d102      	bne.n	8002ee4 <HAL_SPI_Receive+0x164>
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d109      	bne.n	8002ef8 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e058      	b.n	8002faa <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1c4      	bne.n	8002e8c <HAL_SPI_Receive+0x10c>
 8002f02:	e038      	b.n	8002f76 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d113      	bne.n	8002f3a <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68da      	ldr	r2, [r3, #12]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f1c:	b292      	uxth	r2, r2
 8002f1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f24:	1c9a      	adds	r2, r3, #2
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	3b01      	subs	r3, #1
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f38:	e018      	b.n	8002f6c <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f3a:	f7fe fe9b 	bl	8001c74 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d803      	bhi.n	8002f52 <HAL_SPI_Receive+0x1d2>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f50:	d102      	bne.n	8002f58 <HAL_SPI_Receive+0x1d8>
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d109      	bne.n	8002f6c <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e01e      	b.n	8002faa <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1c6      	bne.n	8002f04 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	6839      	ldr	r1, [r7, #0]
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f000 fa58 	bl	8003430 <SPI_EndRxTransaction>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d002      	beq.n	8002f8c <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e000      	b.n	8002faa <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
  }
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b08a      	sub	sp, #40	@ 0x28
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	60f8      	str	r0, [r7, #12]
 8002fba:	60b9      	str	r1, [r7, #8]
 8002fbc:	607a      	str	r2, [r7, #4]
 8002fbe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fc4:	f7fe fe56 	bl	8001c74 <HAL_GetTick>
 8002fc8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002fd0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002fd8:	887b      	ldrh	r3, [r7, #2]
 8002fda:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002fdc:	7ffb      	ldrb	r3, [r7, #31]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d00c      	beq.n	8002ffc <HAL_SPI_TransmitReceive+0x4a>
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002fe8:	d106      	bne.n	8002ff8 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d102      	bne.n	8002ff8 <HAL_SPI_TransmitReceive+0x46>
 8002ff2:	7ffb      	ldrb	r3, [r7, #31]
 8002ff4:	2b04      	cmp	r3, #4
 8002ff6:	d001      	beq.n	8002ffc <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	e17f      	b.n	80032fc <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d005      	beq.n	800300e <HAL_SPI_TransmitReceive+0x5c>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d002      	beq.n	800300e <HAL_SPI_TransmitReceive+0x5c>
 8003008:	887b      	ldrh	r3, [r7, #2]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e174      	b.n	80032fc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003018:	2b01      	cmp	r3, #1
 800301a:	d101      	bne.n	8003020 <HAL_SPI_TransmitReceive+0x6e>
 800301c:	2302      	movs	r3, #2
 800301e:	e16d      	b.n	80032fc <HAL_SPI_TransmitReceive+0x34a>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b04      	cmp	r3, #4
 8003032:	d003      	beq.n	800303c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2205      	movs	r2, #5
 8003038:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	887a      	ldrh	r2, [r7, #2]
 800304c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	887a      	ldrh	r2, [r7, #2]
 8003052:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	887a      	ldrh	r2, [r7, #2]
 800305e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	887a      	ldrh	r2, [r7, #2]
 8003064:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800307c:	2b40      	cmp	r3, #64	@ 0x40
 800307e:	d007      	beq.n	8003090 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800308e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003098:	d17e      	bne.n	8003198 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d002      	beq.n	80030a8 <HAL_SPI_TransmitReceive+0xf6>
 80030a2:	8afb      	ldrh	r3, [r7, #22]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d16c      	bne.n	8003182 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ac:	881a      	ldrh	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b8:	1c9a      	adds	r2, r3, #2
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	3b01      	subs	r3, #1
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030cc:	e059      	b.n	8003182 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d11b      	bne.n	8003114 <HAL_SPI_TransmitReceive+0x162>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d016      	beq.n	8003114 <HAL_SPI_TransmitReceive+0x162>
 80030e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d113      	bne.n	8003114 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f0:	881a      	ldrh	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fc:	1c9a      	adds	r2, r3, #2
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003106:	b29b      	uxth	r3, r3
 8003108:	3b01      	subs	r3, #1
 800310a:	b29a      	uxth	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003110:	2300      	movs	r3, #0
 8003112:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b01      	cmp	r3, #1
 8003120:	d119      	bne.n	8003156 <HAL_SPI_TransmitReceive+0x1a4>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003126:	b29b      	uxth	r3, r3
 8003128:	2b00      	cmp	r3, #0
 800312a:	d014      	beq.n	8003156 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68da      	ldr	r2, [r3, #12]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003136:	b292      	uxth	r2, r2
 8003138:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800313e:	1c9a      	adds	r2, r3, #2
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003148:	b29b      	uxth	r3, r3
 800314a:	3b01      	subs	r3, #1
 800314c:	b29a      	uxth	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003152:	2301      	movs	r3, #1
 8003154:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003156:	f7fe fd8d 	bl	8001c74 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	6a3b      	ldr	r3, [r7, #32]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003162:	429a      	cmp	r2, r3
 8003164:	d80d      	bhi.n	8003182 <HAL_SPI_TransmitReceive+0x1d0>
 8003166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316c:	d009      	beq.n	8003182 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e0bc      	b.n	80032fc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003186:	b29b      	uxth	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1a0      	bne.n	80030ce <HAL_SPI_TransmitReceive+0x11c>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003190:	b29b      	uxth	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d19b      	bne.n	80030ce <HAL_SPI_TransmitReceive+0x11c>
 8003196:	e082      	b.n	800329e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d002      	beq.n	80031a6 <HAL_SPI_TransmitReceive+0x1f4>
 80031a0:	8afb      	ldrh	r3, [r7, #22]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d171      	bne.n	800328a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	330c      	adds	r3, #12
 80031b0:	7812      	ldrb	r2, [r2, #0]
 80031b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b8:	1c5a      	adds	r2, r3, #1
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	3b01      	subs	r3, #1
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031cc:	e05d      	b.n	800328a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d11c      	bne.n	8003216 <HAL_SPI_TransmitReceive+0x264>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d017      	beq.n	8003216 <HAL_SPI_TransmitReceive+0x264>
 80031e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d114      	bne.n	8003216 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	330c      	adds	r3, #12
 80031f6:	7812      	ldrb	r2, [r2, #0]
 80031f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fe:	1c5a      	adds	r2, r3, #1
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003208:	b29b      	uxth	r3, r3
 800320a:	3b01      	subs	r3, #1
 800320c:	b29a      	uxth	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003212:	2300      	movs	r3, #0
 8003214:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b01      	cmp	r3, #1
 8003222:	d119      	bne.n	8003258 <HAL_SPI_TransmitReceive+0x2a6>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003228:	b29b      	uxth	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d014      	beq.n	8003258 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68da      	ldr	r2, [r3, #12]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003238:	b2d2      	uxtb	r2, r2
 800323a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003240:	1c5a      	adds	r2, r3, #1
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800324a:	b29b      	uxth	r3, r3
 800324c:	3b01      	subs	r3, #1
 800324e:	b29a      	uxth	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003254:	2301      	movs	r3, #1
 8003256:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003258:	f7fe fd0c 	bl	8001c74 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	6a3b      	ldr	r3, [r7, #32]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003264:	429a      	cmp	r2, r3
 8003266:	d803      	bhi.n	8003270 <HAL_SPI_TransmitReceive+0x2be>
 8003268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800326a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800326e:	d102      	bne.n	8003276 <HAL_SPI_TransmitReceive+0x2c4>
 8003270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003272:	2b00      	cmp	r3, #0
 8003274:	d109      	bne.n	800328a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e038      	b.n	80032fc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800328e:	b29b      	uxth	r3, r3
 8003290:	2b00      	cmp	r3, #0
 8003292:	d19c      	bne.n	80031ce <HAL_SPI_TransmitReceive+0x21c>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003298:	b29b      	uxth	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d197      	bne.n	80031ce <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800329e:	6a3a      	ldr	r2, [r7, #32]
 80032a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f000 f916 	bl	80034d4 <SPI_EndRxTxTransaction>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d008      	beq.n	80032c0 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2220      	movs	r2, #32
 80032b2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e01d      	b.n	80032fc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d10a      	bne.n	80032de <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032c8:	2300      	movs	r3, #0
 80032ca:	613b      	str	r3, [r7, #16]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	613b      	str	r3, [r7, #16]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	613b      	str	r3, [r7, #16]
 80032dc:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e000      	b.n	80032fc <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80032fa:	2300      	movs	r3, #0
  }
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3728      	adds	r7, #40	@ 0x28
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003312:	b2db      	uxtb	r3, r3
}
 8003314:	4618      	mov	r0, r3
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	bc80      	pop	{r7}
 800331c:	4770      	bx	lr
	...

08003320 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	603b      	str	r3, [r7, #0]
 800332c:	4613      	mov	r3, r2
 800332e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003330:	f7fe fca0 	bl	8001c74 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003338:	1a9b      	subs	r3, r3, r2
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	4413      	add	r3, r2
 800333e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003340:	f7fe fc98 	bl	8001c74 <HAL_GetTick>
 8003344:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003346:	4b39      	ldr	r3, [pc, #228]	@ (800342c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	015b      	lsls	r3, r3, #5
 800334c:	0d1b      	lsrs	r3, r3, #20
 800334e:	69fa      	ldr	r2, [r7, #28]
 8003350:	fb02 f303 	mul.w	r3, r2, r3
 8003354:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003356:	e054      	b.n	8003402 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335e:	d050      	beq.n	8003402 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003360:	f7fe fc88 	bl	8001c74 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	69fa      	ldr	r2, [r7, #28]
 800336c:	429a      	cmp	r2, r3
 800336e:	d902      	bls.n	8003376 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d13d      	bne.n	80033f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003384:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800338e:	d111      	bne.n	80033b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003398:	d004      	beq.n	80033a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033a2:	d107      	bne.n	80033b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033bc:	d10f      	bne.n	80033de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e017      	b.n	8003422 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80033f8:	2300      	movs	r3, #0
 80033fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	3b01      	subs	r3, #1
 8003400:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	4013      	ands	r3, r2
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	429a      	cmp	r2, r3
 8003410:	bf0c      	ite	eq
 8003412:	2301      	moveq	r3, #1
 8003414:	2300      	movne	r3, #0
 8003416:	b2db      	uxtb	r3, r3
 8003418:	461a      	mov	r2, r3
 800341a:	79fb      	ldrb	r3, [r7, #7]
 800341c:	429a      	cmp	r2, r3
 800341e:	d19b      	bne.n	8003358 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3720      	adds	r7, #32
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	20000008 	.word	0x20000008

08003430 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af02      	add	r7, sp, #8
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003444:	d111      	bne.n	800346a <SPI_EndRxTransaction+0x3a>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800344e:	d004      	beq.n	800345a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003458:	d107      	bne.n	800346a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003468:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003472:	d117      	bne.n	80034a4 <SPI_EndRxTransaction+0x74>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800347c:	d112      	bne.n	80034a4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	2200      	movs	r2, #0
 8003486:	2101      	movs	r1, #1
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f7ff ff49 	bl	8003320 <SPI_WaitFlagStateUntilTimeout>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d01a      	beq.n	80034ca <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003498:	f043 0220 	orr.w	r2, r3, #32
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e013      	b.n	80034cc <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	2200      	movs	r2, #0
 80034ac:	2180      	movs	r1, #128	@ 0x80
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f7ff ff36 	bl	8003320 <SPI_WaitFlagStateUntilTimeout>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d007      	beq.n	80034ca <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034be:	f043 0220 	orr.w	r2, r3, #32
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e000      	b.n	80034cc <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af02      	add	r7, sp, #8
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	2201      	movs	r2, #1
 80034e8:	2102      	movs	r1, #2
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f7ff ff18 	bl	8003320 <SPI_WaitFlagStateUntilTimeout>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d007      	beq.n	8003506 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034fa:	f043 0220 	orr.w	r2, r3, #32
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e013      	b.n	800352e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	2200      	movs	r2, #0
 800350e:	2180      	movs	r1, #128	@ 0x80
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f7ff ff05 	bl	8003320 <SPI_WaitFlagStateUntilTimeout>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d007      	beq.n	800352c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003520:	f043 0220 	orr.w	r2, r3, #32
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e000      	b.n	800352e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b082      	sub	sp, #8
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e042      	b.n	80035ce <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	d106      	bne.n	8003562 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f7fe fabf 	bl	8001ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2224      	movs	r2, #36	@ 0x24
 8003566:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68da      	ldr	r2, [r3, #12]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003578:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f8be 	bl	80036fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	691a      	ldr	r2, [r3, #16]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800358e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	695a      	ldr	r2, [r3, #20]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800359e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68da      	ldr	r2, [r3, #12]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035ae:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b085      	sub	sp, #20
 80035da:	af00      	add	r7, sp, #0
 80035dc:	60f8      	str	r0, [r7, #12]
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	4613      	mov	r3, r2
 80035e2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b20      	cmp	r3, #32
 80035ee:	d121      	bne.n	8003634 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d002      	beq.n	80035fc <HAL_UART_Transmit_IT+0x26>
 80035f6:	88fb      	ldrh	r3, [r7, #6]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d101      	bne.n	8003600 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e01a      	b.n	8003636 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	68ba      	ldr	r2, [r7, #8]
 8003604:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	88fa      	ldrh	r2, [r7, #6]
 800360a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	88fa      	ldrh	r2, [r7, #6]
 8003610:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2221      	movs	r2, #33	@ 0x21
 800361c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68da      	ldr	r2, [r3, #12]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800362e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003630:	2300      	movs	r3, #0
 8003632:	e000      	b.n	8003636 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003634:	2302      	movs	r3, #2
  }
}
 8003636:	4618      	mov	r0, r3
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	bc80      	pop	{r7}
 800363e:	4770      	bx	lr

08003640 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	4613      	mov	r3, r2
 800364c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b20      	cmp	r3, #32
 8003658:	d112      	bne.n	8003680 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d002      	beq.n	8003666 <HAL_UART_Receive_IT+0x26>
 8003660:	88fb      	ldrh	r3, [r7, #6]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e00b      	b.n	8003682 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003670:	88fb      	ldrh	r3, [r7, #6]
 8003672:	461a      	mov	r2, r3
 8003674:	68b9      	ldr	r1, [r7, #8]
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 f807 	bl	800368a <UART_Start_Receive_IT>
 800367c:	4603      	mov	r3, r0
 800367e:	e000      	b.n	8003682 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003680:	2302      	movs	r3, #2
  }
}
 8003682:	4618      	mov	r0, r3
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800368a:	b480      	push	{r7}
 800368c:	b085      	sub	sp, #20
 800368e:	af00      	add	r7, sp, #0
 8003690:	60f8      	str	r0, [r7, #12]
 8003692:	60b9      	str	r1, [r7, #8]
 8003694:	4613      	mov	r3, r2
 8003696:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	88fa      	ldrh	r2, [r7, #6]
 80036a2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	88fa      	ldrh	r2, [r7, #6]
 80036a8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2222      	movs	r2, #34	@ 0x22
 80036b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d007      	beq.n	80036d0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036ce:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	695a      	ldr	r2, [r3, #20]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0201 	orr.w	r2, r2, #1
 80036de:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68da      	ldr	r2, [r3, #12]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0220 	orr.w	r2, r2, #32
 80036ee:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bc80      	pop	{r7}
 80036fa:	4770      	bx	lr

080036fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68da      	ldr	r2, [r3, #12]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	430a      	orrs	r2, r1
 8003718:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689a      	ldr	r2, [r3, #8]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	431a      	orrs	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	4313      	orrs	r3, r2
 800372a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003736:	f023 030c 	bic.w	r3, r3, #12
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	6812      	ldr	r2, [r2, #0]
 800373e:	68b9      	ldr	r1, [r7, #8]
 8003740:	430b      	orrs	r3, r1
 8003742:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	699a      	ldr	r2, [r3, #24]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	430a      	orrs	r2, r1
 8003758:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a2c      	ldr	r2, [pc, #176]	@ (8003810 <UART_SetConfig+0x114>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d103      	bne.n	800376c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003764:	f7ff f912 	bl	800298c <HAL_RCC_GetPCLK2Freq>
 8003768:	60f8      	str	r0, [r7, #12]
 800376a:	e002      	b.n	8003772 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800376c:	f7ff f8fa 	bl	8002964 <HAL_RCC_GetPCLK1Freq>
 8003770:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	4613      	mov	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4413      	add	r3, r2
 800377a:	009a      	lsls	r2, r3, #2
 800377c:	441a      	add	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	fbb2 f3f3 	udiv	r3, r2, r3
 8003788:	4a22      	ldr	r2, [pc, #136]	@ (8003814 <UART_SetConfig+0x118>)
 800378a:	fba2 2303 	umull	r2, r3, r2, r3
 800378e:	095b      	lsrs	r3, r3, #5
 8003790:	0119      	lsls	r1, r3, #4
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	4613      	mov	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	4413      	add	r3, r2
 800379a:	009a      	lsls	r2, r3, #2
 800379c:	441a      	add	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80037a8:	4b1a      	ldr	r3, [pc, #104]	@ (8003814 <UART_SetConfig+0x118>)
 80037aa:	fba3 0302 	umull	r0, r3, r3, r2
 80037ae:	095b      	lsrs	r3, r3, #5
 80037b0:	2064      	movs	r0, #100	@ 0x64
 80037b2:	fb00 f303 	mul.w	r3, r0, r3
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	011b      	lsls	r3, r3, #4
 80037ba:	3332      	adds	r3, #50	@ 0x32
 80037bc:	4a15      	ldr	r2, [pc, #84]	@ (8003814 <UART_SetConfig+0x118>)
 80037be:	fba2 2303 	umull	r2, r3, r2, r3
 80037c2:	095b      	lsrs	r3, r3, #5
 80037c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037c8:	4419      	add	r1, r3
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	4613      	mov	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	009a      	lsls	r2, r3, #2
 80037d4:	441a      	add	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80037e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003814 <UART_SetConfig+0x118>)
 80037e2:	fba3 0302 	umull	r0, r3, r3, r2
 80037e6:	095b      	lsrs	r3, r3, #5
 80037e8:	2064      	movs	r0, #100	@ 0x64
 80037ea:	fb00 f303 	mul.w	r3, r0, r3
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	011b      	lsls	r3, r3, #4
 80037f2:	3332      	adds	r3, #50	@ 0x32
 80037f4:	4a07      	ldr	r2, [pc, #28]	@ (8003814 <UART_SetConfig+0x118>)
 80037f6:	fba2 2303 	umull	r2, r3, r2, r3
 80037fa:	095b      	lsrs	r3, r3, #5
 80037fc:	f003 020f 	and.w	r2, r3, #15
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	440a      	add	r2, r1
 8003806:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003808:	bf00      	nop
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	40013800 	.word	0x40013800
 8003814:	51eb851f 	.word	0x51eb851f

08003818 <__cvt>:
 8003818:	2b00      	cmp	r3, #0
 800381a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800381e:	461d      	mov	r5, r3
 8003820:	bfbb      	ittet	lt
 8003822:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003826:	461d      	movlt	r5, r3
 8003828:	2300      	movge	r3, #0
 800382a:	232d      	movlt	r3, #45	@ 0x2d
 800382c:	b088      	sub	sp, #32
 800382e:	4614      	mov	r4, r2
 8003830:	bfb8      	it	lt
 8003832:	4614      	movlt	r4, r2
 8003834:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003836:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003838:	7013      	strb	r3, [r2, #0]
 800383a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800383c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003840:	f023 0820 	bic.w	r8, r3, #32
 8003844:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003848:	d005      	beq.n	8003856 <__cvt+0x3e>
 800384a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800384e:	d100      	bne.n	8003852 <__cvt+0x3a>
 8003850:	3601      	adds	r6, #1
 8003852:	2302      	movs	r3, #2
 8003854:	e000      	b.n	8003858 <__cvt+0x40>
 8003856:	2303      	movs	r3, #3
 8003858:	aa07      	add	r2, sp, #28
 800385a:	9204      	str	r2, [sp, #16]
 800385c:	aa06      	add	r2, sp, #24
 800385e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003862:	e9cd 3600 	strd	r3, r6, [sp]
 8003866:	4622      	mov	r2, r4
 8003868:	462b      	mov	r3, r5
 800386a:	f000 fe81 	bl	8004570 <_dtoa_r>
 800386e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003872:	4607      	mov	r7, r0
 8003874:	d119      	bne.n	80038aa <__cvt+0x92>
 8003876:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003878:	07db      	lsls	r3, r3, #31
 800387a:	d50e      	bpl.n	800389a <__cvt+0x82>
 800387c:	eb00 0906 	add.w	r9, r0, r6
 8003880:	2200      	movs	r2, #0
 8003882:	2300      	movs	r3, #0
 8003884:	4620      	mov	r0, r4
 8003886:	4629      	mov	r1, r5
 8003888:	f7fd f88e 	bl	80009a8 <__aeabi_dcmpeq>
 800388c:	b108      	cbz	r0, 8003892 <__cvt+0x7a>
 800388e:	f8cd 901c 	str.w	r9, [sp, #28]
 8003892:	2230      	movs	r2, #48	@ 0x30
 8003894:	9b07      	ldr	r3, [sp, #28]
 8003896:	454b      	cmp	r3, r9
 8003898:	d31e      	bcc.n	80038d8 <__cvt+0xc0>
 800389a:	4638      	mov	r0, r7
 800389c:	9b07      	ldr	r3, [sp, #28]
 800389e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80038a0:	1bdb      	subs	r3, r3, r7
 80038a2:	6013      	str	r3, [r2, #0]
 80038a4:	b008      	add	sp, #32
 80038a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038aa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80038ae:	eb00 0906 	add.w	r9, r0, r6
 80038b2:	d1e5      	bne.n	8003880 <__cvt+0x68>
 80038b4:	7803      	ldrb	r3, [r0, #0]
 80038b6:	2b30      	cmp	r3, #48	@ 0x30
 80038b8:	d10a      	bne.n	80038d0 <__cvt+0xb8>
 80038ba:	2200      	movs	r2, #0
 80038bc:	2300      	movs	r3, #0
 80038be:	4620      	mov	r0, r4
 80038c0:	4629      	mov	r1, r5
 80038c2:	f7fd f871 	bl	80009a8 <__aeabi_dcmpeq>
 80038c6:	b918      	cbnz	r0, 80038d0 <__cvt+0xb8>
 80038c8:	f1c6 0601 	rsb	r6, r6, #1
 80038cc:	f8ca 6000 	str.w	r6, [sl]
 80038d0:	f8da 3000 	ldr.w	r3, [sl]
 80038d4:	4499      	add	r9, r3
 80038d6:	e7d3      	b.n	8003880 <__cvt+0x68>
 80038d8:	1c59      	adds	r1, r3, #1
 80038da:	9107      	str	r1, [sp, #28]
 80038dc:	701a      	strb	r2, [r3, #0]
 80038de:	e7d9      	b.n	8003894 <__cvt+0x7c>

080038e0 <__exponent>:
 80038e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038e2:	2900      	cmp	r1, #0
 80038e4:	bfb6      	itet	lt
 80038e6:	232d      	movlt	r3, #45	@ 0x2d
 80038e8:	232b      	movge	r3, #43	@ 0x2b
 80038ea:	4249      	neglt	r1, r1
 80038ec:	2909      	cmp	r1, #9
 80038ee:	7002      	strb	r2, [r0, #0]
 80038f0:	7043      	strb	r3, [r0, #1]
 80038f2:	dd29      	ble.n	8003948 <__exponent+0x68>
 80038f4:	f10d 0307 	add.w	r3, sp, #7
 80038f8:	461d      	mov	r5, r3
 80038fa:	270a      	movs	r7, #10
 80038fc:	fbb1 f6f7 	udiv	r6, r1, r7
 8003900:	461a      	mov	r2, r3
 8003902:	fb07 1416 	mls	r4, r7, r6, r1
 8003906:	3430      	adds	r4, #48	@ 0x30
 8003908:	f802 4c01 	strb.w	r4, [r2, #-1]
 800390c:	460c      	mov	r4, r1
 800390e:	2c63      	cmp	r4, #99	@ 0x63
 8003910:	4631      	mov	r1, r6
 8003912:	f103 33ff 	add.w	r3, r3, #4294967295
 8003916:	dcf1      	bgt.n	80038fc <__exponent+0x1c>
 8003918:	3130      	adds	r1, #48	@ 0x30
 800391a:	1e94      	subs	r4, r2, #2
 800391c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003920:	4623      	mov	r3, r4
 8003922:	1c41      	adds	r1, r0, #1
 8003924:	42ab      	cmp	r3, r5
 8003926:	d30a      	bcc.n	800393e <__exponent+0x5e>
 8003928:	f10d 0309 	add.w	r3, sp, #9
 800392c:	1a9b      	subs	r3, r3, r2
 800392e:	42ac      	cmp	r4, r5
 8003930:	bf88      	it	hi
 8003932:	2300      	movhi	r3, #0
 8003934:	3302      	adds	r3, #2
 8003936:	4403      	add	r3, r0
 8003938:	1a18      	subs	r0, r3, r0
 800393a:	b003      	add	sp, #12
 800393c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800393e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003942:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003946:	e7ed      	b.n	8003924 <__exponent+0x44>
 8003948:	2330      	movs	r3, #48	@ 0x30
 800394a:	3130      	adds	r1, #48	@ 0x30
 800394c:	7083      	strb	r3, [r0, #2]
 800394e:	70c1      	strb	r1, [r0, #3]
 8003950:	1d03      	adds	r3, r0, #4
 8003952:	e7f1      	b.n	8003938 <__exponent+0x58>

08003954 <_printf_float>:
 8003954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003958:	b091      	sub	sp, #68	@ 0x44
 800395a:	460c      	mov	r4, r1
 800395c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003960:	4616      	mov	r6, r2
 8003962:	461f      	mov	r7, r3
 8003964:	4605      	mov	r5, r0
 8003966:	f000 fcf5 	bl	8004354 <_localeconv_r>
 800396a:	6803      	ldr	r3, [r0, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	9308      	str	r3, [sp, #32]
 8003970:	f7fc fbee 	bl	8000150 <strlen>
 8003974:	2300      	movs	r3, #0
 8003976:	930e      	str	r3, [sp, #56]	@ 0x38
 8003978:	f8d8 3000 	ldr.w	r3, [r8]
 800397c:	9009      	str	r0, [sp, #36]	@ 0x24
 800397e:	3307      	adds	r3, #7
 8003980:	f023 0307 	bic.w	r3, r3, #7
 8003984:	f103 0208 	add.w	r2, r3, #8
 8003988:	f894 a018 	ldrb.w	sl, [r4, #24]
 800398c:	f8d4 b000 	ldr.w	fp, [r4]
 8003990:	f8c8 2000 	str.w	r2, [r8]
 8003994:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003998:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800399c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800399e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80039a2:	f04f 32ff 	mov.w	r2, #4294967295
 80039a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80039aa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80039ae:	4b9c      	ldr	r3, [pc, #624]	@ (8003c20 <_printf_float+0x2cc>)
 80039b0:	f7fd f82c 	bl	8000a0c <__aeabi_dcmpun>
 80039b4:	bb70      	cbnz	r0, 8003a14 <_printf_float+0xc0>
 80039b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80039ba:	f04f 32ff 	mov.w	r2, #4294967295
 80039be:	4b98      	ldr	r3, [pc, #608]	@ (8003c20 <_printf_float+0x2cc>)
 80039c0:	f7fd f806 	bl	80009d0 <__aeabi_dcmple>
 80039c4:	bb30      	cbnz	r0, 8003a14 <_printf_float+0xc0>
 80039c6:	2200      	movs	r2, #0
 80039c8:	2300      	movs	r3, #0
 80039ca:	4640      	mov	r0, r8
 80039cc:	4649      	mov	r1, r9
 80039ce:	f7fc fff5 	bl	80009bc <__aeabi_dcmplt>
 80039d2:	b110      	cbz	r0, 80039da <_printf_float+0x86>
 80039d4:	232d      	movs	r3, #45	@ 0x2d
 80039d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80039da:	4a92      	ldr	r2, [pc, #584]	@ (8003c24 <_printf_float+0x2d0>)
 80039dc:	4b92      	ldr	r3, [pc, #584]	@ (8003c28 <_printf_float+0x2d4>)
 80039de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80039e2:	bf8c      	ite	hi
 80039e4:	4690      	movhi	r8, r2
 80039e6:	4698      	movls	r8, r3
 80039e8:	2303      	movs	r3, #3
 80039ea:	f04f 0900 	mov.w	r9, #0
 80039ee:	6123      	str	r3, [r4, #16]
 80039f0:	f02b 0304 	bic.w	r3, fp, #4
 80039f4:	6023      	str	r3, [r4, #0]
 80039f6:	4633      	mov	r3, r6
 80039f8:	4621      	mov	r1, r4
 80039fa:	4628      	mov	r0, r5
 80039fc:	9700      	str	r7, [sp, #0]
 80039fe:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003a00:	f000 f9d4 	bl	8003dac <_printf_common>
 8003a04:	3001      	adds	r0, #1
 8003a06:	f040 8090 	bne.w	8003b2a <_printf_float+0x1d6>
 8003a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a0e:	b011      	add	sp, #68	@ 0x44
 8003a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a14:	4642      	mov	r2, r8
 8003a16:	464b      	mov	r3, r9
 8003a18:	4640      	mov	r0, r8
 8003a1a:	4649      	mov	r1, r9
 8003a1c:	f7fc fff6 	bl	8000a0c <__aeabi_dcmpun>
 8003a20:	b148      	cbz	r0, 8003a36 <_printf_float+0xe2>
 8003a22:	464b      	mov	r3, r9
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	bfb8      	it	lt
 8003a28:	232d      	movlt	r3, #45	@ 0x2d
 8003a2a:	4a80      	ldr	r2, [pc, #512]	@ (8003c2c <_printf_float+0x2d8>)
 8003a2c:	bfb8      	it	lt
 8003a2e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003a32:	4b7f      	ldr	r3, [pc, #508]	@ (8003c30 <_printf_float+0x2dc>)
 8003a34:	e7d3      	b.n	80039de <_printf_float+0x8a>
 8003a36:	6863      	ldr	r3, [r4, #4]
 8003a38:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003a3c:	1c5a      	adds	r2, r3, #1
 8003a3e:	d13f      	bne.n	8003ac0 <_printf_float+0x16c>
 8003a40:	2306      	movs	r3, #6
 8003a42:	6063      	str	r3, [r4, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003a4a:	6023      	str	r3, [r4, #0]
 8003a4c:	9206      	str	r2, [sp, #24]
 8003a4e:	aa0e      	add	r2, sp, #56	@ 0x38
 8003a50:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003a54:	aa0d      	add	r2, sp, #52	@ 0x34
 8003a56:	9203      	str	r2, [sp, #12]
 8003a58:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003a5c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003a60:	6863      	ldr	r3, [r4, #4]
 8003a62:	4642      	mov	r2, r8
 8003a64:	9300      	str	r3, [sp, #0]
 8003a66:	4628      	mov	r0, r5
 8003a68:	464b      	mov	r3, r9
 8003a6a:	910a      	str	r1, [sp, #40]	@ 0x28
 8003a6c:	f7ff fed4 	bl	8003818 <__cvt>
 8003a70:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003a72:	4680      	mov	r8, r0
 8003a74:	2947      	cmp	r1, #71	@ 0x47
 8003a76:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003a78:	d128      	bne.n	8003acc <_printf_float+0x178>
 8003a7a:	1cc8      	adds	r0, r1, #3
 8003a7c:	db02      	blt.n	8003a84 <_printf_float+0x130>
 8003a7e:	6863      	ldr	r3, [r4, #4]
 8003a80:	4299      	cmp	r1, r3
 8003a82:	dd40      	ble.n	8003b06 <_printf_float+0x1b2>
 8003a84:	f1aa 0a02 	sub.w	sl, sl, #2
 8003a88:	fa5f fa8a 	uxtb.w	sl, sl
 8003a8c:	4652      	mov	r2, sl
 8003a8e:	3901      	subs	r1, #1
 8003a90:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003a94:	910d      	str	r1, [sp, #52]	@ 0x34
 8003a96:	f7ff ff23 	bl	80038e0 <__exponent>
 8003a9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003a9c:	4681      	mov	r9, r0
 8003a9e:	1813      	adds	r3, r2, r0
 8003aa0:	2a01      	cmp	r2, #1
 8003aa2:	6123      	str	r3, [r4, #16]
 8003aa4:	dc02      	bgt.n	8003aac <_printf_float+0x158>
 8003aa6:	6822      	ldr	r2, [r4, #0]
 8003aa8:	07d2      	lsls	r2, r2, #31
 8003aaa:	d501      	bpl.n	8003ab0 <_printf_float+0x15c>
 8003aac:	3301      	adds	r3, #1
 8003aae:	6123      	str	r3, [r4, #16]
 8003ab0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d09e      	beq.n	80039f6 <_printf_float+0xa2>
 8003ab8:	232d      	movs	r3, #45	@ 0x2d
 8003aba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003abe:	e79a      	b.n	80039f6 <_printf_float+0xa2>
 8003ac0:	2947      	cmp	r1, #71	@ 0x47
 8003ac2:	d1bf      	bne.n	8003a44 <_printf_float+0xf0>
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1bd      	bne.n	8003a44 <_printf_float+0xf0>
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e7ba      	b.n	8003a42 <_printf_float+0xee>
 8003acc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003ad0:	d9dc      	bls.n	8003a8c <_printf_float+0x138>
 8003ad2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003ad6:	d118      	bne.n	8003b0a <_printf_float+0x1b6>
 8003ad8:	2900      	cmp	r1, #0
 8003ada:	6863      	ldr	r3, [r4, #4]
 8003adc:	dd0b      	ble.n	8003af6 <_printf_float+0x1a2>
 8003ade:	6121      	str	r1, [r4, #16]
 8003ae0:	b913      	cbnz	r3, 8003ae8 <_printf_float+0x194>
 8003ae2:	6822      	ldr	r2, [r4, #0]
 8003ae4:	07d0      	lsls	r0, r2, #31
 8003ae6:	d502      	bpl.n	8003aee <_printf_float+0x19a>
 8003ae8:	3301      	adds	r3, #1
 8003aea:	440b      	add	r3, r1
 8003aec:	6123      	str	r3, [r4, #16]
 8003aee:	f04f 0900 	mov.w	r9, #0
 8003af2:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003af4:	e7dc      	b.n	8003ab0 <_printf_float+0x15c>
 8003af6:	b913      	cbnz	r3, 8003afe <_printf_float+0x1aa>
 8003af8:	6822      	ldr	r2, [r4, #0]
 8003afa:	07d2      	lsls	r2, r2, #31
 8003afc:	d501      	bpl.n	8003b02 <_printf_float+0x1ae>
 8003afe:	3302      	adds	r3, #2
 8003b00:	e7f4      	b.n	8003aec <_printf_float+0x198>
 8003b02:	2301      	movs	r3, #1
 8003b04:	e7f2      	b.n	8003aec <_printf_float+0x198>
 8003b06:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003b0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003b0c:	4299      	cmp	r1, r3
 8003b0e:	db05      	blt.n	8003b1c <_printf_float+0x1c8>
 8003b10:	6823      	ldr	r3, [r4, #0]
 8003b12:	6121      	str	r1, [r4, #16]
 8003b14:	07d8      	lsls	r0, r3, #31
 8003b16:	d5ea      	bpl.n	8003aee <_printf_float+0x19a>
 8003b18:	1c4b      	adds	r3, r1, #1
 8003b1a:	e7e7      	b.n	8003aec <_printf_float+0x198>
 8003b1c:	2900      	cmp	r1, #0
 8003b1e:	bfcc      	ite	gt
 8003b20:	2201      	movgt	r2, #1
 8003b22:	f1c1 0202 	rsble	r2, r1, #2
 8003b26:	4413      	add	r3, r2
 8003b28:	e7e0      	b.n	8003aec <_printf_float+0x198>
 8003b2a:	6823      	ldr	r3, [r4, #0]
 8003b2c:	055a      	lsls	r2, r3, #21
 8003b2e:	d407      	bmi.n	8003b40 <_printf_float+0x1ec>
 8003b30:	6923      	ldr	r3, [r4, #16]
 8003b32:	4642      	mov	r2, r8
 8003b34:	4631      	mov	r1, r6
 8003b36:	4628      	mov	r0, r5
 8003b38:	47b8      	blx	r7
 8003b3a:	3001      	adds	r0, #1
 8003b3c:	d12b      	bne.n	8003b96 <_printf_float+0x242>
 8003b3e:	e764      	b.n	8003a0a <_printf_float+0xb6>
 8003b40:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003b44:	f240 80dc 	bls.w	8003d00 <_printf_float+0x3ac>
 8003b48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	2300      	movs	r3, #0
 8003b50:	f7fc ff2a 	bl	80009a8 <__aeabi_dcmpeq>
 8003b54:	2800      	cmp	r0, #0
 8003b56:	d033      	beq.n	8003bc0 <_printf_float+0x26c>
 8003b58:	2301      	movs	r3, #1
 8003b5a:	4631      	mov	r1, r6
 8003b5c:	4628      	mov	r0, r5
 8003b5e:	4a35      	ldr	r2, [pc, #212]	@ (8003c34 <_printf_float+0x2e0>)
 8003b60:	47b8      	blx	r7
 8003b62:	3001      	adds	r0, #1
 8003b64:	f43f af51 	beq.w	8003a0a <_printf_float+0xb6>
 8003b68:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003b6c:	4543      	cmp	r3, r8
 8003b6e:	db02      	blt.n	8003b76 <_printf_float+0x222>
 8003b70:	6823      	ldr	r3, [r4, #0]
 8003b72:	07d8      	lsls	r0, r3, #31
 8003b74:	d50f      	bpl.n	8003b96 <_printf_float+0x242>
 8003b76:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003b7a:	4631      	mov	r1, r6
 8003b7c:	4628      	mov	r0, r5
 8003b7e:	47b8      	blx	r7
 8003b80:	3001      	adds	r0, #1
 8003b82:	f43f af42 	beq.w	8003a0a <_printf_float+0xb6>
 8003b86:	f04f 0900 	mov.w	r9, #0
 8003b8a:	f108 38ff 	add.w	r8, r8, #4294967295
 8003b8e:	f104 0a1a 	add.w	sl, r4, #26
 8003b92:	45c8      	cmp	r8, r9
 8003b94:	dc09      	bgt.n	8003baa <_printf_float+0x256>
 8003b96:	6823      	ldr	r3, [r4, #0]
 8003b98:	079b      	lsls	r3, r3, #30
 8003b9a:	f100 8102 	bmi.w	8003da2 <_printf_float+0x44e>
 8003b9e:	68e0      	ldr	r0, [r4, #12]
 8003ba0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003ba2:	4298      	cmp	r0, r3
 8003ba4:	bfb8      	it	lt
 8003ba6:	4618      	movlt	r0, r3
 8003ba8:	e731      	b.n	8003a0e <_printf_float+0xba>
 8003baa:	2301      	movs	r3, #1
 8003bac:	4652      	mov	r2, sl
 8003bae:	4631      	mov	r1, r6
 8003bb0:	4628      	mov	r0, r5
 8003bb2:	47b8      	blx	r7
 8003bb4:	3001      	adds	r0, #1
 8003bb6:	f43f af28 	beq.w	8003a0a <_printf_float+0xb6>
 8003bba:	f109 0901 	add.w	r9, r9, #1
 8003bbe:	e7e8      	b.n	8003b92 <_printf_float+0x23e>
 8003bc0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	dc38      	bgt.n	8003c38 <_printf_float+0x2e4>
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	4631      	mov	r1, r6
 8003bca:	4628      	mov	r0, r5
 8003bcc:	4a19      	ldr	r2, [pc, #100]	@ (8003c34 <_printf_float+0x2e0>)
 8003bce:	47b8      	blx	r7
 8003bd0:	3001      	adds	r0, #1
 8003bd2:	f43f af1a 	beq.w	8003a0a <_printf_float+0xb6>
 8003bd6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003bda:	ea59 0303 	orrs.w	r3, r9, r3
 8003bde:	d102      	bne.n	8003be6 <_printf_float+0x292>
 8003be0:	6823      	ldr	r3, [r4, #0]
 8003be2:	07d9      	lsls	r1, r3, #31
 8003be4:	d5d7      	bpl.n	8003b96 <_printf_float+0x242>
 8003be6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003bea:	4631      	mov	r1, r6
 8003bec:	4628      	mov	r0, r5
 8003bee:	47b8      	blx	r7
 8003bf0:	3001      	adds	r0, #1
 8003bf2:	f43f af0a 	beq.w	8003a0a <_printf_float+0xb6>
 8003bf6:	f04f 0a00 	mov.w	sl, #0
 8003bfa:	f104 0b1a 	add.w	fp, r4, #26
 8003bfe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003c00:	425b      	negs	r3, r3
 8003c02:	4553      	cmp	r3, sl
 8003c04:	dc01      	bgt.n	8003c0a <_printf_float+0x2b6>
 8003c06:	464b      	mov	r3, r9
 8003c08:	e793      	b.n	8003b32 <_printf_float+0x1de>
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	465a      	mov	r2, fp
 8003c0e:	4631      	mov	r1, r6
 8003c10:	4628      	mov	r0, r5
 8003c12:	47b8      	blx	r7
 8003c14:	3001      	adds	r0, #1
 8003c16:	f43f aef8 	beq.w	8003a0a <_printf_float+0xb6>
 8003c1a:	f10a 0a01 	add.w	sl, sl, #1
 8003c1e:	e7ee      	b.n	8003bfe <_printf_float+0x2aa>
 8003c20:	7fefffff 	.word	0x7fefffff
 8003c24:	0800654a 	.word	0x0800654a
 8003c28:	08006546 	.word	0x08006546
 8003c2c:	08006552 	.word	0x08006552
 8003c30:	0800654e 	.word	0x0800654e
 8003c34:	08006556 	.word	0x08006556
 8003c38:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003c3a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003c3e:	4553      	cmp	r3, sl
 8003c40:	bfa8      	it	ge
 8003c42:	4653      	movge	r3, sl
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	4699      	mov	r9, r3
 8003c48:	dc36      	bgt.n	8003cb8 <_printf_float+0x364>
 8003c4a:	f04f 0b00 	mov.w	fp, #0
 8003c4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c52:	f104 021a 	add.w	r2, r4, #26
 8003c56:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003c58:	930a      	str	r3, [sp, #40]	@ 0x28
 8003c5a:	eba3 0309 	sub.w	r3, r3, r9
 8003c5e:	455b      	cmp	r3, fp
 8003c60:	dc31      	bgt.n	8003cc6 <_printf_float+0x372>
 8003c62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003c64:	459a      	cmp	sl, r3
 8003c66:	dc3a      	bgt.n	8003cde <_printf_float+0x38a>
 8003c68:	6823      	ldr	r3, [r4, #0]
 8003c6a:	07da      	lsls	r2, r3, #31
 8003c6c:	d437      	bmi.n	8003cde <_printf_float+0x38a>
 8003c6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003c70:	ebaa 0903 	sub.w	r9, sl, r3
 8003c74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003c76:	ebaa 0303 	sub.w	r3, sl, r3
 8003c7a:	4599      	cmp	r9, r3
 8003c7c:	bfa8      	it	ge
 8003c7e:	4699      	movge	r9, r3
 8003c80:	f1b9 0f00 	cmp.w	r9, #0
 8003c84:	dc33      	bgt.n	8003cee <_printf_float+0x39a>
 8003c86:	f04f 0800 	mov.w	r8, #0
 8003c8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c8e:	f104 0b1a 	add.w	fp, r4, #26
 8003c92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003c94:	ebaa 0303 	sub.w	r3, sl, r3
 8003c98:	eba3 0309 	sub.w	r3, r3, r9
 8003c9c:	4543      	cmp	r3, r8
 8003c9e:	f77f af7a 	ble.w	8003b96 <_printf_float+0x242>
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	465a      	mov	r2, fp
 8003ca6:	4631      	mov	r1, r6
 8003ca8:	4628      	mov	r0, r5
 8003caa:	47b8      	blx	r7
 8003cac:	3001      	adds	r0, #1
 8003cae:	f43f aeac 	beq.w	8003a0a <_printf_float+0xb6>
 8003cb2:	f108 0801 	add.w	r8, r8, #1
 8003cb6:	e7ec      	b.n	8003c92 <_printf_float+0x33e>
 8003cb8:	4642      	mov	r2, r8
 8003cba:	4631      	mov	r1, r6
 8003cbc:	4628      	mov	r0, r5
 8003cbe:	47b8      	blx	r7
 8003cc0:	3001      	adds	r0, #1
 8003cc2:	d1c2      	bne.n	8003c4a <_printf_float+0x2f6>
 8003cc4:	e6a1      	b.n	8003a0a <_printf_float+0xb6>
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	4631      	mov	r1, r6
 8003cca:	4628      	mov	r0, r5
 8003ccc:	920a      	str	r2, [sp, #40]	@ 0x28
 8003cce:	47b8      	blx	r7
 8003cd0:	3001      	adds	r0, #1
 8003cd2:	f43f ae9a 	beq.w	8003a0a <_printf_float+0xb6>
 8003cd6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003cd8:	f10b 0b01 	add.w	fp, fp, #1
 8003cdc:	e7bb      	b.n	8003c56 <_printf_float+0x302>
 8003cde:	4631      	mov	r1, r6
 8003ce0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003ce4:	4628      	mov	r0, r5
 8003ce6:	47b8      	blx	r7
 8003ce8:	3001      	adds	r0, #1
 8003cea:	d1c0      	bne.n	8003c6e <_printf_float+0x31a>
 8003cec:	e68d      	b.n	8003a0a <_printf_float+0xb6>
 8003cee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003cf0:	464b      	mov	r3, r9
 8003cf2:	4631      	mov	r1, r6
 8003cf4:	4628      	mov	r0, r5
 8003cf6:	4442      	add	r2, r8
 8003cf8:	47b8      	blx	r7
 8003cfa:	3001      	adds	r0, #1
 8003cfc:	d1c3      	bne.n	8003c86 <_printf_float+0x332>
 8003cfe:	e684      	b.n	8003a0a <_printf_float+0xb6>
 8003d00:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003d04:	f1ba 0f01 	cmp.w	sl, #1
 8003d08:	dc01      	bgt.n	8003d0e <_printf_float+0x3ba>
 8003d0a:	07db      	lsls	r3, r3, #31
 8003d0c:	d536      	bpl.n	8003d7c <_printf_float+0x428>
 8003d0e:	2301      	movs	r3, #1
 8003d10:	4642      	mov	r2, r8
 8003d12:	4631      	mov	r1, r6
 8003d14:	4628      	mov	r0, r5
 8003d16:	47b8      	blx	r7
 8003d18:	3001      	adds	r0, #1
 8003d1a:	f43f ae76 	beq.w	8003a0a <_printf_float+0xb6>
 8003d1e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003d22:	4631      	mov	r1, r6
 8003d24:	4628      	mov	r0, r5
 8003d26:	47b8      	blx	r7
 8003d28:	3001      	adds	r0, #1
 8003d2a:	f43f ae6e 	beq.w	8003a0a <_printf_float+0xb6>
 8003d2e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003d32:	2200      	movs	r2, #0
 8003d34:	2300      	movs	r3, #0
 8003d36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003d3a:	f7fc fe35 	bl	80009a8 <__aeabi_dcmpeq>
 8003d3e:	b9c0      	cbnz	r0, 8003d72 <_printf_float+0x41e>
 8003d40:	4653      	mov	r3, sl
 8003d42:	f108 0201 	add.w	r2, r8, #1
 8003d46:	4631      	mov	r1, r6
 8003d48:	4628      	mov	r0, r5
 8003d4a:	47b8      	blx	r7
 8003d4c:	3001      	adds	r0, #1
 8003d4e:	d10c      	bne.n	8003d6a <_printf_float+0x416>
 8003d50:	e65b      	b.n	8003a0a <_printf_float+0xb6>
 8003d52:	2301      	movs	r3, #1
 8003d54:	465a      	mov	r2, fp
 8003d56:	4631      	mov	r1, r6
 8003d58:	4628      	mov	r0, r5
 8003d5a:	47b8      	blx	r7
 8003d5c:	3001      	adds	r0, #1
 8003d5e:	f43f ae54 	beq.w	8003a0a <_printf_float+0xb6>
 8003d62:	f108 0801 	add.w	r8, r8, #1
 8003d66:	45d0      	cmp	r8, sl
 8003d68:	dbf3      	blt.n	8003d52 <_printf_float+0x3fe>
 8003d6a:	464b      	mov	r3, r9
 8003d6c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003d70:	e6e0      	b.n	8003b34 <_printf_float+0x1e0>
 8003d72:	f04f 0800 	mov.w	r8, #0
 8003d76:	f104 0b1a 	add.w	fp, r4, #26
 8003d7a:	e7f4      	b.n	8003d66 <_printf_float+0x412>
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	4642      	mov	r2, r8
 8003d80:	e7e1      	b.n	8003d46 <_printf_float+0x3f2>
 8003d82:	2301      	movs	r3, #1
 8003d84:	464a      	mov	r2, r9
 8003d86:	4631      	mov	r1, r6
 8003d88:	4628      	mov	r0, r5
 8003d8a:	47b8      	blx	r7
 8003d8c:	3001      	adds	r0, #1
 8003d8e:	f43f ae3c 	beq.w	8003a0a <_printf_float+0xb6>
 8003d92:	f108 0801 	add.w	r8, r8, #1
 8003d96:	68e3      	ldr	r3, [r4, #12]
 8003d98:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003d9a:	1a5b      	subs	r3, r3, r1
 8003d9c:	4543      	cmp	r3, r8
 8003d9e:	dcf0      	bgt.n	8003d82 <_printf_float+0x42e>
 8003da0:	e6fd      	b.n	8003b9e <_printf_float+0x24a>
 8003da2:	f04f 0800 	mov.w	r8, #0
 8003da6:	f104 0919 	add.w	r9, r4, #25
 8003daa:	e7f4      	b.n	8003d96 <_printf_float+0x442>

08003dac <_printf_common>:
 8003dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003db0:	4616      	mov	r6, r2
 8003db2:	4698      	mov	r8, r3
 8003db4:	688a      	ldr	r2, [r1, #8]
 8003db6:	690b      	ldr	r3, [r1, #16]
 8003db8:	4607      	mov	r7, r0
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	bfb8      	it	lt
 8003dbe:	4613      	movlt	r3, r2
 8003dc0:	6033      	str	r3, [r6, #0]
 8003dc2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003dc6:	460c      	mov	r4, r1
 8003dc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003dcc:	b10a      	cbz	r2, 8003dd2 <_printf_common+0x26>
 8003dce:	3301      	adds	r3, #1
 8003dd0:	6033      	str	r3, [r6, #0]
 8003dd2:	6823      	ldr	r3, [r4, #0]
 8003dd4:	0699      	lsls	r1, r3, #26
 8003dd6:	bf42      	ittt	mi
 8003dd8:	6833      	ldrmi	r3, [r6, #0]
 8003dda:	3302      	addmi	r3, #2
 8003ddc:	6033      	strmi	r3, [r6, #0]
 8003dde:	6825      	ldr	r5, [r4, #0]
 8003de0:	f015 0506 	ands.w	r5, r5, #6
 8003de4:	d106      	bne.n	8003df4 <_printf_common+0x48>
 8003de6:	f104 0a19 	add.w	sl, r4, #25
 8003dea:	68e3      	ldr	r3, [r4, #12]
 8003dec:	6832      	ldr	r2, [r6, #0]
 8003dee:	1a9b      	subs	r3, r3, r2
 8003df0:	42ab      	cmp	r3, r5
 8003df2:	dc2b      	bgt.n	8003e4c <_printf_common+0xa0>
 8003df4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003df8:	6822      	ldr	r2, [r4, #0]
 8003dfa:	3b00      	subs	r3, #0
 8003dfc:	bf18      	it	ne
 8003dfe:	2301      	movne	r3, #1
 8003e00:	0692      	lsls	r2, r2, #26
 8003e02:	d430      	bmi.n	8003e66 <_printf_common+0xba>
 8003e04:	4641      	mov	r1, r8
 8003e06:	4638      	mov	r0, r7
 8003e08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003e0c:	47c8      	blx	r9
 8003e0e:	3001      	adds	r0, #1
 8003e10:	d023      	beq.n	8003e5a <_printf_common+0xae>
 8003e12:	6823      	ldr	r3, [r4, #0]
 8003e14:	6922      	ldr	r2, [r4, #16]
 8003e16:	f003 0306 	and.w	r3, r3, #6
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	bf14      	ite	ne
 8003e1e:	2500      	movne	r5, #0
 8003e20:	6833      	ldreq	r3, [r6, #0]
 8003e22:	f04f 0600 	mov.w	r6, #0
 8003e26:	bf08      	it	eq
 8003e28:	68e5      	ldreq	r5, [r4, #12]
 8003e2a:	f104 041a 	add.w	r4, r4, #26
 8003e2e:	bf08      	it	eq
 8003e30:	1aed      	subeq	r5, r5, r3
 8003e32:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003e36:	bf08      	it	eq
 8003e38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	bfc4      	itt	gt
 8003e40:	1a9b      	subgt	r3, r3, r2
 8003e42:	18ed      	addgt	r5, r5, r3
 8003e44:	42b5      	cmp	r5, r6
 8003e46:	d11a      	bne.n	8003e7e <_printf_common+0xd2>
 8003e48:	2000      	movs	r0, #0
 8003e4a:	e008      	b.n	8003e5e <_printf_common+0xb2>
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	4652      	mov	r2, sl
 8003e50:	4641      	mov	r1, r8
 8003e52:	4638      	mov	r0, r7
 8003e54:	47c8      	blx	r9
 8003e56:	3001      	adds	r0, #1
 8003e58:	d103      	bne.n	8003e62 <_printf_common+0xb6>
 8003e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e62:	3501      	adds	r5, #1
 8003e64:	e7c1      	b.n	8003dea <_printf_common+0x3e>
 8003e66:	2030      	movs	r0, #48	@ 0x30
 8003e68:	18e1      	adds	r1, r4, r3
 8003e6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003e6e:	1c5a      	adds	r2, r3, #1
 8003e70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003e74:	4422      	add	r2, r4
 8003e76:	3302      	adds	r3, #2
 8003e78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003e7c:	e7c2      	b.n	8003e04 <_printf_common+0x58>
 8003e7e:	2301      	movs	r3, #1
 8003e80:	4622      	mov	r2, r4
 8003e82:	4641      	mov	r1, r8
 8003e84:	4638      	mov	r0, r7
 8003e86:	47c8      	blx	r9
 8003e88:	3001      	adds	r0, #1
 8003e8a:	d0e6      	beq.n	8003e5a <_printf_common+0xae>
 8003e8c:	3601      	adds	r6, #1
 8003e8e:	e7d9      	b.n	8003e44 <_printf_common+0x98>

08003e90 <_printf_i>:
 8003e90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e94:	7e0f      	ldrb	r7, [r1, #24]
 8003e96:	4691      	mov	r9, r2
 8003e98:	2f78      	cmp	r7, #120	@ 0x78
 8003e9a:	4680      	mov	r8, r0
 8003e9c:	460c      	mov	r4, r1
 8003e9e:	469a      	mov	sl, r3
 8003ea0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003ea2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003ea6:	d807      	bhi.n	8003eb8 <_printf_i+0x28>
 8003ea8:	2f62      	cmp	r7, #98	@ 0x62
 8003eaa:	d80a      	bhi.n	8003ec2 <_printf_i+0x32>
 8003eac:	2f00      	cmp	r7, #0
 8003eae:	f000 80d1 	beq.w	8004054 <_printf_i+0x1c4>
 8003eb2:	2f58      	cmp	r7, #88	@ 0x58
 8003eb4:	f000 80b8 	beq.w	8004028 <_printf_i+0x198>
 8003eb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ebc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003ec0:	e03a      	b.n	8003f38 <_printf_i+0xa8>
 8003ec2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003ec6:	2b15      	cmp	r3, #21
 8003ec8:	d8f6      	bhi.n	8003eb8 <_printf_i+0x28>
 8003eca:	a101      	add	r1, pc, #4	@ (adr r1, 8003ed0 <_printf_i+0x40>)
 8003ecc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ed0:	08003f29 	.word	0x08003f29
 8003ed4:	08003f3d 	.word	0x08003f3d
 8003ed8:	08003eb9 	.word	0x08003eb9
 8003edc:	08003eb9 	.word	0x08003eb9
 8003ee0:	08003eb9 	.word	0x08003eb9
 8003ee4:	08003eb9 	.word	0x08003eb9
 8003ee8:	08003f3d 	.word	0x08003f3d
 8003eec:	08003eb9 	.word	0x08003eb9
 8003ef0:	08003eb9 	.word	0x08003eb9
 8003ef4:	08003eb9 	.word	0x08003eb9
 8003ef8:	08003eb9 	.word	0x08003eb9
 8003efc:	0800403b 	.word	0x0800403b
 8003f00:	08003f67 	.word	0x08003f67
 8003f04:	08003ff5 	.word	0x08003ff5
 8003f08:	08003eb9 	.word	0x08003eb9
 8003f0c:	08003eb9 	.word	0x08003eb9
 8003f10:	0800405d 	.word	0x0800405d
 8003f14:	08003eb9 	.word	0x08003eb9
 8003f18:	08003f67 	.word	0x08003f67
 8003f1c:	08003eb9 	.word	0x08003eb9
 8003f20:	08003eb9 	.word	0x08003eb9
 8003f24:	08003ffd 	.word	0x08003ffd
 8003f28:	6833      	ldr	r3, [r6, #0]
 8003f2a:	1d1a      	adds	r2, r3, #4
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6032      	str	r2, [r6, #0]
 8003f30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e09c      	b.n	8004076 <_printf_i+0x1e6>
 8003f3c:	6833      	ldr	r3, [r6, #0]
 8003f3e:	6820      	ldr	r0, [r4, #0]
 8003f40:	1d19      	adds	r1, r3, #4
 8003f42:	6031      	str	r1, [r6, #0]
 8003f44:	0606      	lsls	r6, r0, #24
 8003f46:	d501      	bpl.n	8003f4c <_printf_i+0xbc>
 8003f48:	681d      	ldr	r5, [r3, #0]
 8003f4a:	e003      	b.n	8003f54 <_printf_i+0xc4>
 8003f4c:	0645      	lsls	r5, r0, #25
 8003f4e:	d5fb      	bpl.n	8003f48 <_printf_i+0xb8>
 8003f50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003f54:	2d00      	cmp	r5, #0
 8003f56:	da03      	bge.n	8003f60 <_printf_i+0xd0>
 8003f58:	232d      	movs	r3, #45	@ 0x2d
 8003f5a:	426d      	negs	r5, r5
 8003f5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f60:	230a      	movs	r3, #10
 8003f62:	4858      	ldr	r0, [pc, #352]	@ (80040c4 <_printf_i+0x234>)
 8003f64:	e011      	b.n	8003f8a <_printf_i+0xfa>
 8003f66:	6821      	ldr	r1, [r4, #0]
 8003f68:	6833      	ldr	r3, [r6, #0]
 8003f6a:	0608      	lsls	r0, r1, #24
 8003f6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003f70:	d402      	bmi.n	8003f78 <_printf_i+0xe8>
 8003f72:	0649      	lsls	r1, r1, #25
 8003f74:	bf48      	it	mi
 8003f76:	b2ad      	uxthmi	r5, r5
 8003f78:	2f6f      	cmp	r7, #111	@ 0x6f
 8003f7a:	6033      	str	r3, [r6, #0]
 8003f7c:	bf14      	ite	ne
 8003f7e:	230a      	movne	r3, #10
 8003f80:	2308      	moveq	r3, #8
 8003f82:	4850      	ldr	r0, [pc, #320]	@ (80040c4 <_printf_i+0x234>)
 8003f84:	2100      	movs	r1, #0
 8003f86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003f8a:	6866      	ldr	r6, [r4, #4]
 8003f8c:	2e00      	cmp	r6, #0
 8003f8e:	60a6      	str	r6, [r4, #8]
 8003f90:	db05      	blt.n	8003f9e <_printf_i+0x10e>
 8003f92:	6821      	ldr	r1, [r4, #0]
 8003f94:	432e      	orrs	r6, r5
 8003f96:	f021 0104 	bic.w	r1, r1, #4
 8003f9a:	6021      	str	r1, [r4, #0]
 8003f9c:	d04b      	beq.n	8004036 <_printf_i+0x1a6>
 8003f9e:	4616      	mov	r6, r2
 8003fa0:	fbb5 f1f3 	udiv	r1, r5, r3
 8003fa4:	fb03 5711 	mls	r7, r3, r1, r5
 8003fa8:	5dc7      	ldrb	r7, [r0, r7]
 8003faa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003fae:	462f      	mov	r7, r5
 8003fb0:	42bb      	cmp	r3, r7
 8003fb2:	460d      	mov	r5, r1
 8003fb4:	d9f4      	bls.n	8003fa0 <_printf_i+0x110>
 8003fb6:	2b08      	cmp	r3, #8
 8003fb8:	d10b      	bne.n	8003fd2 <_printf_i+0x142>
 8003fba:	6823      	ldr	r3, [r4, #0]
 8003fbc:	07df      	lsls	r7, r3, #31
 8003fbe:	d508      	bpl.n	8003fd2 <_printf_i+0x142>
 8003fc0:	6923      	ldr	r3, [r4, #16]
 8003fc2:	6861      	ldr	r1, [r4, #4]
 8003fc4:	4299      	cmp	r1, r3
 8003fc6:	bfde      	ittt	le
 8003fc8:	2330      	movle	r3, #48	@ 0x30
 8003fca:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003fce:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003fd2:	1b92      	subs	r2, r2, r6
 8003fd4:	6122      	str	r2, [r4, #16]
 8003fd6:	464b      	mov	r3, r9
 8003fd8:	4621      	mov	r1, r4
 8003fda:	4640      	mov	r0, r8
 8003fdc:	f8cd a000 	str.w	sl, [sp]
 8003fe0:	aa03      	add	r2, sp, #12
 8003fe2:	f7ff fee3 	bl	8003dac <_printf_common>
 8003fe6:	3001      	adds	r0, #1
 8003fe8:	d14a      	bne.n	8004080 <_printf_i+0x1f0>
 8003fea:	f04f 30ff 	mov.w	r0, #4294967295
 8003fee:	b004      	add	sp, #16
 8003ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ff4:	6823      	ldr	r3, [r4, #0]
 8003ff6:	f043 0320 	orr.w	r3, r3, #32
 8003ffa:	6023      	str	r3, [r4, #0]
 8003ffc:	2778      	movs	r7, #120	@ 0x78
 8003ffe:	4832      	ldr	r0, [pc, #200]	@ (80040c8 <_printf_i+0x238>)
 8004000:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004004:	6823      	ldr	r3, [r4, #0]
 8004006:	6831      	ldr	r1, [r6, #0]
 8004008:	061f      	lsls	r7, r3, #24
 800400a:	f851 5b04 	ldr.w	r5, [r1], #4
 800400e:	d402      	bmi.n	8004016 <_printf_i+0x186>
 8004010:	065f      	lsls	r7, r3, #25
 8004012:	bf48      	it	mi
 8004014:	b2ad      	uxthmi	r5, r5
 8004016:	6031      	str	r1, [r6, #0]
 8004018:	07d9      	lsls	r1, r3, #31
 800401a:	bf44      	itt	mi
 800401c:	f043 0320 	orrmi.w	r3, r3, #32
 8004020:	6023      	strmi	r3, [r4, #0]
 8004022:	b11d      	cbz	r5, 800402c <_printf_i+0x19c>
 8004024:	2310      	movs	r3, #16
 8004026:	e7ad      	b.n	8003f84 <_printf_i+0xf4>
 8004028:	4826      	ldr	r0, [pc, #152]	@ (80040c4 <_printf_i+0x234>)
 800402a:	e7e9      	b.n	8004000 <_printf_i+0x170>
 800402c:	6823      	ldr	r3, [r4, #0]
 800402e:	f023 0320 	bic.w	r3, r3, #32
 8004032:	6023      	str	r3, [r4, #0]
 8004034:	e7f6      	b.n	8004024 <_printf_i+0x194>
 8004036:	4616      	mov	r6, r2
 8004038:	e7bd      	b.n	8003fb6 <_printf_i+0x126>
 800403a:	6833      	ldr	r3, [r6, #0]
 800403c:	6825      	ldr	r5, [r4, #0]
 800403e:	1d18      	adds	r0, r3, #4
 8004040:	6961      	ldr	r1, [r4, #20]
 8004042:	6030      	str	r0, [r6, #0]
 8004044:	062e      	lsls	r6, r5, #24
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	d501      	bpl.n	800404e <_printf_i+0x1be>
 800404a:	6019      	str	r1, [r3, #0]
 800404c:	e002      	b.n	8004054 <_printf_i+0x1c4>
 800404e:	0668      	lsls	r0, r5, #25
 8004050:	d5fb      	bpl.n	800404a <_printf_i+0x1ba>
 8004052:	8019      	strh	r1, [r3, #0]
 8004054:	2300      	movs	r3, #0
 8004056:	4616      	mov	r6, r2
 8004058:	6123      	str	r3, [r4, #16]
 800405a:	e7bc      	b.n	8003fd6 <_printf_i+0x146>
 800405c:	6833      	ldr	r3, [r6, #0]
 800405e:	2100      	movs	r1, #0
 8004060:	1d1a      	adds	r2, r3, #4
 8004062:	6032      	str	r2, [r6, #0]
 8004064:	681e      	ldr	r6, [r3, #0]
 8004066:	6862      	ldr	r2, [r4, #4]
 8004068:	4630      	mov	r0, r6
 800406a:	f000 f9ea 	bl	8004442 <memchr>
 800406e:	b108      	cbz	r0, 8004074 <_printf_i+0x1e4>
 8004070:	1b80      	subs	r0, r0, r6
 8004072:	6060      	str	r0, [r4, #4]
 8004074:	6863      	ldr	r3, [r4, #4]
 8004076:	6123      	str	r3, [r4, #16]
 8004078:	2300      	movs	r3, #0
 800407a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800407e:	e7aa      	b.n	8003fd6 <_printf_i+0x146>
 8004080:	4632      	mov	r2, r6
 8004082:	4649      	mov	r1, r9
 8004084:	4640      	mov	r0, r8
 8004086:	6923      	ldr	r3, [r4, #16]
 8004088:	47d0      	blx	sl
 800408a:	3001      	adds	r0, #1
 800408c:	d0ad      	beq.n	8003fea <_printf_i+0x15a>
 800408e:	6823      	ldr	r3, [r4, #0]
 8004090:	079b      	lsls	r3, r3, #30
 8004092:	d413      	bmi.n	80040bc <_printf_i+0x22c>
 8004094:	68e0      	ldr	r0, [r4, #12]
 8004096:	9b03      	ldr	r3, [sp, #12]
 8004098:	4298      	cmp	r0, r3
 800409a:	bfb8      	it	lt
 800409c:	4618      	movlt	r0, r3
 800409e:	e7a6      	b.n	8003fee <_printf_i+0x15e>
 80040a0:	2301      	movs	r3, #1
 80040a2:	4632      	mov	r2, r6
 80040a4:	4649      	mov	r1, r9
 80040a6:	4640      	mov	r0, r8
 80040a8:	47d0      	blx	sl
 80040aa:	3001      	adds	r0, #1
 80040ac:	d09d      	beq.n	8003fea <_printf_i+0x15a>
 80040ae:	3501      	adds	r5, #1
 80040b0:	68e3      	ldr	r3, [r4, #12]
 80040b2:	9903      	ldr	r1, [sp, #12]
 80040b4:	1a5b      	subs	r3, r3, r1
 80040b6:	42ab      	cmp	r3, r5
 80040b8:	dcf2      	bgt.n	80040a0 <_printf_i+0x210>
 80040ba:	e7eb      	b.n	8004094 <_printf_i+0x204>
 80040bc:	2500      	movs	r5, #0
 80040be:	f104 0619 	add.w	r6, r4, #25
 80040c2:	e7f5      	b.n	80040b0 <_printf_i+0x220>
 80040c4:	08006558 	.word	0x08006558
 80040c8:	08006569 	.word	0x08006569

080040cc <std>:
 80040cc:	2300      	movs	r3, #0
 80040ce:	b510      	push	{r4, lr}
 80040d0:	4604      	mov	r4, r0
 80040d2:	e9c0 3300 	strd	r3, r3, [r0]
 80040d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80040da:	6083      	str	r3, [r0, #8]
 80040dc:	8181      	strh	r1, [r0, #12]
 80040de:	6643      	str	r3, [r0, #100]	@ 0x64
 80040e0:	81c2      	strh	r2, [r0, #14]
 80040e2:	6183      	str	r3, [r0, #24]
 80040e4:	4619      	mov	r1, r3
 80040e6:	2208      	movs	r2, #8
 80040e8:	305c      	adds	r0, #92	@ 0x5c
 80040ea:	f000 f92a 	bl	8004342 <memset>
 80040ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004124 <std+0x58>)
 80040f0:	6224      	str	r4, [r4, #32]
 80040f2:	6263      	str	r3, [r4, #36]	@ 0x24
 80040f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004128 <std+0x5c>)
 80040f6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80040f8:	4b0c      	ldr	r3, [pc, #48]	@ (800412c <std+0x60>)
 80040fa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80040fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004130 <std+0x64>)
 80040fe:	6323      	str	r3, [r4, #48]	@ 0x30
 8004100:	4b0c      	ldr	r3, [pc, #48]	@ (8004134 <std+0x68>)
 8004102:	429c      	cmp	r4, r3
 8004104:	d006      	beq.n	8004114 <std+0x48>
 8004106:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800410a:	4294      	cmp	r4, r2
 800410c:	d002      	beq.n	8004114 <std+0x48>
 800410e:	33d0      	adds	r3, #208	@ 0xd0
 8004110:	429c      	cmp	r4, r3
 8004112:	d105      	bne.n	8004120 <std+0x54>
 8004114:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800411c:	f000 b98e 	b.w	800443c <__retarget_lock_init_recursive>
 8004120:	bd10      	pop	{r4, pc}
 8004122:	bf00      	nop
 8004124:	080042bd 	.word	0x080042bd
 8004128:	080042df 	.word	0x080042df
 800412c:	08004317 	.word	0x08004317
 8004130:	0800433b 	.word	0x0800433b
 8004134:	20000530 	.word	0x20000530

08004138 <stdio_exit_handler>:
 8004138:	4a02      	ldr	r2, [pc, #8]	@ (8004144 <stdio_exit_handler+0xc>)
 800413a:	4903      	ldr	r1, [pc, #12]	@ (8004148 <stdio_exit_handler+0x10>)
 800413c:	4803      	ldr	r0, [pc, #12]	@ (800414c <stdio_exit_handler+0x14>)
 800413e:	f000 b869 	b.w	8004214 <_fwalk_sglue>
 8004142:	bf00      	nop
 8004144:	20000014 	.word	0x20000014
 8004148:	08005db9 	.word	0x08005db9
 800414c:	20000024 	.word	0x20000024

08004150 <cleanup_stdio>:
 8004150:	6841      	ldr	r1, [r0, #4]
 8004152:	4b0c      	ldr	r3, [pc, #48]	@ (8004184 <cleanup_stdio+0x34>)
 8004154:	b510      	push	{r4, lr}
 8004156:	4299      	cmp	r1, r3
 8004158:	4604      	mov	r4, r0
 800415a:	d001      	beq.n	8004160 <cleanup_stdio+0x10>
 800415c:	f001 fe2c 	bl	8005db8 <_fflush_r>
 8004160:	68a1      	ldr	r1, [r4, #8]
 8004162:	4b09      	ldr	r3, [pc, #36]	@ (8004188 <cleanup_stdio+0x38>)
 8004164:	4299      	cmp	r1, r3
 8004166:	d002      	beq.n	800416e <cleanup_stdio+0x1e>
 8004168:	4620      	mov	r0, r4
 800416a:	f001 fe25 	bl	8005db8 <_fflush_r>
 800416e:	68e1      	ldr	r1, [r4, #12]
 8004170:	4b06      	ldr	r3, [pc, #24]	@ (800418c <cleanup_stdio+0x3c>)
 8004172:	4299      	cmp	r1, r3
 8004174:	d004      	beq.n	8004180 <cleanup_stdio+0x30>
 8004176:	4620      	mov	r0, r4
 8004178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800417c:	f001 be1c 	b.w	8005db8 <_fflush_r>
 8004180:	bd10      	pop	{r4, pc}
 8004182:	bf00      	nop
 8004184:	20000530 	.word	0x20000530
 8004188:	20000598 	.word	0x20000598
 800418c:	20000600 	.word	0x20000600

08004190 <global_stdio_init.part.0>:
 8004190:	b510      	push	{r4, lr}
 8004192:	4b0b      	ldr	r3, [pc, #44]	@ (80041c0 <global_stdio_init.part.0+0x30>)
 8004194:	4c0b      	ldr	r4, [pc, #44]	@ (80041c4 <global_stdio_init.part.0+0x34>)
 8004196:	4a0c      	ldr	r2, [pc, #48]	@ (80041c8 <global_stdio_init.part.0+0x38>)
 8004198:	4620      	mov	r0, r4
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	2104      	movs	r1, #4
 800419e:	2200      	movs	r2, #0
 80041a0:	f7ff ff94 	bl	80040cc <std>
 80041a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80041a8:	2201      	movs	r2, #1
 80041aa:	2109      	movs	r1, #9
 80041ac:	f7ff ff8e 	bl	80040cc <std>
 80041b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80041b4:	2202      	movs	r2, #2
 80041b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041ba:	2112      	movs	r1, #18
 80041bc:	f7ff bf86 	b.w	80040cc <std>
 80041c0:	20000668 	.word	0x20000668
 80041c4:	20000530 	.word	0x20000530
 80041c8:	08004139 	.word	0x08004139

080041cc <__sfp_lock_acquire>:
 80041cc:	4801      	ldr	r0, [pc, #4]	@ (80041d4 <__sfp_lock_acquire+0x8>)
 80041ce:	f000 b936 	b.w	800443e <__retarget_lock_acquire_recursive>
 80041d2:	bf00      	nop
 80041d4:	20000671 	.word	0x20000671

080041d8 <__sfp_lock_release>:
 80041d8:	4801      	ldr	r0, [pc, #4]	@ (80041e0 <__sfp_lock_release+0x8>)
 80041da:	f000 b931 	b.w	8004440 <__retarget_lock_release_recursive>
 80041de:	bf00      	nop
 80041e0:	20000671 	.word	0x20000671

080041e4 <__sinit>:
 80041e4:	b510      	push	{r4, lr}
 80041e6:	4604      	mov	r4, r0
 80041e8:	f7ff fff0 	bl	80041cc <__sfp_lock_acquire>
 80041ec:	6a23      	ldr	r3, [r4, #32]
 80041ee:	b11b      	cbz	r3, 80041f8 <__sinit+0x14>
 80041f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041f4:	f7ff bff0 	b.w	80041d8 <__sfp_lock_release>
 80041f8:	4b04      	ldr	r3, [pc, #16]	@ (800420c <__sinit+0x28>)
 80041fa:	6223      	str	r3, [r4, #32]
 80041fc:	4b04      	ldr	r3, [pc, #16]	@ (8004210 <__sinit+0x2c>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1f5      	bne.n	80041f0 <__sinit+0xc>
 8004204:	f7ff ffc4 	bl	8004190 <global_stdio_init.part.0>
 8004208:	e7f2      	b.n	80041f0 <__sinit+0xc>
 800420a:	bf00      	nop
 800420c:	08004151 	.word	0x08004151
 8004210:	20000668 	.word	0x20000668

08004214 <_fwalk_sglue>:
 8004214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004218:	4607      	mov	r7, r0
 800421a:	4688      	mov	r8, r1
 800421c:	4614      	mov	r4, r2
 800421e:	2600      	movs	r6, #0
 8004220:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004224:	f1b9 0901 	subs.w	r9, r9, #1
 8004228:	d505      	bpl.n	8004236 <_fwalk_sglue+0x22>
 800422a:	6824      	ldr	r4, [r4, #0]
 800422c:	2c00      	cmp	r4, #0
 800422e:	d1f7      	bne.n	8004220 <_fwalk_sglue+0xc>
 8004230:	4630      	mov	r0, r6
 8004232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004236:	89ab      	ldrh	r3, [r5, #12]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d907      	bls.n	800424c <_fwalk_sglue+0x38>
 800423c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004240:	3301      	adds	r3, #1
 8004242:	d003      	beq.n	800424c <_fwalk_sglue+0x38>
 8004244:	4629      	mov	r1, r5
 8004246:	4638      	mov	r0, r7
 8004248:	47c0      	blx	r8
 800424a:	4306      	orrs	r6, r0
 800424c:	3568      	adds	r5, #104	@ 0x68
 800424e:	e7e9      	b.n	8004224 <_fwalk_sglue+0x10>

08004250 <sniprintf>:
 8004250:	b40c      	push	{r2, r3}
 8004252:	b530      	push	{r4, r5, lr}
 8004254:	4b18      	ldr	r3, [pc, #96]	@ (80042b8 <sniprintf+0x68>)
 8004256:	1e0c      	subs	r4, r1, #0
 8004258:	681d      	ldr	r5, [r3, #0]
 800425a:	b09d      	sub	sp, #116	@ 0x74
 800425c:	da08      	bge.n	8004270 <sniprintf+0x20>
 800425e:	238b      	movs	r3, #139	@ 0x8b
 8004260:	f04f 30ff 	mov.w	r0, #4294967295
 8004264:	602b      	str	r3, [r5, #0]
 8004266:	b01d      	add	sp, #116	@ 0x74
 8004268:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800426c:	b002      	add	sp, #8
 800426e:	4770      	bx	lr
 8004270:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004274:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004278:	f04f 0300 	mov.w	r3, #0
 800427c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800427e:	bf0c      	ite	eq
 8004280:	4623      	moveq	r3, r4
 8004282:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004286:	9304      	str	r3, [sp, #16]
 8004288:	9307      	str	r3, [sp, #28]
 800428a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800428e:	9002      	str	r0, [sp, #8]
 8004290:	9006      	str	r0, [sp, #24]
 8004292:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004296:	4628      	mov	r0, r5
 8004298:	ab21      	add	r3, sp, #132	@ 0x84
 800429a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800429c:	a902      	add	r1, sp, #8
 800429e:	9301      	str	r3, [sp, #4]
 80042a0:	f001 fc0e 	bl	8005ac0 <_svfiprintf_r>
 80042a4:	1c43      	adds	r3, r0, #1
 80042a6:	bfbc      	itt	lt
 80042a8:	238b      	movlt	r3, #139	@ 0x8b
 80042aa:	602b      	strlt	r3, [r5, #0]
 80042ac:	2c00      	cmp	r4, #0
 80042ae:	d0da      	beq.n	8004266 <sniprintf+0x16>
 80042b0:	2200      	movs	r2, #0
 80042b2:	9b02      	ldr	r3, [sp, #8]
 80042b4:	701a      	strb	r2, [r3, #0]
 80042b6:	e7d6      	b.n	8004266 <sniprintf+0x16>
 80042b8:	20000020 	.word	0x20000020

080042bc <__sread>:
 80042bc:	b510      	push	{r4, lr}
 80042be:	460c      	mov	r4, r1
 80042c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042c4:	f000 f86c 	bl	80043a0 <_read_r>
 80042c8:	2800      	cmp	r0, #0
 80042ca:	bfab      	itete	ge
 80042cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80042ce:	89a3      	ldrhlt	r3, [r4, #12]
 80042d0:	181b      	addge	r3, r3, r0
 80042d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80042d6:	bfac      	ite	ge
 80042d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80042da:	81a3      	strhlt	r3, [r4, #12]
 80042dc:	bd10      	pop	{r4, pc}

080042de <__swrite>:
 80042de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042e2:	461f      	mov	r7, r3
 80042e4:	898b      	ldrh	r3, [r1, #12]
 80042e6:	4605      	mov	r5, r0
 80042e8:	05db      	lsls	r3, r3, #23
 80042ea:	460c      	mov	r4, r1
 80042ec:	4616      	mov	r6, r2
 80042ee:	d505      	bpl.n	80042fc <__swrite+0x1e>
 80042f0:	2302      	movs	r3, #2
 80042f2:	2200      	movs	r2, #0
 80042f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042f8:	f000 f840 	bl	800437c <_lseek_r>
 80042fc:	89a3      	ldrh	r3, [r4, #12]
 80042fe:	4632      	mov	r2, r6
 8004300:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004304:	81a3      	strh	r3, [r4, #12]
 8004306:	4628      	mov	r0, r5
 8004308:	463b      	mov	r3, r7
 800430a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800430e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004312:	f000 b857 	b.w	80043c4 <_write_r>

08004316 <__sseek>:
 8004316:	b510      	push	{r4, lr}
 8004318:	460c      	mov	r4, r1
 800431a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800431e:	f000 f82d 	bl	800437c <_lseek_r>
 8004322:	1c43      	adds	r3, r0, #1
 8004324:	89a3      	ldrh	r3, [r4, #12]
 8004326:	bf15      	itete	ne
 8004328:	6560      	strne	r0, [r4, #84]	@ 0x54
 800432a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800432e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004332:	81a3      	strheq	r3, [r4, #12]
 8004334:	bf18      	it	ne
 8004336:	81a3      	strhne	r3, [r4, #12]
 8004338:	bd10      	pop	{r4, pc}

0800433a <__sclose>:
 800433a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800433e:	f000 b80d 	b.w	800435c <_close_r>

08004342 <memset>:
 8004342:	4603      	mov	r3, r0
 8004344:	4402      	add	r2, r0
 8004346:	4293      	cmp	r3, r2
 8004348:	d100      	bne.n	800434c <memset+0xa>
 800434a:	4770      	bx	lr
 800434c:	f803 1b01 	strb.w	r1, [r3], #1
 8004350:	e7f9      	b.n	8004346 <memset+0x4>
	...

08004354 <_localeconv_r>:
 8004354:	4800      	ldr	r0, [pc, #0]	@ (8004358 <_localeconv_r+0x4>)
 8004356:	4770      	bx	lr
 8004358:	20000160 	.word	0x20000160

0800435c <_close_r>:
 800435c:	b538      	push	{r3, r4, r5, lr}
 800435e:	2300      	movs	r3, #0
 8004360:	4d05      	ldr	r5, [pc, #20]	@ (8004378 <_close_r+0x1c>)
 8004362:	4604      	mov	r4, r0
 8004364:	4608      	mov	r0, r1
 8004366:	602b      	str	r3, [r5, #0]
 8004368:	f7fd fb23 	bl	80019b2 <_close>
 800436c:	1c43      	adds	r3, r0, #1
 800436e:	d102      	bne.n	8004376 <_close_r+0x1a>
 8004370:	682b      	ldr	r3, [r5, #0]
 8004372:	b103      	cbz	r3, 8004376 <_close_r+0x1a>
 8004374:	6023      	str	r3, [r4, #0]
 8004376:	bd38      	pop	{r3, r4, r5, pc}
 8004378:	2000066c 	.word	0x2000066c

0800437c <_lseek_r>:
 800437c:	b538      	push	{r3, r4, r5, lr}
 800437e:	4604      	mov	r4, r0
 8004380:	4608      	mov	r0, r1
 8004382:	4611      	mov	r1, r2
 8004384:	2200      	movs	r2, #0
 8004386:	4d05      	ldr	r5, [pc, #20]	@ (800439c <_lseek_r+0x20>)
 8004388:	602a      	str	r2, [r5, #0]
 800438a:	461a      	mov	r2, r3
 800438c:	f7fd fb35 	bl	80019fa <_lseek>
 8004390:	1c43      	adds	r3, r0, #1
 8004392:	d102      	bne.n	800439a <_lseek_r+0x1e>
 8004394:	682b      	ldr	r3, [r5, #0]
 8004396:	b103      	cbz	r3, 800439a <_lseek_r+0x1e>
 8004398:	6023      	str	r3, [r4, #0]
 800439a:	bd38      	pop	{r3, r4, r5, pc}
 800439c:	2000066c 	.word	0x2000066c

080043a0 <_read_r>:
 80043a0:	b538      	push	{r3, r4, r5, lr}
 80043a2:	4604      	mov	r4, r0
 80043a4:	4608      	mov	r0, r1
 80043a6:	4611      	mov	r1, r2
 80043a8:	2200      	movs	r2, #0
 80043aa:	4d05      	ldr	r5, [pc, #20]	@ (80043c0 <_read_r+0x20>)
 80043ac:	602a      	str	r2, [r5, #0]
 80043ae:	461a      	mov	r2, r3
 80043b0:	f7fd fac6 	bl	8001940 <_read>
 80043b4:	1c43      	adds	r3, r0, #1
 80043b6:	d102      	bne.n	80043be <_read_r+0x1e>
 80043b8:	682b      	ldr	r3, [r5, #0]
 80043ba:	b103      	cbz	r3, 80043be <_read_r+0x1e>
 80043bc:	6023      	str	r3, [r4, #0]
 80043be:	bd38      	pop	{r3, r4, r5, pc}
 80043c0:	2000066c 	.word	0x2000066c

080043c4 <_write_r>:
 80043c4:	b538      	push	{r3, r4, r5, lr}
 80043c6:	4604      	mov	r4, r0
 80043c8:	4608      	mov	r0, r1
 80043ca:	4611      	mov	r1, r2
 80043cc:	2200      	movs	r2, #0
 80043ce:	4d05      	ldr	r5, [pc, #20]	@ (80043e4 <_write_r+0x20>)
 80043d0:	602a      	str	r2, [r5, #0]
 80043d2:	461a      	mov	r2, r3
 80043d4:	f7fd fad1 	bl	800197a <_write>
 80043d8:	1c43      	adds	r3, r0, #1
 80043da:	d102      	bne.n	80043e2 <_write_r+0x1e>
 80043dc:	682b      	ldr	r3, [r5, #0]
 80043de:	b103      	cbz	r3, 80043e2 <_write_r+0x1e>
 80043e0:	6023      	str	r3, [r4, #0]
 80043e2:	bd38      	pop	{r3, r4, r5, pc}
 80043e4:	2000066c 	.word	0x2000066c

080043e8 <__errno>:
 80043e8:	4b01      	ldr	r3, [pc, #4]	@ (80043f0 <__errno+0x8>)
 80043ea:	6818      	ldr	r0, [r3, #0]
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	20000020 	.word	0x20000020

080043f4 <__libc_init_array>:
 80043f4:	b570      	push	{r4, r5, r6, lr}
 80043f6:	2600      	movs	r6, #0
 80043f8:	4d0c      	ldr	r5, [pc, #48]	@ (800442c <__libc_init_array+0x38>)
 80043fa:	4c0d      	ldr	r4, [pc, #52]	@ (8004430 <__libc_init_array+0x3c>)
 80043fc:	1b64      	subs	r4, r4, r5
 80043fe:	10a4      	asrs	r4, r4, #2
 8004400:	42a6      	cmp	r6, r4
 8004402:	d109      	bne.n	8004418 <__libc_init_array+0x24>
 8004404:	f002 f874 	bl	80064f0 <_init>
 8004408:	2600      	movs	r6, #0
 800440a:	4d0a      	ldr	r5, [pc, #40]	@ (8004434 <__libc_init_array+0x40>)
 800440c:	4c0a      	ldr	r4, [pc, #40]	@ (8004438 <__libc_init_array+0x44>)
 800440e:	1b64      	subs	r4, r4, r5
 8004410:	10a4      	asrs	r4, r4, #2
 8004412:	42a6      	cmp	r6, r4
 8004414:	d105      	bne.n	8004422 <__libc_init_array+0x2e>
 8004416:	bd70      	pop	{r4, r5, r6, pc}
 8004418:	f855 3b04 	ldr.w	r3, [r5], #4
 800441c:	4798      	blx	r3
 800441e:	3601      	adds	r6, #1
 8004420:	e7ee      	b.n	8004400 <__libc_init_array+0xc>
 8004422:	f855 3b04 	ldr.w	r3, [r5], #4
 8004426:	4798      	blx	r3
 8004428:	3601      	adds	r6, #1
 800442a:	e7f2      	b.n	8004412 <__libc_init_array+0x1e>
 800442c:	080068c4 	.word	0x080068c4
 8004430:	080068c4 	.word	0x080068c4
 8004434:	080068c4 	.word	0x080068c4
 8004438:	080068c8 	.word	0x080068c8

0800443c <__retarget_lock_init_recursive>:
 800443c:	4770      	bx	lr

0800443e <__retarget_lock_acquire_recursive>:
 800443e:	4770      	bx	lr

08004440 <__retarget_lock_release_recursive>:
 8004440:	4770      	bx	lr

08004442 <memchr>:
 8004442:	4603      	mov	r3, r0
 8004444:	b510      	push	{r4, lr}
 8004446:	b2c9      	uxtb	r1, r1
 8004448:	4402      	add	r2, r0
 800444a:	4293      	cmp	r3, r2
 800444c:	4618      	mov	r0, r3
 800444e:	d101      	bne.n	8004454 <memchr+0x12>
 8004450:	2000      	movs	r0, #0
 8004452:	e003      	b.n	800445c <memchr+0x1a>
 8004454:	7804      	ldrb	r4, [r0, #0]
 8004456:	3301      	adds	r3, #1
 8004458:	428c      	cmp	r4, r1
 800445a:	d1f6      	bne.n	800444a <memchr+0x8>
 800445c:	bd10      	pop	{r4, pc}

0800445e <quorem>:
 800445e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004462:	6903      	ldr	r3, [r0, #16]
 8004464:	690c      	ldr	r4, [r1, #16]
 8004466:	4607      	mov	r7, r0
 8004468:	42a3      	cmp	r3, r4
 800446a:	db7e      	blt.n	800456a <quorem+0x10c>
 800446c:	3c01      	subs	r4, #1
 800446e:	00a3      	lsls	r3, r4, #2
 8004470:	f100 0514 	add.w	r5, r0, #20
 8004474:	f101 0814 	add.w	r8, r1, #20
 8004478:	9300      	str	r3, [sp, #0]
 800447a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800447e:	9301      	str	r3, [sp, #4]
 8004480:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004484:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004488:	3301      	adds	r3, #1
 800448a:	429a      	cmp	r2, r3
 800448c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004490:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004494:	d32e      	bcc.n	80044f4 <quorem+0x96>
 8004496:	f04f 0a00 	mov.w	sl, #0
 800449a:	46c4      	mov	ip, r8
 800449c:	46ae      	mov	lr, r5
 800449e:	46d3      	mov	fp, sl
 80044a0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80044a4:	b298      	uxth	r0, r3
 80044a6:	fb06 a000 	mla	r0, r6, r0, sl
 80044aa:	0c1b      	lsrs	r3, r3, #16
 80044ac:	0c02      	lsrs	r2, r0, #16
 80044ae:	fb06 2303 	mla	r3, r6, r3, r2
 80044b2:	f8de 2000 	ldr.w	r2, [lr]
 80044b6:	b280      	uxth	r0, r0
 80044b8:	b292      	uxth	r2, r2
 80044ba:	1a12      	subs	r2, r2, r0
 80044bc:	445a      	add	r2, fp
 80044be:	f8de 0000 	ldr.w	r0, [lr]
 80044c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80044cc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80044d0:	b292      	uxth	r2, r2
 80044d2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80044d6:	45e1      	cmp	r9, ip
 80044d8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80044dc:	f84e 2b04 	str.w	r2, [lr], #4
 80044e0:	d2de      	bcs.n	80044a0 <quorem+0x42>
 80044e2:	9b00      	ldr	r3, [sp, #0]
 80044e4:	58eb      	ldr	r3, [r5, r3]
 80044e6:	b92b      	cbnz	r3, 80044f4 <quorem+0x96>
 80044e8:	9b01      	ldr	r3, [sp, #4]
 80044ea:	3b04      	subs	r3, #4
 80044ec:	429d      	cmp	r5, r3
 80044ee:	461a      	mov	r2, r3
 80044f0:	d32f      	bcc.n	8004552 <quorem+0xf4>
 80044f2:	613c      	str	r4, [r7, #16]
 80044f4:	4638      	mov	r0, r7
 80044f6:	f001 f97f 	bl	80057f8 <__mcmp>
 80044fa:	2800      	cmp	r0, #0
 80044fc:	db25      	blt.n	800454a <quorem+0xec>
 80044fe:	4629      	mov	r1, r5
 8004500:	2000      	movs	r0, #0
 8004502:	f858 2b04 	ldr.w	r2, [r8], #4
 8004506:	f8d1 c000 	ldr.w	ip, [r1]
 800450a:	fa1f fe82 	uxth.w	lr, r2
 800450e:	fa1f f38c 	uxth.w	r3, ip
 8004512:	eba3 030e 	sub.w	r3, r3, lr
 8004516:	4403      	add	r3, r0
 8004518:	0c12      	lsrs	r2, r2, #16
 800451a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800451e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004522:	b29b      	uxth	r3, r3
 8004524:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004528:	45c1      	cmp	r9, r8
 800452a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800452e:	f841 3b04 	str.w	r3, [r1], #4
 8004532:	d2e6      	bcs.n	8004502 <quorem+0xa4>
 8004534:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004538:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800453c:	b922      	cbnz	r2, 8004548 <quorem+0xea>
 800453e:	3b04      	subs	r3, #4
 8004540:	429d      	cmp	r5, r3
 8004542:	461a      	mov	r2, r3
 8004544:	d30b      	bcc.n	800455e <quorem+0x100>
 8004546:	613c      	str	r4, [r7, #16]
 8004548:	3601      	adds	r6, #1
 800454a:	4630      	mov	r0, r6
 800454c:	b003      	add	sp, #12
 800454e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004552:	6812      	ldr	r2, [r2, #0]
 8004554:	3b04      	subs	r3, #4
 8004556:	2a00      	cmp	r2, #0
 8004558:	d1cb      	bne.n	80044f2 <quorem+0x94>
 800455a:	3c01      	subs	r4, #1
 800455c:	e7c6      	b.n	80044ec <quorem+0x8e>
 800455e:	6812      	ldr	r2, [r2, #0]
 8004560:	3b04      	subs	r3, #4
 8004562:	2a00      	cmp	r2, #0
 8004564:	d1ef      	bne.n	8004546 <quorem+0xe8>
 8004566:	3c01      	subs	r4, #1
 8004568:	e7ea      	b.n	8004540 <quorem+0xe2>
 800456a:	2000      	movs	r0, #0
 800456c:	e7ee      	b.n	800454c <quorem+0xee>
	...

08004570 <_dtoa_r>:
 8004570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004574:	4614      	mov	r4, r2
 8004576:	461d      	mov	r5, r3
 8004578:	69c7      	ldr	r7, [r0, #28]
 800457a:	b097      	sub	sp, #92	@ 0x5c
 800457c:	4681      	mov	r9, r0
 800457e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004582:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004584:	b97f      	cbnz	r7, 80045a6 <_dtoa_r+0x36>
 8004586:	2010      	movs	r0, #16
 8004588:	f000 fe0e 	bl	80051a8 <malloc>
 800458c:	4602      	mov	r2, r0
 800458e:	f8c9 001c 	str.w	r0, [r9, #28]
 8004592:	b920      	cbnz	r0, 800459e <_dtoa_r+0x2e>
 8004594:	21ef      	movs	r1, #239	@ 0xef
 8004596:	4bac      	ldr	r3, [pc, #688]	@ (8004848 <_dtoa_r+0x2d8>)
 8004598:	48ac      	ldr	r0, [pc, #688]	@ (800484c <_dtoa_r+0x2dc>)
 800459a:	f001 fc6d 	bl	8005e78 <__assert_func>
 800459e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80045a2:	6007      	str	r7, [r0, #0]
 80045a4:	60c7      	str	r7, [r0, #12]
 80045a6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80045aa:	6819      	ldr	r1, [r3, #0]
 80045ac:	b159      	cbz	r1, 80045c6 <_dtoa_r+0x56>
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	2301      	movs	r3, #1
 80045b2:	4093      	lsls	r3, r2
 80045b4:	604a      	str	r2, [r1, #4]
 80045b6:	608b      	str	r3, [r1, #8]
 80045b8:	4648      	mov	r0, r9
 80045ba:	f000 feeb 	bl	8005394 <_Bfree>
 80045be:	2200      	movs	r2, #0
 80045c0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80045c4:	601a      	str	r2, [r3, #0]
 80045c6:	1e2b      	subs	r3, r5, #0
 80045c8:	bfaf      	iteee	ge
 80045ca:	2300      	movge	r3, #0
 80045cc:	2201      	movlt	r2, #1
 80045ce:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80045d2:	9307      	strlt	r3, [sp, #28]
 80045d4:	bfa8      	it	ge
 80045d6:	6033      	strge	r3, [r6, #0]
 80045d8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80045dc:	4b9c      	ldr	r3, [pc, #624]	@ (8004850 <_dtoa_r+0x2e0>)
 80045de:	bfb8      	it	lt
 80045e0:	6032      	strlt	r2, [r6, #0]
 80045e2:	ea33 0308 	bics.w	r3, r3, r8
 80045e6:	d112      	bne.n	800460e <_dtoa_r+0x9e>
 80045e8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80045ec:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80045ee:	6013      	str	r3, [r2, #0]
 80045f0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80045f4:	4323      	orrs	r3, r4
 80045f6:	f000 855e 	beq.w	80050b6 <_dtoa_r+0xb46>
 80045fa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80045fc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8004854 <_dtoa_r+0x2e4>
 8004600:	2b00      	cmp	r3, #0
 8004602:	f000 8560 	beq.w	80050c6 <_dtoa_r+0xb56>
 8004606:	f10a 0303 	add.w	r3, sl, #3
 800460a:	f000 bd5a 	b.w	80050c2 <_dtoa_r+0xb52>
 800460e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004612:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004616:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800461a:	2200      	movs	r2, #0
 800461c:	2300      	movs	r3, #0
 800461e:	f7fc f9c3 	bl	80009a8 <__aeabi_dcmpeq>
 8004622:	4607      	mov	r7, r0
 8004624:	b158      	cbz	r0, 800463e <_dtoa_r+0xce>
 8004626:	2301      	movs	r3, #1
 8004628:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800462a:	6013      	str	r3, [r2, #0]
 800462c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800462e:	b113      	cbz	r3, 8004636 <_dtoa_r+0xc6>
 8004630:	4b89      	ldr	r3, [pc, #548]	@ (8004858 <_dtoa_r+0x2e8>)
 8004632:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004634:	6013      	str	r3, [r2, #0]
 8004636:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800485c <_dtoa_r+0x2ec>
 800463a:	f000 bd44 	b.w	80050c6 <_dtoa_r+0xb56>
 800463e:	ab14      	add	r3, sp, #80	@ 0x50
 8004640:	9301      	str	r3, [sp, #4]
 8004642:	ab15      	add	r3, sp, #84	@ 0x54
 8004644:	9300      	str	r3, [sp, #0]
 8004646:	4648      	mov	r0, r9
 8004648:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800464c:	f001 f984 	bl	8005958 <__d2b>
 8004650:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004654:	9003      	str	r0, [sp, #12]
 8004656:	2e00      	cmp	r6, #0
 8004658:	d078      	beq.n	800474c <_dtoa_r+0x1dc>
 800465a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800465e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004660:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004664:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004668:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800466c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004670:	9712      	str	r7, [sp, #72]	@ 0x48
 8004672:	4619      	mov	r1, r3
 8004674:	2200      	movs	r2, #0
 8004676:	4b7a      	ldr	r3, [pc, #488]	@ (8004860 <_dtoa_r+0x2f0>)
 8004678:	f7fb fd76 	bl	8000168 <__aeabi_dsub>
 800467c:	a36c      	add	r3, pc, #432	@ (adr r3, 8004830 <_dtoa_r+0x2c0>)
 800467e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004682:	f7fb ff29 	bl	80004d8 <__aeabi_dmul>
 8004686:	a36c      	add	r3, pc, #432	@ (adr r3, 8004838 <_dtoa_r+0x2c8>)
 8004688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468c:	f7fb fd6e 	bl	800016c <__adddf3>
 8004690:	4604      	mov	r4, r0
 8004692:	4630      	mov	r0, r6
 8004694:	460d      	mov	r5, r1
 8004696:	f7fb feb5 	bl	8000404 <__aeabi_i2d>
 800469a:	a369      	add	r3, pc, #420	@ (adr r3, 8004840 <_dtoa_r+0x2d0>)
 800469c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a0:	f7fb ff1a 	bl	80004d8 <__aeabi_dmul>
 80046a4:	4602      	mov	r2, r0
 80046a6:	460b      	mov	r3, r1
 80046a8:	4620      	mov	r0, r4
 80046aa:	4629      	mov	r1, r5
 80046ac:	f7fb fd5e 	bl	800016c <__adddf3>
 80046b0:	4604      	mov	r4, r0
 80046b2:	460d      	mov	r5, r1
 80046b4:	f7fc f9c0 	bl	8000a38 <__aeabi_d2iz>
 80046b8:	2200      	movs	r2, #0
 80046ba:	4607      	mov	r7, r0
 80046bc:	2300      	movs	r3, #0
 80046be:	4620      	mov	r0, r4
 80046c0:	4629      	mov	r1, r5
 80046c2:	f7fc f97b 	bl	80009bc <__aeabi_dcmplt>
 80046c6:	b140      	cbz	r0, 80046da <_dtoa_r+0x16a>
 80046c8:	4638      	mov	r0, r7
 80046ca:	f7fb fe9b 	bl	8000404 <__aeabi_i2d>
 80046ce:	4622      	mov	r2, r4
 80046d0:	462b      	mov	r3, r5
 80046d2:	f7fc f969 	bl	80009a8 <__aeabi_dcmpeq>
 80046d6:	b900      	cbnz	r0, 80046da <_dtoa_r+0x16a>
 80046d8:	3f01      	subs	r7, #1
 80046da:	2f16      	cmp	r7, #22
 80046dc:	d854      	bhi.n	8004788 <_dtoa_r+0x218>
 80046de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80046e2:	4b60      	ldr	r3, [pc, #384]	@ (8004864 <_dtoa_r+0x2f4>)
 80046e4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80046e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ec:	f7fc f966 	bl	80009bc <__aeabi_dcmplt>
 80046f0:	2800      	cmp	r0, #0
 80046f2:	d04b      	beq.n	800478c <_dtoa_r+0x21c>
 80046f4:	2300      	movs	r3, #0
 80046f6:	3f01      	subs	r7, #1
 80046f8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80046fa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80046fc:	1b9b      	subs	r3, r3, r6
 80046fe:	1e5a      	subs	r2, r3, #1
 8004700:	bf49      	itett	mi
 8004702:	f1c3 0301 	rsbmi	r3, r3, #1
 8004706:	2300      	movpl	r3, #0
 8004708:	9304      	strmi	r3, [sp, #16]
 800470a:	2300      	movmi	r3, #0
 800470c:	9209      	str	r2, [sp, #36]	@ 0x24
 800470e:	bf54      	ite	pl
 8004710:	9304      	strpl	r3, [sp, #16]
 8004712:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004714:	2f00      	cmp	r7, #0
 8004716:	db3b      	blt.n	8004790 <_dtoa_r+0x220>
 8004718:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800471a:	970e      	str	r7, [sp, #56]	@ 0x38
 800471c:	443b      	add	r3, r7
 800471e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004720:	2300      	movs	r3, #0
 8004722:	930a      	str	r3, [sp, #40]	@ 0x28
 8004724:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004726:	2b09      	cmp	r3, #9
 8004728:	d865      	bhi.n	80047f6 <_dtoa_r+0x286>
 800472a:	2b05      	cmp	r3, #5
 800472c:	bfc4      	itt	gt
 800472e:	3b04      	subgt	r3, #4
 8004730:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004732:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004734:	bfc8      	it	gt
 8004736:	2400      	movgt	r4, #0
 8004738:	f1a3 0302 	sub.w	r3, r3, #2
 800473c:	bfd8      	it	le
 800473e:	2401      	movle	r4, #1
 8004740:	2b03      	cmp	r3, #3
 8004742:	d864      	bhi.n	800480e <_dtoa_r+0x29e>
 8004744:	e8df f003 	tbb	[pc, r3]
 8004748:	2c385553 	.word	0x2c385553
 800474c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004750:	441e      	add	r6, r3
 8004752:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004756:	2b20      	cmp	r3, #32
 8004758:	bfc1      	itttt	gt
 800475a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800475e:	fa08 f803 	lslgt.w	r8, r8, r3
 8004762:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004766:	fa24 f303 	lsrgt.w	r3, r4, r3
 800476a:	bfd6      	itet	le
 800476c:	f1c3 0320 	rsble	r3, r3, #32
 8004770:	ea48 0003 	orrgt.w	r0, r8, r3
 8004774:	fa04 f003 	lslle.w	r0, r4, r3
 8004778:	f7fb fe34 	bl	80003e4 <__aeabi_ui2d>
 800477c:	2201      	movs	r2, #1
 800477e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004782:	3e01      	subs	r6, #1
 8004784:	9212      	str	r2, [sp, #72]	@ 0x48
 8004786:	e774      	b.n	8004672 <_dtoa_r+0x102>
 8004788:	2301      	movs	r3, #1
 800478a:	e7b5      	b.n	80046f8 <_dtoa_r+0x188>
 800478c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800478e:	e7b4      	b.n	80046fa <_dtoa_r+0x18a>
 8004790:	9b04      	ldr	r3, [sp, #16]
 8004792:	1bdb      	subs	r3, r3, r7
 8004794:	9304      	str	r3, [sp, #16]
 8004796:	427b      	negs	r3, r7
 8004798:	930a      	str	r3, [sp, #40]	@ 0x28
 800479a:	2300      	movs	r3, #0
 800479c:	930e      	str	r3, [sp, #56]	@ 0x38
 800479e:	e7c1      	b.n	8004724 <_dtoa_r+0x1b4>
 80047a0:	2301      	movs	r3, #1
 80047a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80047a4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80047a6:	eb07 0b03 	add.w	fp, r7, r3
 80047aa:	f10b 0301 	add.w	r3, fp, #1
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	9308      	str	r3, [sp, #32]
 80047b2:	bfb8      	it	lt
 80047b4:	2301      	movlt	r3, #1
 80047b6:	e006      	b.n	80047c6 <_dtoa_r+0x256>
 80047b8:	2301      	movs	r3, #1
 80047ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80047bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80047be:	2b00      	cmp	r3, #0
 80047c0:	dd28      	ble.n	8004814 <_dtoa_r+0x2a4>
 80047c2:	469b      	mov	fp, r3
 80047c4:	9308      	str	r3, [sp, #32]
 80047c6:	2100      	movs	r1, #0
 80047c8:	2204      	movs	r2, #4
 80047ca:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80047ce:	f102 0514 	add.w	r5, r2, #20
 80047d2:	429d      	cmp	r5, r3
 80047d4:	d926      	bls.n	8004824 <_dtoa_r+0x2b4>
 80047d6:	6041      	str	r1, [r0, #4]
 80047d8:	4648      	mov	r0, r9
 80047da:	f000 fd9b 	bl	8005314 <_Balloc>
 80047de:	4682      	mov	sl, r0
 80047e0:	2800      	cmp	r0, #0
 80047e2:	d143      	bne.n	800486c <_dtoa_r+0x2fc>
 80047e4:	4602      	mov	r2, r0
 80047e6:	f240 11af 	movw	r1, #431	@ 0x1af
 80047ea:	4b1f      	ldr	r3, [pc, #124]	@ (8004868 <_dtoa_r+0x2f8>)
 80047ec:	e6d4      	b.n	8004598 <_dtoa_r+0x28>
 80047ee:	2300      	movs	r3, #0
 80047f0:	e7e3      	b.n	80047ba <_dtoa_r+0x24a>
 80047f2:	2300      	movs	r3, #0
 80047f4:	e7d5      	b.n	80047a2 <_dtoa_r+0x232>
 80047f6:	2401      	movs	r4, #1
 80047f8:	2300      	movs	r3, #0
 80047fa:	940b      	str	r4, [sp, #44]	@ 0x2c
 80047fc:	9320      	str	r3, [sp, #128]	@ 0x80
 80047fe:	f04f 3bff 	mov.w	fp, #4294967295
 8004802:	2200      	movs	r2, #0
 8004804:	2312      	movs	r3, #18
 8004806:	f8cd b020 	str.w	fp, [sp, #32]
 800480a:	9221      	str	r2, [sp, #132]	@ 0x84
 800480c:	e7db      	b.n	80047c6 <_dtoa_r+0x256>
 800480e:	2301      	movs	r3, #1
 8004810:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004812:	e7f4      	b.n	80047fe <_dtoa_r+0x28e>
 8004814:	f04f 0b01 	mov.w	fp, #1
 8004818:	465b      	mov	r3, fp
 800481a:	f8cd b020 	str.w	fp, [sp, #32]
 800481e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8004822:	e7d0      	b.n	80047c6 <_dtoa_r+0x256>
 8004824:	3101      	adds	r1, #1
 8004826:	0052      	lsls	r2, r2, #1
 8004828:	e7d1      	b.n	80047ce <_dtoa_r+0x25e>
 800482a:	bf00      	nop
 800482c:	f3af 8000 	nop.w
 8004830:	636f4361 	.word	0x636f4361
 8004834:	3fd287a7 	.word	0x3fd287a7
 8004838:	8b60c8b3 	.word	0x8b60c8b3
 800483c:	3fc68a28 	.word	0x3fc68a28
 8004840:	509f79fb 	.word	0x509f79fb
 8004844:	3fd34413 	.word	0x3fd34413
 8004848:	08006587 	.word	0x08006587
 800484c:	0800659e 	.word	0x0800659e
 8004850:	7ff00000 	.word	0x7ff00000
 8004854:	08006583 	.word	0x08006583
 8004858:	08006557 	.word	0x08006557
 800485c:	08006556 	.word	0x08006556
 8004860:	3ff80000 	.word	0x3ff80000
 8004864:	080066f0 	.word	0x080066f0
 8004868:	080065f6 	.word	0x080065f6
 800486c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004870:	6018      	str	r0, [r3, #0]
 8004872:	9b08      	ldr	r3, [sp, #32]
 8004874:	2b0e      	cmp	r3, #14
 8004876:	f200 80a1 	bhi.w	80049bc <_dtoa_r+0x44c>
 800487a:	2c00      	cmp	r4, #0
 800487c:	f000 809e 	beq.w	80049bc <_dtoa_r+0x44c>
 8004880:	2f00      	cmp	r7, #0
 8004882:	dd33      	ble.n	80048ec <_dtoa_r+0x37c>
 8004884:	4b9c      	ldr	r3, [pc, #624]	@ (8004af8 <_dtoa_r+0x588>)
 8004886:	f007 020f 	and.w	r2, r7, #15
 800488a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800488e:	05f8      	lsls	r0, r7, #23
 8004890:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004894:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8004898:	ea4f 1427 	mov.w	r4, r7, asr #4
 800489c:	d516      	bpl.n	80048cc <_dtoa_r+0x35c>
 800489e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80048a2:	4b96      	ldr	r3, [pc, #600]	@ (8004afc <_dtoa_r+0x58c>)
 80048a4:	2603      	movs	r6, #3
 80048a6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80048aa:	f7fb ff3f 	bl	800072c <__aeabi_ddiv>
 80048ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80048b2:	f004 040f 	and.w	r4, r4, #15
 80048b6:	4d91      	ldr	r5, [pc, #580]	@ (8004afc <_dtoa_r+0x58c>)
 80048b8:	b954      	cbnz	r4, 80048d0 <_dtoa_r+0x360>
 80048ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80048be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048c2:	f7fb ff33 	bl	800072c <__aeabi_ddiv>
 80048c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80048ca:	e028      	b.n	800491e <_dtoa_r+0x3ae>
 80048cc:	2602      	movs	r6, #2
 80048ce:	e7f2      	b.n	80048b6 <_dtoa_r+0x346>
 80048d0:	07e1      	lsls	r1, r4, #31
 80048d2:	d508      	bpl.n	80048e6 <_dtoa_r+0x376>
 80048d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80048d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80048dc:	f7fb fdfc 	bl	80004d8 <__aeabi_dmul>
 80048e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80048e4:	3601      	adds	r6, #1
 80048e6:	1064      	asrs	r4, r4, #1
 80048e8:	3508      	adds	r5, #8
 80048ea:	e7e5      	b.n	80048b8 <_dtoa_r+0x348>
 80048ec:	f000 80af 	beq.w	8004a4e <_dtoa_r+0x4de>
 80048f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80048f4:	427c      	negs	r4, r7
 80048f6:	4b80      	ldr	r3, [pc, #512]	@ (8004af8 <_dtoa_r+0x588>)
 80048f8:	f004 020f 	and.w	r2, r4, #15
 80048fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004904:	f7fb fde8 	bl	80004d8 <__aeabi_dmul>
 8004908:	2602      	movs	r6, #2
 800490a:	2300      	movs	r3, #0
 800490c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004910:	4d7a      	ldr	r5, [pc, #488]	@ (8004afc <_dtoa_r+0x58c>)
 8004912:	1124      	asrs	r4, r4, #4
 8004914:	2c00      	cmp	r4, #0
 8004916:	f040 808f 	bne.w	8004a38 <_dtoa_r+0x4c8>
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1d3      	bne.n	80048c6 <_dtoa_r+0x356>
 800491e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8004922:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004924:	2b00      	cmp	r3, #0
 8004926:	f000 8094 	beq.w	8004a52 <_dtoa_r+0x4e2>
 800492a:	2200      	movs	r2, #0
 800492c:	4620      	mov	r0, r4
 800492e:	4629      	mov	r1, r5
 8004930:	4b73      	ldr	r3, [pc, #460]	@ (8004b00 <_dtoa_r+0x590>)
 8004932:	f7fc f843 	bl	80009bc <__aeabi_dcmplt>
 8004936:	2800      	cmp	r0, #0
 8004938:	f000 808b 	beq.w	8004a52 <_dtoa_r+0x4e2>
 800493c:	9b08      	ldr	r3, [sp, #32]
 800493e:	2b00      	cmp	r3, #0
 8004940:	f000 8087 	beq.w	8004a52 <_dtoa_r+0x4e2>
 8004944:	f1bb 0f00 	cmp.w	fp, #0
 8004948:	dd34      	ble.n	80049b4 <_dtoa_r+0x444>
 800494a:	4620      	mov	r0, r4
 800494c:	2200      	movs	r2, #0
 800494e:	4629      	mov	r1, r5
 8004950:	4b6c      	ldr	r3, [pc, #432]	@ (8004b04 <_dtoa_r+0x594>)
 8004952:	f7fb fdc1 	bl	80004d8 <__aeabi_dmul>
 8004956:	465c      	mov	r4, fp
 8004958:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800495c:	f107 38ff 	add.w	r8, r7, #4294967295
 8004960:	3601      	adds	r6, #1
 8004962:	4630      	mov	r0, r6
 8004964:	f7fb fd4e 	bl	8000404 <__aeabi_i2d>
 8004968:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800496c:	f7fb fdb4 	bl	80004d8 <__aeabi_dmul>
 8004970:	2200      	movs	r2, #0
 8004972:	4b65      	ldr	r3, [pc, #404]	@ (8004b08 <_dtoa_r+0x598>)
 8004974:	f7fb fbfa 	bl	800016c <__adddf3>
 8004978:	4605      	mov	r5, r0
 800497a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800497e:	2c00      	cmp	r4, #0
 8004980:	d16a      	bne.n	8004a58 <_dtoa_r+0x4e8>
 8004982:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004986:	2200      	movs	r2, #0
 8004988:	4b60      	ldr	r3, [pc, #384]	@ (8004b0c <_dtoa_r+0x59c>)
 800498a:	f7fb fbed 	bl	8000168 <__aeabi_dsub>
 800498e:	4602      	mov	r2, r0
 8004990:	460b      	mov	r3, r1
 8004992:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004996:	462a      	mov	r2, r5
 8004998:	4633      	mov	r3, r6
 800499a:	f7fc f82d 	bl	80009f8 <__aeabi_dcmpgt>
 800499e:	2800      	cmp	r0, #0
 80049a0:	f040 8298 	bne.w	8004ed4 <_dtoa_r+0x964>
 80049a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80049a8:	462a      	mov	r2, r5
 80049aa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80049ae:	f7fc f805 	bl	80009bc <__aeabi_dcmplt>
 80049b2:	bb38      	cbnz	r0, 8004a04 <_dtoa_r+0x494>
 80049b4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80049b8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80049bc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f2c0 8157 	blt.w	8004c72 <_dtoa_r+0x702>
 80049c4:	2f0e      	cmp	r7, #14
 80049c6:	f300 8154 	bgt.w	8004c72 <_dtoa_r+0x702>
 80049ca:	4b4b      	ldr	r3, [pc, #300]	@ (8004af8 <_dtoa_r+0x588>)
 80049cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80049d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80049d4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80049d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f280 80e5 	bge.w	8004baa <_dtoa_r+0x63a>
 80049e0:	9b08      	ldr	r3, [sp, #32]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f300 80e1 	bgt.w	8004baa <_dtoa_r+0x63a>
 80049e8:	d10c      	bne.n	8004a04 <_dtoa_r+0x494>
 80049ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80049ee:	2200      	movs	r2, #0
 80049f0:	4b46      	ldr	r3, [pc, #280]	@ (8004b0c <_dtoa_r+0x59c>)
 80049f2:	f7fb fd71 	bl	80004d8 <__aeabi_dmul>
 80049f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80049fa:	f7fb fff3 	bl	80009e4 <__aeabi_dcmpge>
 80049fe:	2800      	cmp	r0, #0
 8004a00:	f000 8266 	beq.w	8004ed0 <_dtoa_r+0x960>
 8004a04:	2400      	movs	r4, #0
 8004a06:	4625      	mov	r5, r4
 8004a08:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004a0a:	4656      	mov	r6, sl
 8004a0c:	ea6f 0803 	mvn.w	r8, r3
 8004a10:	2700      	movs	r7, #0
 8004a12:	4621      	mov	r1, r4
 8004a14:	4648      	mov	r0, r9
 8004a16:	f000 fcbd 	bl	8005394 <_Bfree>
 8004a1a:	2d00      	cmp	r5, #0
 8004a1c:	f000 80bd 	beq.w	8004b9a <_dtoa_r+0x62a>
 8004a20:	b12f      	cbz	r7, 8004a2e <_dtoa_r+0x4be>
 8004a22:	42af      	cmp	r7, r5
 8004a24:	d003      	beq.n	8004a2e <_dtoa_r+0x4be>
 8004a26:	4639      	mov	r1, r7
 8004a28:	4648      	mov	r0, r9
 8004a2a:	f000 fcb3 	bl	8005394 <_Bfree>
 8004a2e:	4629      	mov	r1, r5
 8004a30:	4648      	mov	r0, r9
 8004a32:	f000 fcaf 	bl	8005394 <_Bfree>
 8004a36:	e0b0      	b.n	8004b9a <_dtoa_r+0x62a>
 8004a38:	07e2      	lsls	r2, r4, #31
 8004a3a:	d505      	bpl.n	8004a48 <_dtoa_r+0x4d8>
 8004a3c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004a40:	f7fb fd4a 	bl	80004d8 <__aeabi_dmul>
 8004a44:	2301      	movs	r3, #1
 8004a46:	3601      	adds	r6, #1
 8004a48:	1064      	asrs	r4, r4, #1
 8004a4a:	3508      	adds	r5, #8
 8004a4c:	e762      	b.n	8004914 <_dtoa_r+0x3a4>
 8004a4e:	2602      	movs	r6, #2
 8004a50:	e765      	b.n	800491e <_dtoa_r+0x3ae>
 8004a52:	46b8      	mov	r8, r7
 8004a54:	9c08      	ldr	r4, [sp, #32]
 8004a56:	e784      	b.n	8004962 <_dtoa_r+0x3f2>
 8004a58:	4b27      	ldr	r3, [pc, #156]	@ (8004af8 <_dtoa_r+0x588>)
 8004a5a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004a5c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004a60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004a64:	4454      	add	r4, sl
 8004a66:	2900      	cmp	r1, #0
 8004a68:	d054      	beq.n	8004b14 <_dtoa_r+0x5a4>
 8004a6a:	2000      	movs	r0, #0
 8004a6c:	4928      	ldr	r1, [pc, #160]	@ (8004b10 <_dtoa_r+0x5a0>)
 8004a6e:	f7fb fe5d 	bl	800072c <__aeabi_ddiv>
 8004a72:	4633      	mov	r3, r6
 8004a74:	462a      	mov	r2, r5
 8004a76:	f7fb fb77 	bl	8000168 <__aeabi_dsub>
 8004a7a:	4656      	mov	r6, sl
 8004a7c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004a80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a84:	f7fb ffd8 	bl	8000a38 <__aeabi_d2iz>
 8004a88:	4605      	mov	r5, r0
 8004a8a:	f7fb fcbb 	bl	8000404 <__aeabi_i2d>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	460b      	mov	r3, r1
 8004a92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a96:	f7fb fb67 	bl	8000168 <__aeabi_dsub>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	3530      	adds	r5, #48	@ 0x30
 8004aa0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004aa4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004aa8:	f806 5b01 	strb.w	r5, [r6], #1
 8004aac:	f7fb ff86 	bl	80009bc <__aeabi_dcmplt>
 8004ab0:	2800      	cmp	r0, #0
 8004ab2:	d172      	bne.n	8004b9a <_dtoa_r+0x62a>
 8004ab4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004ab8:	2000      	movs	r0, #0
 8004aba:	4911      	ldr	r1, [pc, #68]	@ (8004b00 <_dtoa_r+0x590>)
 8004abc:	f7fb fb54 	bl	8000168 <__aeabi_dsub>
 8004ac0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004ac4:	f7fb ff7a 	bl	80009bc <__aeabi_dcmplt>
 8004ac8:	2800      	cmp	r0, #0
 8004aca:	f040 80b4 	bne.w	8004c36 <_dtoa_r+0x6c6>
 8004ace:	42a6      	cmp	r6, r4
 8004ad0:	f43f af70 	beq.w	80049b4 <_dtoa_r+0x444>
 8004ad4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004ad8:	2200      	movs	r2, #0
 8004ada:	4b0a      	ldr	r3, [pc, #40]	@ (8004b04 <_dtoa_r+0x594>)
 8004adc:	f7fb fcfc 	bl	80004d8 <__aeabi_dmul>
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004ae6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004aea:	4b06      	ldr	r3, [pc, #24]	@ (8004b04 <_dtoa_r+0x594>)
 8004aec:	f7fb fcf4 	bl	80004d8 <__aeabi_dmul>
 8004af0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004af4:	e7c4      	b.n	8004a80 <_dtoa_r+0x510>
 8004af6:	bf00      	nop
 8004af8:	080066f0 	.word	0x080066f0
 8004afc:	080066c8 	.word	0x080066c8
 8004b00:	3ff00000 	.word	0x3ff00000
 8004b04:	40240000 	.word	0x40240000
 8004b08:	401c0000 	.word	0x401c0000
 8004b0c:	40140000 	.word	0x40140000
 8004b10:	3fe00000 	.word	0x3fe00000
 8004b14:	4631      	mov	r1, r6
 8004b16:	4628      	mov	r0, r5
 8004b18:	f7fb fcde 	bl	80004d8 <__aeabi_dmul>
 8004b1c:	4656      	mov	r6, sl
 8004b1e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004b22:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004b24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b28:	f7fb ff86 	bl	8000a38 <__aeabi_d2iz>
 8004b2c:	4605      	mov	r5, r0
 8004b2e:	f7fb fc69 	bl	8000404 <__aeabi_i2d>
 8004b32:	4602      	mov	r2, r0
 8004b34:	460b      	mov	r3, r1
 8004b36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b3a:	f7fb fb15 	bl	8000168 <__aeabi_dsub>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	460b      	mov	r3, r1
 8004b42:	3530      	adds	r5, #48	@ 0x30
 8004b44:	f806 5b01 	strb.w	r5, [r6], #1
 8004b48:	42a6      	cmp	r6, r4
 8004b4a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004b4e:	f04f 0200 	mov.w	r2, #0
 8004b52:	d124      	bne.n	8004b9e <_dtoa_r+0x62e>
 8004b54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004b58:	4bae      	ldr	r3, [pc, #696]	@ (8004e14 <_dtoa_r+0x8a4>)
 8004b5a:	f7fb fb07 	bl	800016c <__adddf3>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	460b      	mov	r3, r1
 8004b62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b66:	f7fb ff47 	bl	80009f8 <__aeabi_dcmpgt>
 8004b6a:	2800      	cmp	r0, #0
 8004b6c:	d163      	bne.n	8004c36 <_dtoa_r+0x6c6>
 8004b6e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004b72:	2000      	movs	r0, #0
 8004b74:	49a7      	ldr	r1, [pc, #668]	@ (8004e14 <_dtoa_r+0x8a4>)
 8004b76:	f7fb faf7 	bl	8000168 <__aeabi_dsub>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b82:	f7fb ff1b 	bl	80009bc <__aeabi_dcmplt>
 8004b86:	2800      	cmp	r0, #0
 8004b88:	f43f af14 	beq.w	80049b4 <_dtoa_r+0x444>
 8004b8c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004b8e:	1e73      	subs	r3, r6, #1
 8004b90:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004b92:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004b96:	2b30      	cmp	r3, #48	@ 0x30
 8004b98:	d0f8      	beq.n	8004b8c <_dtoa_r+0x61c>
 8004b9a:	4647      	mov	r7, r8
 8004b9c:	e03b      	b.n	8004c16 <_dtoa_r+0x6a6>
 8004b9e:	4b9e      	ldr	r3, [pc, #632]	@ (8004e18 <_dtoa_r+0x8a8>)
 8004ba0:	f7fb fc9a 	bl	80004d8 <__aeabi_dmul>
 8004ba4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004ba8:	e7bc      	b.n	8004b24 <_dtoa_r+0x5b4>
 8004baa:	4656      	mov	r6, sl
 8004bac:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8004bb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004bb4:	4620      	mov	r0, r4
 8004bb6:	4629      	mov	r1, r5
 8004bb8:	f7fb fdb8 	bl	800072c <__aeabi_ddiv>
 8004bbc:	f7fb ff3c 	bl	8000a38 <__aeabi_d2iz>
 8004bc0:	4680      	mov	r8, r0
 8004bc2:	f7fb fc1f 	bl	8000404 <__aeabi_i2d>
 8004bc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004bca:	f7fb fc85 	bl	80004d8 <__aeabi_dmul>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	4620      	mov	r0, r4
 8004bd4:	4629      	mov	r1, r5
 8004bd6:	f7fb fac7 	bl	8000168 <__aeabi_dsub>
 8004bda:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004bde:	9d08      	ldr	r5, [sp, #32]
 8004be0:	f806 4b01 	strb.w	r4, [r6], #1
 8004be4:	eba6 040a 	sub.w	r4, r6, sl
 8004be8:	42a5      	cmp	r5, r4
 8004bea:	4602      	mov	r2, r0
 8004bec:	460b      	mov	r3, r1
 8004bee:	d133      	bne.n	8004c58 <_dtoa_r+0x6e8>
 8004bf0:	f7fb fabc 	bl	800016c <__adddf3>
 8004bf4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004bf8:	4604      	mov	r4, r0
 8004bfa:	460d      	mov	r5, r1
 8004bfc:	f7fb fefc 	bl	80009f8 <__aeabi_dcmpgt>
 8004c00:	b9c0      	cbnz	r0, 8004c34 <_dtoa_r+0x6c4>
 8004c02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c06:	4620      	mov	r0, r4
 8004c08:	4629      	mov	r1, r5
 8004c0a:	f7fb fecd 	bl	80009a8 <__aeabi_dcmpeq>
 8004c0e:	b110      	cbz	r0, 8004c16 <_dtoa_r+0x6a6>
 8004c10:	f018 0f01 	tst.w	r8, #1
 8004c14:	d10e      	bne.n	8004c34 <_dtoa_r+0x6c4>
 8004c16:	4648      	mov	r0, r9
 8004c18:	9903      	ldr	r1, [sp, #12]
 8004c1a:	f000 fbbb 	bl	8005394 <_Bfree>
 8004c1e:	2300      	movs	r3, #0
 8004c20:	7033      	strb	r3, [r6, #0]
 8004c22:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004c24:	3701      	adds	r7, #1
 8004c26:	601f      	str	r7, [r3, #0]
 8004c28:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f000 824b 	beq.w	80050c6 <_dtoa_r+0xb56>
 8004c30:	601e      	str	r6, [r3, #0]
 8004c32:	e248      	b.n	80050c6 <_dtoa_r+0xb56>
 8004c34:	46b8      	mov	r8, r7
 8004c36:	4633      	mov	r3, r6
 8004c38:	461e      	mov	r6, r3
 8004c3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004c3e:	2a39      	cmp	r2, #57	@ 0x39
 8004c40:	d106      	bne.n	8004c50 <_dtoa_r+0x6e0>
 8004c42:	459a      	cmp	sl, r3
 8004c44:	d1f8      	bne.n	8004c38 <_dtoa_r+0x6c8>
 8004c46:	2230      	movs	r2, #48	@ 0x30
 8004c48:	f108 0801 	add.w	r8, r8, #1
 8004c4c:	f88a 2000 	strb.w	r2, [sl]
 8004c50:	781a      	ldrb	r2, [r3, #0]
 8004c52:	3201      	adds	r2, #1
 8004c54:	701a      	strb	r2, [r3, #0]
 8004c56:	e7a0      	b.n	8004b9a <_dtoa_r+0x62a>
 8004c58:	2200      	movs	r2, #0
 8004c5a:	4b6f      	ldr	r3, [pc, #444]	@ (8004e18 <_dtoa_r+0x8a8>)
 8004c5c:	f7fb fc3c 	bl	80004d8 <__aeabi_dmul>
 8004c60:	2200      	movs	r2, #0
 8004c62:	2300      	movs	r3, #0
 8004c64:	4604      	mov	r4, r0
 8004c66:	460d      	mov	r5, r1
 8004c68:	f7fb fe9e 	bl	80009a8 <__aeabi_dcmpeq>
 8004c6c:	2800      	cmp	r0, #0
 8004c6e:	d09f      	beq.n	8004bb0 <_dtoa_r+0x640>
 8004c70:	e7d1      	b.n	8004c16 <_dtoa_r+0x6a6>
 8004c72:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004c74:	2a00      	cmp	r2, #0
 8004c76:	f000 80ea 	beq.w	8004e4e <_dtoa_r+0x8de>
 8004c7a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004c7c:	2a01      	cmp	r2, #1
 8004c7e:	f300 80cd 	bgt.w	8004e1c <_dtoa_r+0x8ac>
 8004c82:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004c84:	2a00      	cmp	r2, #0
 8004c86:	f000 80c1 	beq.w	8004e0c <_dtoa_r+0x89c>
 8004c8a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004c8e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004c90:	9e04      	ldr	r6, [sp, #16]
 8004c92:	9a04      	ldr	r2, [sp, #16]
 8004c94:	2101      	movs	r1, #1
 8004c96:	441a      	add	r2, r3
 8004c98:	9204      	str	r2, [sp, #16]
 8004c9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c9c:	4648      	mov	r0, r9
 8004c9e:	441a      	add	r2, r3
 8004ca0:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ca2:	f000 fc2b 	bl	80054fc <__i2b>
 8004ca6:	4605      	mov	r5, r0
 8004ca8:	b166      	cbz	r6, 8004cc4 <_dtoa_r+0x754>
 8004caa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	dd09      	ble.n	8004cc4 <_dtoa_r+0x754>
 8004cb0:	42b3      	cmp	r3, r6
 8004cb2:	bfa8      	it	ge
 8004cb4:	4633      	movge	r3, r6
 8004cb6:	9a04      	ldr	r2, [sp, #16]
 8004cb8:	1af6      	subs	r6, r6, r3
 8004cba:	1ad2      	subs	r2, r2, r3
 8004cbc:	9204      	str	r2, [sp, #16]
 8004cbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004cc6:	b30b      	cbz	r3, 8004d0c <_dtoa_r+0x79c>
 8004cc8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f000 80c6 	beq.w	8004e5c <_dtoa_r+0x8ec>
 8004cd0:	2c00      	cmp	r4, #0
 8004cd2:	f000 80c0 	beq.w	8004e56 <_dtoa_r+0x8e6>
 8004cd6:	4629      	mov	r1, r5
 8004cd8:	4622      	mov	r2, r4
 8004cda:	4648      	mov	r0, r9
 8004cdc:	f000 fcc6 	bl	800566c <__pow5mult>
 8004ce0:	9a03      	ldr	r2, [sp, #12]
 8004ce2:	4601      	mov	r1, r0
 8004ce4:	4605      	mov	r5, r0
 8004ce6:	4648      	mov	r0, r9
 8004ce8:	f000 fc1e 	bl	8005528 <__multiply>
 8004cec:	9903      	ldr	r1, [sp, #12]
 8004cee:	4680      	mov	r8, r0
 8004cf0:	4648      	mov	r0, r9
 8004cf2:	f000 fb4f 	bl	8005394 <_Bfree>
 8004cf6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004cf8:	1b1b      	subs	r3, r3, r4
 8004cfa:	930a      	str	r3, [sp, #40]	@ 0x28
 8004cfc:	f000 80b1 	beq.w	8004e62 <_dtoa_r+0x8f2>
 8004d00:	4641      	mov	r1, r8
 8004d02:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004d04:	4648      	mov	r0, r9
 8004d06:	f000 fcb1 	bl	800566c <__pow5mult>
 8004d0a:	9003      	str	r0, [sp, #12]
 8004d0c:	2101      	movs	r1, #1
 8004d0e:	4648      	mov	r0, r9
 8004d10:	f000 fbf4 	bl	80054fc <__i2b>
 8004d14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004d16:	4604      	mov	r4, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f000 81d8 	beq.w	80050ce <_dtoa_r+0xb5e>
 8004d1e:	461a      	mov	r2, r3
 8004d20:	4601      	mov	r1, r0
 8004d22:	4648      	mov	r0, r9
 8004d24:	f000 fca2 	bl	800566c <__pow5mult>
 8004d28:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004d2a:	4604      	mov	r4, r0
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	f300 809f 	bgt.w	8004e70 <_dtoa_r+0x900>
 8004d32:	9b06      	ldr	r3, [sp, #24]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f040 8097 	bne.w	8004e68 <_dtoa_r+0x8f8>
 8004d3a:	9b07      	ldr	r3, [sp, #28]
 8004d3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f040 8093 	bne.w	8004e6c <_dtoa_r+0x8fc>
 8004d46:	9b07      	ldr	r3, [sp, #28]
 8004d48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004d4c:	0d1b      	lsrs	r3, r3, #20
 8004d4e:	051b      	lsls	r3, r3, #20
 8004d50:	b133      	cbz	r3, 8004d60 <_dtoa_r+0x7f0>
 8004d52:	9b04      	ldr	r3, [sp, #16]
 8004d54:	3301      	adds	r3, #1
 8004d56:	9304      	str	r3, [sp, #16]
 8004d58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d5e:	2301      	movs	r3, #1
 8004d60:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	f000 81b8 	beq.w	80050da <_dtoa_r+0xb6a>
 8004d6a:	6923      	ldr	r3, [r4, #16]
 8004d6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004d70:	6918      	ldr	r0, [r3, #16]
 8004d72:	f000 fb77 	bl	8005464 <__hi0bits>
 8004d76:	f1c0 0020 	rsb	r0, r0, #32
 8004d7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d7c:	4418      	add	r0, r3
 8004d7e:	f010 001f 	ands.w	r0, r0, #31
 8004d82:	f000 8082 	beq.w	8004e8a <_dtoa_r+0x91a>
 8004d86:	f1c0 0320 	rsb	r3, r0, #32
 8004d8a:	2b04      	cmp	r3, #4
 8004d8c:	dd73      	ble.n	8004e76 <_dtoa_r+0x906>
 8004d8e:	9b04      	ldr	r3, [sp, #16]
 8004d90:	f1c0 001c 	rsb	r0, r0, #28
 8004d94:	4403      	add	r3, r0
 8004d96:	9304      	str	r3, [sp, #16]
 8004d98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d9a:	4406      	add	r6, r0
 8004d9c:	4403      	add	r3, r0
 8004d9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004da0:	9b04      	ldr	r3, [sp, #16]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	dd05      	ble.n	8004db2 <_dtoa_r+0x842>
 8004da6:	461a      	mov	r2, r3
 8004da8:	4648      	mov	r0, r9
 8004daa:	9903      	ldr	r1, [sp, #12]
 8004dac:	f000 fcb8 	bl	8005720 <__lshift>
 8004db0:	9003      	str	r0, [sp, #12]
 8004db2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	dd05      	ble.n	8004dc4 <_dtoa_r+0x854>
 8004db8:	4621      	mov	r1, r4
 8004dba:	461a      	mov	r2, r3
 8004dbc:	4648      	mov	r0, r9
 8004dbe:	f000 fcaf 	bl	8005720 <__lshift>
 8004dc2:	4604      	mov	r4, r0
 8004dc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d061      	beq.n	8004e8e <_dtoa_r+0x91e>
 8004dca:	4621      	mov	r1, r4
 8004dcc:	9803      	ldr	r0, [sp, #12]
 8004dce:	f000 fd13 	bl	80057f8 <__mcmp>
 8004dd2:	2800      	cmp	r0, #0
 8004dd4:	da5b      	bge.n	8004e8e <_dtoa_r+0x91e>
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	220a      	movs	r2, #10
 8004dda:	4648      	mov	r0, r9
 8004ddc:	9903      	ldr	r1, [sp, #12]
 8004dde:	f000 fafb 	bl	80053d8 <__multadd>
 8004de2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004de4:	f107 38ff 	add.w	r8, r7, #4294967295
 8004de8:	9003      	str	r0, [sp, #12]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f000 8177 	beq.w	80050de <_dtoa_r+0xb6e>
 8004df0:	4629      	mov	r1, r5
 8004df2:	2300      	movs	r3, #0
 8004df4:	220a      	movs	r2, #10
 8004df6:	4648      	mov	r0, r9
 8004df8:	f000 faee 	bl	80053d8 <__multadd>
 8004dfc:	f1bb 0f00 	cmp.w	fp, #0
 8004e00:	4605      	mov	r5, r0
 8004e02:	dc6f      	bgt.n	8004ee4 <_dtoa_r+0x974>
 8004e04:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	dc49      	bgt.n	8004e9e <_dtoa_r+0x92e>
 8004e0a:	e06b      	b.n	8004ee4 <_dtoa_r+0x974>
 8004e0c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004e0e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004e12:	e73c      	b.n	8004c8e <_dtoa_r+0x71e>
 8004e14:	3fe00000 	.word	0x3fe00000
 8004e18:	40240000 	.word	0x40240000
 8004e1c:	9b08      	ldr	r3, [sp, #32]
 8004e1e:	1e5c      	subs	r4, r3, #1
 8004e20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e22:	42a3      	cmp	r3, r4
 8004e24:	db09      	blt.n	8004e3a <_dtoa_r+0x8ca>
 8004e26:	1b1c      	subs	r4, r3, r4
 8004e28:	9b08      	ldr	r3, [sp, #32]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f6bf af30 	bge.w	8004c90 <_dtoa_r+0x720>
 8004e30:	9b04      	ldr	r3, [sp, #16]
 8004e32:	9a08      	ldr	r2, [sp, #32]
 8004e34:	1a9e      	subs	r6, r3, r2
 8004e36:	2300      	movs	r3, #0
 8004e38:	e72b      	b.n	8004c92 <_dtoa_r+0x722>
 8004e3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004e3e:	1ae3      	subs	r3, r4, r3
 8004e40:	441a      	add	r2, r3
 8004e42:	940a      	str	r4, [sp, #40]	@ 0x28
 8004e44:	9e04      	ldr	r6, [sp, #16]
 8004e46:	2400      	movs	r4, #0
 8004e48:	9b08      	ldr	r3, [sp, #32]
 8004e4a:	920e      	str	r2, [sp, #56]	@ 0x38
 8004e4c:	e721      	b.n	8004c92 <_dtoa_r+0x722>
 8004e4e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004e50:	9e04      	ldr	r6, [sp, #16]
 8004e52:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004e54:	e728      	b.n	8004ca8 <_dtoa_r+0x738>
 8004e56:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004e5a:	e751      	b.n	8004d00 <_dtoa_r+0x790>
 8004e5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004e5e:	9903      	ldr	r1, [sp, #12]
 8004e60:	e750      	b.n	8004d04 <_dtoa_r+0x794>
 8004e62:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e66:	e751      	b.n	8004d0c <_dtoa_r+0x79c>
 8004e68:	2300      	movs	r3, #0
 8004e6a:	e779      	b.n	8004d60 <_dtoa_r+0x7f0>
 8004e6c:	9b06      	ldr	r3, [sp, #24]
 8004e6e:	e777      	b.n	8004d60 <_dtoa_r+0x7f0>
 8004e70:	2300      	movs	r3, #0
 8004e72:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e74:	e779      	b.n	8004d6a <_dtoa_r+0x7fa>
 8004e76:	d093      	beq.n	8004da0 <_dtoa_r+0x830>
 8004e78:	9a04      	ldr	r2, [sp, #16]
 8004e7a:	331c      	adds	r3, #28
 8004e7c:	441a      	add	r2, r3
 8004e7e:	9204      	str	r2, [sp, #16]
 8004e80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e82:	441e      	add	r6, r3
 8004e84:	441a      	add	r2, r3
 8004e86:	9209      	str	r2, [sp, #36]	@ 0x24
 8004e88:	e78a      	b.n	8004da0 <_dtoa_r+0x830>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	e7f4      	b.n	8004e78 <_dtoa_r+0x908>
 8004e8e:	9b08      	ldr	r3, [sp, #32]
 8004e90:	46b8      	mov	r8, r7
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	dc20      	bgt.n	8004ed8 <_dtoa_r+0x968>
 8004e96:	469b      	mov	fp, r3
 8004e98:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	dd1e      	ble.n	8004edc <_dtoa_r+0x96c>
 8004e9e:	f1bb 0f00 	cmp.w	fp, #0
 8004ea2:	f47f adb1 	bne.w	8004a08 <_dtoa_r+0x498>
 8004ea6:	4621      	mov	r1, r4
 8004ea8:	465b      	mov	r3, fp
 8004eaa:	2205      	movs	r2, #5
 8004eac:	4648      	mov	r0, r9
 8004eae:	f000 fa93 	bl	80053d8 <__multadd>
 8004eb2:	4601      	mov	r1, r0
 8004eb4:	4604      	mov	r4, r0
 8004eb6:	9803      	ldr	r0, [sp, #12]
 8004eb8:	f000 fc9e 	bl	80057f8 <__mcmp>
 8004ebc:	2800      	cmp	r0, #0
 8004ebe:	f77f ada3 	ble.w	8004a08 <_dtoa_r+0x498>
 8004ec2:	4656      	mov	r6, sl
 8004ec4:	2331      	movs	r3, #49	@ 0x31
 8004ec6:	f108 0801 	add.w	r8, r8, #1
 8004eca:	f806 3b01 	strb.w	r3, [r6], #1
 8004ece:	e59f      	b.n	8004a10 <_dtoa_r+0x4a0>
 8004ed0:	46b8      	mov	r8, r7
 8004ed2:	9c08      	ldr	r4, [sp, #32]
 8004ed4:	4625      	mov	r5, r4
 8004ed6:	e7f4      	b.n	8004ec2 <_dtoa_r+0x952>
 8004ed8:	f8dd b020 	ldr.w	fp, [sp, #32]
 8004edc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	f000 8101 	beq.w	80050e6 <_dtoa_r+0xb76>
 8004ee4:	2e00      	cmp	r6, #0
 8004ee6:	dd05      	ble.n	8004ef4 <_dtoa_r+0x984>
 8004ee8:	4629      	mov	r1, r5
 8004eea:	4632      	mov	r2, r6
 8004eec:	4648      	mov	r0, r9
 8004eee:	f000 fc17 	bl	8005720 <__lshift>
 8004ef2:	4605      	mov	r5, r0
 8004ef4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d05c      	beq.n	8004fb4 <_dtoa_r+0xa44>
 8004efa:	4648      	mov	r0, r9
 8004efc:	6869      	ldr	r1, [r5, #4]
 8004efe:	f000 fa09 	bl	8005314 <_Balloc>
 8004f02:	4606      	mov	r6, r0
 8004f04:	b928      	cbnz	r0, 8004f12 <_dtoa_r+0x9a2>
 8004f06:	4602      	mov	r2, r0
 8004f08:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004f0c:	4b80      	ldr	r3, [pc, #512]	@ (8005110 <_dtoa_r+0xba0>)
 8004f0e:	f7ff bb43 	b.w	8004598 <_dtoa_r+0x28>
 8004f12:	692a      	ldr	r2, [r5, #16]
 8004f14:	f105 010c 	add.w	r1, r5, #12
 8004f18:	3202      	adds	r2, #2
 8004f1a:	0092      	lsls	r2, r2, #2
 8004f1c:	300c      	adds	r0, #12
 8004f1e:	f000 ff9d 	bl	8005e5c <memcpy>
 8004f22:	2201      	movs	r2, #1
 8004f24:	4631      	mov	r1, r6
 8004f26:	4648      	mov	r0, r9
 8004f28:	f000 fbfa 	bl	8005720 <__lshift>
 8004f2c:	462f      	mov	r7, r5
 8004f2e:	4605      	mov	r5, r0
 8004f30:	f10a 0301 	add.w	r3, sl, #1
 8004f34:	9304      	str	r3, [sp, #16]
 8004f36:	eb0a 030b 	add.w	r3, sl, fp
 8004f3a:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f3c:	9b06      	ldr	r3, [sp, #24]
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f44:	9b04      	ldr	r3, [sp, #16]
 8004f46:	4621      	mov	r1, r4
 8004f48:	9803      	ldr	r0, [sp, #12]
 8004f4a:	f103 3bff 	add.w	fp, r3, #4294967295
 8004f4e:	f7ff fa86 	bl	800445e <quorem>
 8004f52:	4603      	mov	r3, r0
 8004f54:	4639      	mov	r1, r7
 8004f56:	3330      	adds	r3, #48	@ 0x30
 8004f58:	9006      	str	r0, [sp, #24]
 8004f5a:	9803      	ldr	r0, [sp, #12]
 8004f5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004f5e:	f000 fc4b 	bl	80057f8 <__mcmp>
 8004f62:	462a      	mov	r2, r5
 8004f64:	9008      	str	r0, [sp, #32]
 8004f66:	4621      	mov	r1, r4
 8004f68:	4648      	mov	r0, r9
 8004f6a:	f000 fc61 	bl	8005830 <__mdiff>
 8004f6e:	68c2      	ldr	r2, [r0, #12]
 8004f70:	4606      	mov	r6, r0
 8004f72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f74:	bb02      	cbnz	r2, 8004fb8 <_dtoa_r+0xa48>
 8004f76:	4601      	mov	r1, r0
 8004f78:	9803      	ldr	r0, [sp, #12]
 8004f7a:	f000 fc3d 	bl	80057f8 <__mcmp>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f82:	4631      	mov	r1, r6
 8004f84:	4648      	mov	r0, r9
 8004f86:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8004f8a:	f000 fa03 	bl	8005394 <_Bfree>
 8004f8e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004f90:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004f92:	9e04      	ldr	r6, [sp, #16]
 8004f94:	ea42 0103 	orr.w	r1, r2, r3
 8004f98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f9a:	4319      	orrs	r1, r3
 8004f9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f9e:	d10d      	bne.n	8004fbc <_dtoa_r+0xa4c>
 8004fa0:	2b39      	cmp	r3, #57	@ 0x39
 8004fa2:	d027      	beq.n	8004ff4 <_dtoa_r+0xa84>
 8004fa4:	9a08      	ldr	r2, [sp, #32]
 8004fa6:	2a00      	cmp	r2, #0
 8004fa8:	dd01      	ble.n	8004fae <_dtoa_r+0xa3e>
 8004faa:	9b06      	ldr	r3, [sp, #24]
 8004fac:	3331      	adds	r3, #49	@ 0x31
 8004fae:	f88b 3000 	strb.w	r3, [fp]
 8004fb2:	e52e      	b.n	8004a12 <_dtoa_r+0x4a2>
 8004fb4:	4628      	mov	r0, r5
 8004fb6:	e7b9      	b.n	8004f2c <_dtoa_r+0x9bc>
 8004fb8:	2201      	movs	r2, #1
 8004fba:	e7e2      	b.n	8004f82 <_dtoa_r+0xa12>
 8004fbc:	9908      	ldr	r1, [sp, #32]
 8004fbe:	2900      	cmp	r1, #0
 8004fc0:	db04      	blt.n	8004fcc <_dtoa_r+0xa5c>
 8004fc2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8004fc4:	4301      	orrs	r1, r0
 8004fc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004fc8:	4301      	orrs	r1, r0
 8004fca:	d120      	bne.n	800500e <_dtoa_r+0xa9e>
 8004fcc:	2a00      	cmp	r2, #0
 8004fce:	ddee      	ble.n	8004fae <_dtoa_r+0xa3e>
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	9903      	ldr	r1, [sp, #12]
 8004fd4:	4648      	mov	r0, r9
 8004fd6:	9304      	str	r3, [sp, #16]
 8004fd8:	f000 fba2 	bl	8005720 <__lshift>
 8004fdc:	4621      	mov	r1, r4
 8004fde:	9003      	str	r0, [sp, #12]
 8004fe0:	f000 fc0a 	bl	80057f8 <__mcmp>
 8004fe4:	2800      	cmp	r0, #0
 8004fe6:	9b04      	ldr	r3, [sp, #16]
 8004fe8:	dc02      	bgt.n	8004ff0 <_dtoa_r+0xa80>
 8004fea:	d1e0      	bne.n	8004fae <_dtoa_r+0xa3e>
 8004fec:	07da      	lsls	r2, r3, #31
 8004fee:	d5de      	bpl.n	8004fae <_dtoa_r+0xa3e>
 8004ff0:	2b39      	cmp	r3, #57	@ 0x39
 8004ff2:	d1da      	bne.n	8004faa <_dtoa_r+0xa3a>
 8004ff4:	2339      	movs	r3, #57	@ 0x39
 8004ff6:	f88b 3000 	strb.w	r3, [fp]
 8004ffa:	4633      	mov	r3, r6
 8004ffc:	461e      	mov	r6, r3
 8004ffe:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005002:	3b01      	subs	r3, #1
 8005004:	2a39      	cmp	r2, #57	@ 0x39
 8005006:	d04e      	beq.n	80050a6 <_dtoa_r+0xb36>
 8005008:	3201      	adds	r2, #1
 800500a:	701a      	strb	r2, [r3, #0]
 800500c:	e501      	b.n	8004a12 <_dtoa_r+0x4a2>
 800500e:	2a00      	cmp	r2, #0
 8005010:	dd03      	ble.n	800501a <_dtoa_r+0xaaa>
 8005012:	2b39      	cmp	r3, #57	@ 0x39
 8005014:	d0ee      	beq.n	8004ff4 <_dtoa_r+0xa84>
 8005016:	3301      	adds	r3, #1
 8005018:	e7c9      	b.n	8004fae <_dtoa_r+0xa3e>
 800501a:	9a04      	ldr	r2, [sp, #16]
 800501c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800501e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005022:	428a      	cmp	r2, r1
 8005024:	d028      	beq.n	8005078 <_dtoa_r+0xb08>
 8005026:	2300      	movs	r3, #0
 8005028:	220a      	movs	r2, #10
 800502a:	9903      	ldr	r1, [sp, #12]
 800502c:	4648      	mov	r0, r9
 800502e:	f000 f9d3 	bl	80053d8 <__multadd>
 8005032:	42af      	cmp	r7, r5
 8005034:	9003      	str	r0, [sp, #12]
 8005036:	f04f 0300 	mov.w	r3, #0
 800503a:	f04f 020a 	mov.w	r2, #10
 800503e:	4639      	mov	r1, r7
 8005040:	4648      	mov	r0, r9
 8005042:	d107      	bne.n	8005054 <_dtoa_r+0xae4>
 8005044:	f000 f9c8 	bl	80053d8 <__multadd>
 8005048:	4607      	mov	r7, r0
 800504a:	4605      	mov	r5, r0
 800504c:	9b04      	ldr	r3, [sp, #16]
 800504e:	3301      	adds	r3, #1
 8005050:	9304      	str	r3, [sp, #16]
 8005052:	e777      	b.n	8004f44 <_dtoa_r+0x9d4>
 8005054:	f000 f9c0 	bl	80053d8 <__multadd>
 8005058:	4629      	mov	r1, r5
 800505a:	4607      	mov	r7, r0
 800505c:	2300      	movs	r3, #0
 800505e:	220a      	movs	r2, #10
 8005060:	4648      	mov	r0, r9
 8005062:	f000 f9b9 	bl	80053d8 <__multadd>
 8005066:	4605      	mov	r5, r0
 8005068:	e7f0      	b.n	800504c <_dtoa_r+0xadc>
 800506a:	f1bb 0f00 	cmp.w	fp, #0
 800506e:	bfcc      	ite	gt
 8005070:	465e      	movgt	r6, fp
 8005072:	2601      	movle	r6, #1
 8005074:	2700      	movs	r7, #0
 8005076:	4456      	add	r6, sl
 8005078:	2201      	movs	r2, #1
 800507a:	9903      	ldr	r1, [sp, #12]
 800507c:	4648      	mov	r0, r9
 800507e:	9304      	str	r3, [sp, #16]
 8005080:	f000 fb4e 	bl	8005720 <__lshift>
 8005084:	4621      	mov	r1, r4
 8005086:	9003      	str	r0, [sp, #12]
 8005088:	f000 fbb6 	bl	80057f8 <__mcmp>
 800508c:	2800      	cmp	r0, #0
 800508e:	dcb4      	bgt.n	8004ffa <_dtoa_r+0xa8a>
 8005090:	d102      	bne.n	8005098 <_dtoa_r+0xb28>
 8005092:	9b04      	ldr	r3, [sp, #16]
 8005094:	07db      	lsls	r3, r3, #31
 8005096:	d4b0      	bmi.n	8004ffa <_dtoa_r+0xa8a>
 8005098:	4633      	mov	r3, r6
 800509a:	461e      	mov	r6, r3
 800509c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80050a0:	2a30      	cmp	r2, #48	@ 0x30
 80050a2:	d0fa      	beq.n	800509a <_dtoa_r+0xb2a>
 80050a4:	e4b5      	b.n	8004a12 <_dtoa_r+0x4a2>
 80050a6:	459a      	cmp	sl, r3
 80050a8:	d1a8      	bne.n	8004ffc <_dtoa_r+0xa8c>
 80050aa:	2331      	movs	r3, #49	@ 0x31
 80050ac:	f108 0801 	add.w	r8, r8, #1
 80050b0:	f88a 3000 	strb.w	r3, [sl]
 80050b4:	e4ad      	b.n	8004a12 <_dtoa_r+0x4a2>
 80050b6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80050b8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005114 <_dtoa_r+0xba4>
 80050bc:	b11b      	cbz	r3, 80050c6 <_dtoa_r+0xb56>
 80050be:	f10a 0308 	add.w	r3, sl, #8
 80050c2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80050c4:	6013      	str	r3, [r2, #0]
 80050c6:	4650      	mov	r0, sl
 80050c8:	b017      	add	sp, #92	@ 0x5c
 80050ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050ce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	f77f ae2e 	ble.w	8004d32 <_dtoa_r+0x7c2>
 80050d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80050d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80050da:	2001      	movs	r0, #1
 80050dc:	e64d      	b.n	8004d7a <_dtoa_r+0x80a>
 80050de:	f1bb 0f00 	cmp.w	fp, #0
 80050e2:	f77f aed9 	ble.w	8004e98 <_dtoa_r+0x928>
 80050e6:	4656      	mov	r6, sl
 80050e8:	4621      	mov	r1, r4
 80050ea:	9803      	ldr	r0, [sp, #12]
 80050ec:	f7ff f9b7 	bl	800445e <quorem>
 80050f0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80050f4:	f806 3b01 	strb.w	r3, [r6], #1
 80050f8:	eba6 020a 	sub.w	r2, r6, sl
 80050fc:	4593      	cmp	fp, r2
 80050fe:	ddb4      	ble.n	800506a <_dtoa_r+0xafa>
 8005100:	2300      	movs	r3, #0
 8005102:	220a      	movs	r2, #10
 8005104:	4648      	mov	r0, r9
 8005106:	9903      	ldr	r1, [sp, #12]
 8005108:	f000 f966 	bl	80053d8 <__multadd>
 800510c:	9003      	str	r0, [sp, #12]
 800510e:	e7eb      	b.n	80050e8 <_dtoa_r+0xb78>
 8005110:	080065f6 	.word	0x080065f6
 8005114:	0800657a 	.word	0x0800657a

08005118 <_free_r>:
 8005118:	b538      	push	{r3, r4, r5, lr}
 800511a:	4605      	mov	r5, r0
 800511c:	2900      	cmp	r1, #0
 800511e:	d040      	beq.n	80051a2 <_free_r+0x8a>
 8005120:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005124:	1f0c      	subs	r4, r1, #4
 8005126:	2b00      	cmp	r3, #0
 8005128:	bfb8      	it	lt
 800512a:	18e4      	addlt	r4, r4, r3
 800512c:	f000 f8e6 	bl	80052fc <__malloc_lock>
 8005130:	4a1c      	ldr	r2, [pc, #112]	@ (80051a4 <_free_r+0x8c>)
 8005132:	6813      	ldr	r3, [r2, #0]
 8005134:	b933      	cbnz	r3, 8005144 <_free_r+0x2c>
 8005136:	6063      	str	r3, [r4, #4]
 8005138:	6014      	str	r4, [r2, #0]
 800513a:	4628      	mov	r0, r5
 800513c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005140:	f000 b8e2 	b.w	8005308 <__malloc_unlock>
 8005144:	42a3      	cmp	r3, r4
 8005146:	d908      	bls.n	800515a <_free_r+0x42>
 8005148:	6820      	ldr	r0, [r4, #0]
 800514a:	1821      	adds	r1, r4, r0
 800514c:	428b      	cmp	r3, r1
 800514e:	bf01      	itttt	eq
 8005150:	6819      	ldreq	r1, [r3, #0]
 8005152:	685b      	ldreq	r3, [r3, #4]
 8005154:	1809      	addeq	r1, r1, r0
 8005156:	6021      	streq	r1, [r4, #0]
 8005158:	e7ed      	b.n	8005136 <_free_r+0x1e>
 800515a:	461a      	mov	r2, r3
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	b10b      	cbz	r3, 8005164 <_free_r+0x4c>
 8005160:	42a3      	cmp	r3, r4
 8005162:	d9fa      	bls.n	800515a <_free_r+0x42>
 8005164:	6811      	ldr	r1, [r2, #0]
 8005166:	1850      	adds	r0, r2, r1
 8005168:	42a0      	cmp	r0, r4
 800516a:	d10b      	bne.n	8005184 <_free_r+0x6c>
 800516c:	6820      	ldr	r0, [r4, #0]
 800516e:	4401      	add	r1, r0
 8005170:	1850      	adds	r0, r2, r1
 8005172:	4283      	cmp	r3, r0
 8005174:	6011      	str	r1, [r2, #0]
 8005176:	d1e0      	bne.n	800513a <_free_r+0x22>
 8005178:	6818      	ldr	r0, [r3, #0]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	4408      	add	r0, r1
 800517e:	6010      	str	r0, [r2, #0]
 8005180:	6053      	str	r3, [r2, #4]
 8005182:	e7da      	b.n	800513a <_free_r+0x22>
 8005184:	d902      	bls.n	800518c <_free_r+0x74>
 8005186:	230c      	movs	r3, #12
 8005188:	602b      	str	r3, [r5, #0]
 800518a:	e7d6      	b.n	800513a <_free_r+0x22>
 800518c:	6820      	ldr	r0, [r4, #0]
 800518e:	1821      	adds	r1, r4, r0
 8005190:	428b      	cmp	r3, r1
 8005192:	bf01      	itttt	eq
 8005194:	6819      	ldreq	r1, [r3, #0]
 8005196:	685b      	ldreq	r3, [r3, #4]
 8005198:	1809      	addeq	r1, r1, r0
 800519a:	6021      	streq	r1, [r4, #0]
 800519c:	6063      	str	r3, [r4, #4]
 800519e:	6054      	str	r4, [r2, #4]
 80051a0:	e7cb      	b.n	800513a <_free_r+0x22>
 80051a2:	bd38      	pop	{r3, r4, r5, pc}
 80051a4:	20000678 	.word	0x20000678

080051a8 <malloc>:
 80051a8:	4b02      	ldr	r3, [pc, #8]	@ (80051b4 <malloc+0xc>)
 80051aa:	4601      	mov	r1, r0
 80051ac:	6818      	ldr	r0, [r3, #0]
 80051ae:	f000 b825 	b.w	80051fc <_malloc_r>
 80051b2:	bf00      	nop
 80051b4:	20000020 	.word	0x20000020

080051b8 <sbrk_aligned>:
 80051b8:	b570      	push	{r4, r5, r6, lr}
 80051ba:	4e0f      	ldr	r6, [pc, #60]	@ (80051f8 <sbrk_aligned+0x40>)
 80051bc:	460c      	mov	r4, r1
 80051be:	6831      	ldr	r1, [r6, #0]
 80051c0:	4605      	mov	r5, r0
 80051c2:	b911      	cbnz	r1, 80051ca <sbrk_aligned+0x12>
 80051c4:	f000 fe3a 	bl	8005e3c <_sbrk_r>
 80051c8:	6030      	str	r0, [r6, #0]
 80051ca:	4621      	mov	r1, r4
 80051cc:	4628      	mov	r0, r5
 80051ce:	f000 fe35 	bl	8005e3c <_sbrk_r>
 80051d2:	1c43      	adds	r3, r0, #1
 80051d4:	d103      	bne.n	80051de <sbrk_aligned+0x26>
 80051d6:	f04f 34ff 	mov.w	r4, #4294967295
 80051da:	4620      	mov	r0, r4
 80051dc:	bd70      	pop	{r4, r5, r6, pc}
 80051de:	1cc4      	adds	r4, r0, #3
 80051e0:	f024 0403 	bic.w	r4, r4, #3
 80051e4:	42a0      	cmp	r0, r4
 80051e6:	d0f8      	beq.n	80051da <sbrk_aligned+0x22>
 80051e8:	1a21      	subs	r1, r4, r0
 80051ea:	4628      	mov	r0, r5
 80051ec:	f000 fe26 	bl	8005e3c <_sbrk_r>
 80051f0:	3001      	adds	r0, #1
 80051f2:	d1f2      	bne.n	80051da <sbrk_aligned+0x22>
 80051f4:	e7ef      	b.n	80051d6 <sbrk_aligned+0x1e>
 80051f6:	bf00      	nop
 80051f8:	20000674 	.word	0x20000674

080051fc <_malloc_r>:
 80051fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005200:	1ccd      	adds	r5, r1, #3
 8005202:	f025 0503 	bic.w	r5, r5, #3
 8005206:	3508      	adds	r5, #8
 8005208:	2d0c      	cmp	r5, #12
 800520a:	bf38      	it	cc
 800520c:	250c      	movcc	r5, #12
 800520e:	2d00      	cmp	r5, #0
 8005210:	4606      	mov	r6, r0
 8005212:	db01      	blt.n	8005218 <_malloc_r+0x1c>
 8005214:	42a9      	cmp	r1, r5
 8005216:	d904      	bls.n	8005222 <_malloc_r+0x26>
 8005218:	230c      	movs	r3, #12
 800521a:	6033      	str	r3, [r6, #0]
 800521c:	2000      	movs	r0, #0
 800521e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005222:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80052f8 <_malloc_r+0xfc>
 8005226:	f000 f869 	bl	80052fc <__malloc_lock>
 800522a:	f8d8 3000 	ldr.w	r3, [r8]
 800522e:	461c      	mov	r4, r3
 8005230:	bb44      	cbnz	r4, 8005284 <_malloc_r+0x88>
 8005232:	4629      	mov	r1, r5
 8005234:	4630      	mov	r0, r6
 8005236:	f7ff ffbf 	bl	80051b8 <sbrk_aligned>
 800523a:	1c43      	adds	r3, r0, #1
 800523c:	4604      	mov	r4, r0
 800523e:	d158      	bne.n	80052f2 <_malloc_r+0xf6>
 8005240:	f8d8 4000 	ldr.w	r4, [r8]
 8005244:	4627      	mov	r7, r4
 8005246:	2f00      	cmp	r7, #0
 8005248:	d143      	bne.n	80052d2 <_malloc_r+0xd6>
 800524a:	2c00      	cmp	r4, #0
 800524c:	d04b      	beq.n	80052e6 <_malloc_r+0xea>
 800524e:	6823      	ldr	r3, [r4, #0]
 8005250:	4639      	mov	r1, r7
 8005252:	4630      	mov	r0, r6
 8005254:	eb04 0903 	add.w	r9, r4, r3
 8005258:	f000 fdf0 	bl	8005e3c <_sbrk_r>
 800525c:	4581      	cmp	r9, r0
 800525e:	d142      	bne.n	80052e6 <_malloc_r+0xea>
 8005260:	6821      	ldr	r1, [r4, #0]
 8005262:	4630      	mov	r0, r6
 8005264:	1a6d      	subs	r5, r5, r1
 8005266:	4629      	mov	r1, r5
 8005268:	f7ff ffa6 	bl	80051b8 <sbrk_aligned>
 800526c:	3001      	adds	r0, #1
 800526e:	d03a      	beq.n	80052e6 <_malloc_r+0xea>
 8005270:	6823      	ldr	r3, [r4, #0]
 8005272:	442b      	add	r3, r5
 8005274:	6023      	str	r3, [r4, #0]
 8005276:	f8d8 3000 	ldr.w	r3, [r8]
 800527a:	685a      	ldr	r2, [r3, #4]
 800527c:	bb62      	cbnz	r2, 80052d8 <_malloc_r+0xdc>
 800527e:	f8c8 7000 	str.w	r7, [r8]
 8005282:	e00f      	b.n	80052a4 <_malloc_r+0xa8>
 8005284:	6822      	ldr	r2, [r4, #0]
 8005286:	1b52      	subs	r2, r2, r5
 8005288:	d420      	bmi.n	80052cc <_malloc_r+0xd0>
 800528a:	2a0b      	cmp	r2, #11
 800528c:	d917      	bls.n	80052be <_malloc_r+0xc2>
 800528e:	1961      	adds	r1, r4, r5
 8005290:	42a3      	cmp	r3, r4
 8005292:	6025      	str	r5, [r4, #0]
 8005294:	bf18      	it	ne
 8005296:	6059      	strne	r1, [r3, #4]
 8005298:	6863      	ldr	r3, [r4, #4]
 800529a:	bf08      	it	eq
 800529c:	f8c8 1000 	streq.w	r1, [r8]
 80052a0:	5162      	str	r2, [r4, r5]
 80052a2:	604b      	str	r3, [r1, #4]
 80052a4:	4630      	mov	r0, r6
 80052a6:	f000 f82f 	bl	8005308 <__malloc_unlock>
 80052aa:	f104 000b 	add.w	r0, r4, #11
 80052ae:	1d23      	adds	r3, r4, #4
 80052b0:	f020 0007 	bic.w	r0, r0, #7
 80052b4:	1ac2      	subs	r2, r0, r3
 80052b6:	bf1c      	itt	ne
 80052b8:	1a1b      	subne	r3, r3, r0
 80052ba:	50a3      	strne	r3, [r4, r2]
 80052bc:	e7af      	b.n	800521e <_malloc_r+0x22>
 80052be:	6862      	ldr	r2, [r4, #4]
 80052c0:	42a3      	cmp	r3, r4
 80052c2:	bf0c      	ite	eq
 80052c4:	f8c8 2000 	streq.w	r2, [r8]
 80052c8:	605a      	strne	r2, [r3, #4]
 80052ca:	e7eb      	b.n	80052a4 <_malloc_r+0xa8>
 80052cc:	4623      	mov	r3, r4
 80052ce:	6864      	ldr	r4, [r4, #4]
 80052d0:	e7ae      	b.n	8005230 <_malloc_r+0x34>
 80052d2:	463c      	mov	r4, r7
 80052d4:	687f      	ldr	r7, [r7, #4]
 80052d6:	e7b6      	b.n	8005246 <_malloc_r+0x4a>
 80052d8:	461a      	mov	r2, r3
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	42a3      	cmp	r3, r4
 80052de:	d1fb      	bne.n	80052d8 <_malloc_r+0xdc>
 80052e0:	2300      	movs	r3, #0
 80052e2:	6053      	str	r3, [r2, #4]
 80052e4:	e7de      	b.n	80052a4 <_malloc_r+0xa8>
 80052e6:	230c      	movs	r3, #12
 80052e8:	4630      	mov	r0, r6
 80052ea:	6033      	str	r3, [r6, #0]
 80052ec:	f000 f80c 	bl	8005308 <__malloc_unlock>
 80052f0:	e794      	b.n	800521c <_malloc_r+0x20>
 80052f2:	6005      	str	r5, [r0, #0]
 80052f4:	e7d6      	b.n	80052a4 <_malloc_r+0xa8>
 80052f6:	bf00      	nop
 80052f8:	20000678 	.word	0x20000678

080052fc <__malloc_lock>:
 80052fc:	4801      	ldr	r0, [pc, #4]	@ (8005304 <__malloc_lock+0x8>)
 80052fe:	f7ff b89e 	b.w	800443e <__retarget_lock_acquire_recursive>
 8005302:	bf00      	nop
 8005304:	20000670 	.word	0x20000670

08005308 <__malloc_unlock>:
 8005308:	4801      	ldr	r0, [pc, #4]	@ (8005310 <__malloc_unlock+0x8>)
 800530a:	f7ff b899 	b.w	8004440 <__retarget_lock_release_recursive>
 800530e:	bf00      	nop
 8005310:	20000670 	.word	0x20000670

08005314 <_Balloc>:
 8005314:	b570      	push	{r4, r5, r6, lr}
 8005316:	69c6      	ldr	r6, [r0, #28]
 8005318:	4604      	mov	r4, r0
 800531a:	460d      	mov	r5, r1
 800531c:	b976      	cbnz	r6, 800533c <_Balloc+0x28>
 800531e:	2010      	movs	r0, #16
 8005320:	f7ff ff42 	bl	80051a8 <malloc>
 8005324:	4602      	mov	r2, r0
 8005326:	61e0      	str	r0, [r4, #28]
 8005328:	b920      	cbnz	r0, 8005334 <_Balloc+0x20>
 800532a:	216b      	movs	r1, #107	@ 0x6b
 800532c:	4b17      	ldr	r3, [pc, #92]	@ (800538c <_Balloc+0x78>)
 800532e:	4818      	ldr	r0, [pc, #96]	@ (8005390 <_Balloc+0x7c>)
 8005330:	f000 fda2 	bl	8005e78 <__assert_func>
 8005334:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005338:	6006      	str	r6, [r0, #0]
 800533a:	60c6      	str	r6, [r0, #12]
 800533c:	69e6      	ldr	r6, [r4, #28]
 800533e:	68f3      	ldr	r3, [r6, #12]
 8005340:	b183      	cbz	r3, 8005364 <_Balloc+0x50>
 8005342:	69e3      	ldr	r3, [r4, #28]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800534a:	b9b8      	cbnz	r0, 800537c <_Balloc+0x68>
 800534c:	2101      	movs	r1, #1
 800534e:	fa01 f605 	lsl.w	r6, r1, r5
 8005352:	1d72      	adds	r2, r6, #5
 8005354:	4620      	mov	r0, r4
 8005356:	0092      	lsls	r2, r2, #2
 8005358:	f000 fdac 	bl	8005eb4 <_calloc_r>
 800535c:	b160      	cbz	r0, 8005378 <_Balloc+0x64>
 800535e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005362:	e00e      	b.n	8005382 <_Balloc+0x6e>
 8005364:	2221      	movs	r2, #33	@ 0x21
 8005366:	2104      	movs	r1, #4
 8005368:	4620      	mov	r0, r4
 800536a:	f000 fda3 	bl	8005eb4 <_calloc_r>
 800536e:	69e3      	ldr	r3, [r4, #28]
 8005370:	60f0      	str	r0, [r6, #12]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d1e4      	bne.n	8005342 <_Balloc+0x2e>
 8005378:	2000      	movs	r0, #0
 800537a:	bd70      	pop	{r4, r5, r6, pc}
 800537c:	6802      	ldr	r2, [r0, #0]
 800537e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005382:	2300      	movs	r3, #0
 8005384:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005388:	e7f7      	b.n	800537a <_Balloc+0x66>
 800538a:	bf00      	nop
 800538c:	08006587 	.word	0x08006587
 8005390:	08006607 	.word	0x08006607

08005394 <_Bfree>:
 8005394:	b570      	push	{r4, r5, r6, lr}
 8005396:	69c6      	ldr	r6, [r0, #28]
 8005398:	4605      	mov	r5, r0
 800539a:	460c      	mov	r4, r1
 800539c:	b976      	cbnz	r6, 80053bc <_Bfree+0x28>
 800539e:	2010      	movs	r0, #16
 80053a0:	f7ff ff02 	bl	80051a8 <malloc>
 80053a4:	4602      	mov	r2, r0
 80053a6:	61e8      	str	r0, [r5, #28]
 80053a8:	b920      	cbnz	r0, 80053b4 <_Bfree+0x20>
 80053aa:	218f      	movs	r1, #143	@ 0x8f
 80053ac:	4b08      	ldr	r3, [pc, #32]	@ (80053d0 <_Bfree+0x3c>)
 80053ae:	4809      	ldr	r0, [pc, #36]	@ (80053d4 <_Bfree+0x40>)
 80053b0:	f000 fd62 	bl	8005e78 <__assert_func>
 80053b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80053b8:	6006      	str	r6, [r0, #0]
 80053ba:	60c6      	str	r6, [r0, #12]
 80053bc:	b13c      	cbz	r4, 80053ce <_Bfree+0x3a>
 80053be:	69eb      	ldr	r3, [r5, #28]
 80053c0:	6862      	ldr	r2, [r4, #4]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80053c8:	6021      	str	r1, [r4, #0]
 80053ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80053ce:	bd70      	pop	{r4, r5, r6, pc}
 80053d0:	08006587 	.word	0x08006587
 80053d4:	08006607 	.word	0x08006607

080053d8 <__multadd>:
 80053d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053dc:	4607      	mov	r7, r0
 80053de:	460c      	mov	r4, r1
 80053e0:	461e      	mov	r6, r3
 80053e2:	2000      	movs	r0, #0
 80053e4:	690d      	ldr	r5, [r1, #16]
 80053e6:	f101 0c14 	add.w	ip, r1, #20
 80053ea:	f8dc 3000 	ldr.w	r3, [ip]
 80053ee:	3001      	adds	r0, #1
 80053f0:	b299      	uxth	r1, r3
 80053f2:	fb02 6101 	mla	r1, r2, r1, r6
 80053f6:	0c1e      	lsrs	r6, r3, #16
 80053f8:	0c0b      	lsrs	r3, r1, #16
 80053fa:	fb02 3306 	mla	r3, r2, r6, r3
 80053fe:	b289      	uxth	r1, r1
 8005400:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005404:	4285      	cmp	r5, r0
 8005406:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800540a:	f84c 1b04 	str.w	r1, [ip], #4
 800540e:	dcec      	bgt.n	80053ea <__multadd+0x12>
 8005410:	b30e      	cbz	r6, 8005456 <__multadd+0x7e>
 8005412:	68a3      	ldr	r3, [r4, #8]
 8005414:	42ab      	cmp	r3, r5
 8005416:	dc19      	bgt.n	800544c <__multadd+0x74>
 8005418:	6861      	ldr	r1, [r4, #4]
 800541a:	4638      	mov	r0, r7
 800541c:	3101      	adds	r1, #1
 800541e:	f7ff ff79 	bl	8005314 <_Balloc>
 8005422:	4680      	mov	r8, r0
 8005424:	b928      	cbnz	r0, 8005432 <__multadd+0x5a>
 8005426:	4602      	mov	r2, r0
 8005428:	21ba      	movs	r1, #186	@ 0xba
 800542a:	4b0c      	ldr	r3, [pc, #48]	@ (800545c <__multadd+0x84>)
 800542c:	480c      	ldr	r0, [pc, #48]	@ (8005460 <__multadd+0x88>)
 800542e:	f000 fd23 	bl	8005e78 <__assert_func>
 8005432:	6922      	ldr	r2, [r4, #16]
 8005434:	f104 010c 	add.w	r1, r4, #12
 8005438:	3202      	adds	r2, #2
 800543a:	0092      	lsls	r2, r2, #2
 800543c:	300c      	adds	r0, #12
 800543e:	f000 fd0d 	bl	8005e5c <memcpy>
 8005442:	4621      	mov	r1, r4
 8005444:	4638      	mov	r0, r7
 8005446:	f7ff ffa5 	bl	8005394 <_Bfree>
 800544a:	4644      	mov	r4, r8
 800544c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005450:	3501      	adds	r5, #1
 8005452:	615e      	str	r6, [r3, #20]
 8005454:	6125      	str	r5, [r4, #16]
 8005456:	4620      	mov	r0, r4
 8005458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800545c:	080065f6 	.word	0x080065f6
 8005460:	08006607 	.word	0x08006607

08005464 <__hi0bits>:
 8005464:	4603      	mov	r3, r0
 8005466:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800546a:	bf3a      	itte	cc
 800546c:	0403      	lslcc	r3, r0, #16
 800546e:	2010      	movcc	r0, #16
 8005470:	2000      	movcs	r0, #0
 8005472:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005476:	bf3c      	itt	cc
 8005478:	021b      	lslcc	r3, r3, #8
 800547a:	3008      	addcc	r0, #8
 800547c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005480:	bf3c      	itt	cc
 8005482:	011b      	lslcc	r3, r3, #4
 8005484:	3004      	addcc	r0, #4
 8005486:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800548a:	bf3c      	itt	cc
 800548c:	009b      	lslcc	r3, r3, #2
 800548e:	3002      	addcc	r0, #2
 8005490:	2b00      	cmp	r3, #0
 8005492:	db05      	blt.n	80054a0 <__hi0bits+0x3c>
 8005494:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005498:	f100 0001 	add.w	r0, r0, #1
 800549c:	bf08      	it	eq
 800549e:	2020      	moveq	r0, #32
 80054a0:	4770      	bx	lr

080054a2 <__lo0bits>:
 80054a2:	6803      	ldr	r3, [r0, #0]
 80054a4:	4602      	mov	r2, r0
 80054a6:	f013 0007 	ands.w	r0, r3, #7
 80054aa:	d00b      	beq.n	80054c4 <__lo0bits+0x22>
 80054ac:	07d9      	lsls	r1, r3, #31
 80054ae:	d421      	bmi.n	80054f4 <__lo0bits+0x52>
 80054b0:	0798      	lsls	r0, r3, #30
 80054b2:	bf49      	itett	mi
 80054b4:	085b      	lsrmi	r3, r3, #1
 80054b6:	089b      	lsrpl	r3, r3, #2
 80054b8:	2001      	movmi	r0, #1
 80054ba:	6013      	strmi	r3, [r2, #0]
 80054bc:	bf5c      	itt	pl
 80054be:	2002      	movpl	r0, #2
 80054c0:	6013      	strpl	r3, [r2, #0]
 80054c2:	4770      	bx	lr
 80054c4:	b299      	uxth	r1, r3
 80054c6:	b909      	cbnz	r1, 80054cc <__lo0bits+0x2a>
 80054c8:	2010      	movs	r0, #16
 80054ca:	0c1b      	lsrs	r3, r3, #16
 80054cc:	b2d9      	uxtb	r1, r3
 80054ce:	b909      	cbnz	r1, 80054d4 <__lo0bits+0x32>
 80054d0:	3008      	adds	r0, #8
 80054d2:	0a1b      	lsrs	r3, r3, #8
 80054d4:	0719      	lsls	r1, r3, #28
 80054d6:	bf04      	itt	eq
 80054d8:	091b      	lsreq	r3, r3, #4
 80054da:	3004      	addeq	r0, #4
 80054dc:	0799      	lsls	r1, r3, #30
 80054de:	bf04      	itt	eq
 80054e0:	089b      	lsreq	r3, r3, #2
 80054e2:	3002      	addeq	r0, #2
 80054e4:	07d9      	lsls	r1, r3, #31
 80054e6:	d403      	bmi.n	80054f0 <__lo0bits+0x4e>
 80054e8:	085b      	lsrs	r3, r3, #1
 80054ea:	f100 0001 	add.w	r0, r0, #1
 80054ee:	d003      	beq.n	80054f8 <__lo0bits+0x56>
 80054f0:	6013      	str	r3, [r2, #0]
 80054f2:	4770      	bx	lr
 80054f4:	2000      	movs	r0, #0
 80054f6:	4770      	bx	lr
 80054f8:	2020      	movs	r0, #32
 80054fa:	4770      	bx	lr

080054fc <__i2b>:
 80054fc:	b510      	push	{r4, lr}
 80054fe:	460c      	mov	r4, r1
 8005500:	2101      	movs	r1, #1
 8005502:	f7ff ff07 	bl	8005314 <_Balloc>
 8005506:	4602      	mov	r2, r0
 8005508:	b928      	cbnz	r0, 8005516 <__i2b+0x1a>
 800550a:	f240 1145 	movw	r1, #325	@ 0x145
 800550e:	4b04      	ldr	r3, [pc, #16]	@ (8005520 <__i2b+0x24>)
 8005510:	4804      	ldr	r0, [pc, #16]	@ (8005524 <__i2b+0x28>)
 8005512:	f000 fcb1 	bl	8005e78 <__assert_func>
 8005516:	2301      	movs	r3, #1
 8005518:	6144      	str	r4, [r0, #20]
 800551a:	6103      	str	r3, [r0, #16]
 800551c:	bd10      	pop	{r4, pc}
 800551e:	bf00      	nop
 8005520:	080065f6 	.word	0x080065f6
 8005524:	08006607 	.word	0x08006607

08005528 <__multiply>:
 8005528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800552c:	4617      	mov	r7, r2
 800552e:	690a      	ldr	r2, [r1, #16]
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	4689      	mov	r9, r1
 8005534:	429a      	cmp	r2, r3
 8005536:	bfa2      	ittt	ge
 8005538:	463b      	movge	r3, r7
 800553a:	460f      	movge	r7, r1
 800553c:	4699      	movge	r9, r3
 800553e:	693d      	ldr	r5, [r7, #16]
 8005540:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	6879      	ldr	r1, [r7, #4]
 8005548:	eb05 060a 	add.w	r6, r5, sl
 800554c:	42b3      	cmp	r3, r6
 800554e:	b085      	sub	sp, #20
 8005550:	bfb8      	it	lt
 8005552:	3101      	addlt	r1, #1
 8005554:	f7ff fede 	bl	8005314 <_Balloc>
 8005558:	b930      	cbnz	r0, 8005568 <__multiply+0x40>
 800555a:	4602      	mov	r2, r0
 800555c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005560:	4b40      	ldr	r3, [pc, #256]	@ (8005664 <__multiply+0x13c>)
 8005562:	4841      	ldr	r0, [pc, #260]	@ (8005668 <__multiply+0x140>)
 8005564:	f000 fc88 	bl	8005e78 <__assert_func>
 8005568:	f100 0414 	add.w	r4, r0, #20
 800556c:	4623      	mov	r3, r4
 800556e:	2200      	movs	r2, #0
 8005570:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8005574:	4573      	cmp	r3, lr
 8005576:	d320      	bcc.n	80055ba <__multiply+0x92>
 8005578:	f107 0814 	add.w	r8, r7, #20
 800557c:	f109 0114 	add.w	r1, r9, #20
 8005580:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8005584:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8005588:	9302      	str	r3, [sp, #8]
 800558a:	1beb      	subs	r3, r5, r7
 800558c:	3b15      	subs	r3, #21
 800558e:	f023 0303 	bic.w	r3, r3, #3
 8005592:	3304      	adds	r3, #4
 8005594:	3715      	adds	r7, #21
 8005596:	42bd      	cmp	r5, r7
 8005598:	bf38      	it	cc
 800559a:	2304      	movcc	r3, #4
 800559c:	9301      	str	r3, [sp, #4]
 800559e:	9b02      	ldr	r3, [sp, #8]
 80055a0:	9103      	str	r1, [sp, #12]
 80055a2:	428b      	cmp	r3, r1
 80055a4:	d80c      	bhi.n	80055c0 <__multiply+0x98>
 80055a6:	2e00      	cmp	r6, #0
 80055a8:	dd03      	ble.n	80055b2 <__multiply+0x8a>
 80055aa:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d055      	beq.n	800565e <__multiply+0x136>
 80055b2:	6106      	str	r6, [r0, #16]
 80055b4:	b005      	add	sp, #20
 80055b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ba:	f843 2b04 	str.w	r2, [r3], #4
 80055be:	e7d9      	b.n	8005574 <__multiply+0x4c>
 80055c0:	f8b1 a000 	ldrh.w	sl, [r1]
 80055c4:	f1ba 0f00 	cmp.w	sl, #0
 80055c8:	d01f      	beq.n	800560a <__multiply+0xe2>
 80055ca:	46c4      	mov	ip, r8
 80055cc:	46a1      	mov	r9, r4
 80055ce:	2700      	movs	r7, #0
 80055d0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80055d4:	f8d9 3000 	ldr.w	r3, [r9]
 80055d8:	fa1f fb82 	uxth.w	fp, r2
 80055dc:	b29b      	uxth	r3, r3
 80055de:	fb0a 330b 	mla	r3, sl, fp, r3
 80055e2:	443b      	add	r3, r7
 80055e4:	f8d9 7000 	ldr.w	r7, [r9]
 80055e8:	0c12      	lsrs	r2, r2, #16
 80055ea:	0c3f      	lsrs	r7, r7, #16
 80055ec:	fb0a 7202 	mla	r2, sl, r2, r7
 80055f0:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055fa:	4565      	cmp	r5, ip
 80055fc:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8005600:	f849 3b04 	str.w	r3, [r9], #4
 8005604:	d8e4      	bhi.n	80055d0 <__multiply+0xa8>
 8005606:	9b01      	ldr	r3, [sp, #4]
 8005608:	50e7      	str	r7, [r4, r3]
 800560a:	9b03      	ldr	r3, [sp, #12]
 800560c:	3104      	adds	r1, #4
 800560e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005612:	f1b9 0f00 	cmp.w	r9, #0
 8005616:	d020      	beq.n	800565a <__multiply+0x132>
 8005618:	4647      	mov	r7, r8
 800561a:	46a4      	mov	ip, r4
 800561c:	f04f 0a00 	mov.w	sl, #0
 8005620:	6823      	ldr	r3, [r4, #0]
 8005622:	f8b7 b000 	ldrh.w	fp, [r7]
 8005626:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800562a:	b29b      	uxth	r3, r3
 800562c:	fb09 220b 	mla	r2, r9, fp, r2
 8005630:	4452      	add	r2, sl
 8005632:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005636:	f84c 3b04 	str.w	r3, [ip], #4
 800563a:	f857 3b04 	ldr.w	r3, [r7], #4
 800563e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005642:	f8bc 3000 	ldrh.w	r3, [ip]
 8005646:	42bd      	cmp	r5, r7
 8005648:	fb09 330a 	mla	r3, r9, sl, r3
 800564c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8005650:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005654:	d8e5      	bhi.n	8005622 <__multiply+0xfa>
 8005656:	9a01      	ldr	r2, [sp, #4]
 8005658:	50a3      	str	r3, [r4, r2]
 800565a:	3404      	adds	r4, #4
 800565c:	e79f      	b.n	800559e <__multiply+0x76>
 800565e:	3e01      	subs	r6, #1
 8005660:	e7a1      	b.n	80055a6 <__multiply+0x7e>
 8005662:	bf00      	nop
 8005664:	080065f6 	.word	0x080065f6
 8005668:	08006607 	.word	0x08006607

0800566c <__pow5mult>:
 800566c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005670:	4615      	mov	r5, r2
 8005672:	f012 0203 	ands.w	r2, r2, #3
 8005676:	4607      	mov	r7, r0
 8005678:	460e      	mov	r6, r1
 800567a:	d007      	beq.n	800568c <__pow5mult+0x20>
 800567c:	4c25      	ldr	r4, [pc, #148]	@ (8005714 <__pow5mult+0xa8>)
 800567e:	3a01      	subs	r2, #1
 8005680:	2300      	movs	r3, #0
 8005682:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005686:	f7ff fea7 	bl	80053d8 <__multadd>
 800568a:	4606      	mov	r6, r0
 800568c:	10ad      	asrs	r5, r5, #2
 800568e:	d03d      	beq.n	800570c <__pow5mult+0xa0>
 8005690:	69fc      	ldr	r4, [r7, #28]
 8005692:	b97c      	cbnz	r4, 80056b4 <__pow5mult+0x48>
 8005694:	2010      	movs	r0, #16
 8005696:	f7ff fd87 	bl	80051a8 <malloc>
 800569a:	4602      	mov	r2, r0
 800569c:	61f8      	str	r0, [r7, #28]
 800569e:	b928      	cbnz	r0, 80056ac <__pow5mult+0x40>
 80056a0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80056a4:	4b1c      	ldr	r3, [pc, #112]	@ (8005718 <__pow5mult+0xac>)
 80056a6:	481d      	ldr	r0, [pc, #116]	@ (800571c <__pow5mult+0xb0>)
 80056a8:	f000 fbe6 	bl	8005e78 <__assert_func>
 80056ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80056b0:	6004      	str	r4, [r0, #0]
 80056b2:	60c4      	str	r4, [r0, #12]
 80056b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80056b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80056bc:	b94c      	cbnz	r4, 80056d2 <__pow5mult+0x66>
 80056be:	f240 2171 	movw	r1, #625	@ 0x271
 80056c2:	4638      	mov	r0, r7
 80056c4:	f7ff ff1a 	bl	80054fc <__i2b>
 80056c8:	2300      	movs	r3, #0
 80056ca:	4604      	mov	r4, r0
 80056cc:	f8c8 0008 	str.w	r0, [r8, #8]
 80056d0:	6003      	str	r3, [r0, #0]
 80056d2:	f04f 0900 	mov.w	r9, #0
 80056d6:	07eb      	lsls	r3, r5, #31
 80056d8:	d50a      	bpl.n	80056f0 <__pow5mult+0x84>
 80056da:	4631      	mov	r1, r6
 80056dc:	4622      	mov	r2, r4
 80056de:	4638      	mov	r0, r7
 80056e0:	f7ff ff22 	bl	8005528 <__multiply>
 80056e4:	4680      	mov	r8, r0
 80056e6:	4631      	mov	r1, r6
 80056e8:	4638      	mov	r0, r7
 80056ea:	f7ff fe53 	bl	8005394 <_Bfree>
 80056ee:	4646      	mov	r6, r8
 80056f0:	106d      	asrs	r5, r5, #1
 80056f2:	d00b      	beq.n	800570c <__pow5mult+0xa0>
 80056f4:	6820      	ldr	r0, [r4, #0]
 80056f6:	b938      	cbnz	r0, 8005708 <__pow5mult+0x9c>
 80056f8:	4622      	mov	r2, r4
 80056fa:	4621      	mov	r1, r4
 80056fc:	4638      	mov	r0, r7
 80056fe:	f7ff ff13 	bl	8005528 <__multiply>
 8005702:	6020      	str	r0, [r4, #0]
 8005704:	f8c0 9000 	str.w	r9, [r0]
 8005708:	4604      	mov	r4, r0
 800570a:	e7e4      	b.n	80056d6 <__pow5mult+0x6a>
 800570c:	4630      	mov	r0, r6
 800570e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005712:	bf00      	nop
 8005714:	080066b8 	.word	0x080066b8
 8005718:	08006587 	.word	0x08006587
 800571c:	08006607 	.word	0x08006607

08005720 <__lshift>:
 8005720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005724:	460c      	mov	r4, r1
 8005726:	4607      	mov	r7, r0
 8005728:	4691      	mov	r9, r2
 800572a:	6923      	ldr	r3, [r4, #16]
 800572c:	6849      	ldr	r1, [r1, #4]
 800572e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005732:	68a3      	ldr	r3, [r4, #8]
 8005734:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005738:	f108 0601 	add.w	r6, r8, #1
 800573c:	42b3      	cmp	r3, r6
 800573e:	db0b      	blt.n	8005758 <__lshift+0x38>
 8005740:	4638      	mov	r0, r7
 8005742:	f7ff fde7 	bl	8005314 <_Balloc>
 8005746:	4605      	mov	r5, r0
 8005748:	b948      	cbnz	r0, 800575e <__lshift+0x3e>
 800574a:	4602      	mov	r2, r0
 800574c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005750:	4b27      	ldr	r3, [pc, #156]	@ (80057f0 <__lshift+0xd0>)
 8005752:	4828      	ldr	r0, [pc, #160]	@ (80057f4 <__lshift+0xd4>)
 8005754:	f000 fb90 	bl	8005e78 <__assert_func>
 8005758:	3101      	adds	r1, #1
 800575a:	005b      	lsls	r3, r3, #1
 800575c:	e7ee      	b.n	800573c <__lshift+0x1c>
 800575e:	2300      	movs	r3, #0
 8005760:	f100 0114 	add.w	r1, r0, #20
 8005764:	f100 0210 	add.w	r2, r0, #16
 8005768:	4618      	mov	r0, r3
 800576a:	4553      	cmp	r3, sl
 800576c:	db33      	blt.n	80057d6 <__lshift+0xb6>
 800576e:	6920      	ldr	r0, [r4, #16]
 8005770:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005774:	f104 0314 	add.w	r3, r4, #20
 8005778:	f019 091f 	ands.w	r9, r9, #31
 800577c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005780:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005784:	d02b      	beq.n	80057de <__lshift+0xbe>
 8005786:	468a      	mov	sl, r1
 8005788:	2200      	movs	r2, #0
 800578a:	f1c9 0e20 	rsb	lr, r9, #32
 800578e:	6818      	ldr	r0, [r3, #0]
 8005790:	fa00 f009 	lsl.w	r0, r0, r9
 8005794:	4310      	orrs	r0, r2
 8005796:	f84a 0b04 	str.w	r0, [sl], #4
 800579a:	f853 2b04 	ldr.w	r2, [r3], #4
 800579e:	459c      	cmp	ip, r3
 80057a0:	fa22 f20e 	lsr.w	r2, r2, lr
 80057a4:	d8f3      	bhi.n	800578e <__lshift+0x6e>
 80057a6:	ebac 0304 	sub.w	r3, ip, r4
 80057aa:	3b15      	subs	r3, #21
 80057ac:	f023 0303 	bic.w	r3, r3, #3
 80057b0:	3304      	adds	r3, #4
 80057b2:	f104 0015 	add.w	r0, r4, #21
 80057b6:	4560      	cmp	r0, ip
 80057b8:	bf88      	it	hi
 80057ba:	2304      	movhi	r3, #4
 80057bc:	50ca      	str	r2, [r1, r3]
 80057be:	b10a      	cbz	r2, 80057c4 <__lshift+0xa4>
 80057c0:	f108 0602 	add.w	r6, r8, #2
 80057c4:	3e01      	subs	r6, #1
 80057c6:	4638      	mov	r0, r7
 80057c8:	4621      	mov	r1, r4
 80057ca:	612e      	str	r6, [r5, #16]
 80057cc:	f7ff fde2 	bl	8005394 <_Bfree>
 80057d0:	4628      	mov	r0, r5
 80057d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80057da:	3301      	adds	r3, #1
 80057dc:	e7c5      	b.n	800576a <__lshift+0x4a>
 80057de:	3904      	subs	r1, #4
 80057e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80057e4:	459c      	cmp	ip, r3
 80057e6:	f841 2f04 	str.w	r2, [r1, #4]!
 80057ea:	d8f9      	bhi.n	80057e0 <__lshift+0xc0>
 80057ec:	e7ea      	b.n	80057c4 <__lshift+0xa4>
 80057ee:	bf00      	nop
 80057f0:	080065f6 	.word	0x080065f6
 80057f4:	08006607 	.word	0x08006607

080057f8 <__mcmp>:
 80057f8:	4603      	mov	r3, r0
 80057fa:	690a      	ldr	r2, [r1, #16]
 80057fc:	6900      	ldr	r0, [r0, #16]
 80057fe:	b530      	push	{r4, r5, lr}
 8005800:	1a80      	subs	r0, r0, r2
 8005802:	d10e      	bne.n	8005822 <__mcmp+0x2a>
 8005804:	3314      	adds	r3, #20
 8005806:	3114      	adds	r1, #20
 8005808:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800580c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005810:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005814:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005818:	4295      	cmp	r5, r2
 800581a:	d003      	beq.n	8005824 <__mcmp+0x2c>
 800581c:	d205      	bcs.n	800582a <__mcmp+0x32>
 800581e:	f04f 30ff 	mov.w	r0, #4294967295
 8005822:	bd30      	pop	{r4, r5, pc}
 8005824:	42a3      	cmp	r3, r4
 8005826:	d3f3      	bcc.n	8005810 <__mcmp+0x18>
 8005828:	e7fb      	b.n	8005822 <__mcmp+0x2a>
 800582a:	2001      	movs	r0, #1
 800582c:	e7f9      	b.n	8005822 <__mcmp+0x2a>
	...

08005830 <__mdiff>:
 8005830:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005834:	4689      	mov	r9, r1
 8005836:	4606      	mov	r6, r0
 8005838:	4611      	mov	r1, r2
 800583a:	4648      	mov	r0, r9
 800583c:	4614      	mov	r4, r2
 800583e:	f7ff ffdb 	bl	80057f8 <__mcmp>
 8005842:	1e05      	subs	r5, r0, #0
 8005844:	d112      	bne.n	800586c <__mdiff+0x3c>
 8005846:	4629      	mov	r1, r5
 8005848:	4630      	mov	r0, r6
 800584a:	f7ff fd63 	bl	8005314 <_Balloc>
 800584e:	4602      	mov	r2, r0
 8005850:	b928      	cbnz	r0, 800585e <__mdiff+0x2e>
 8005852:	f240 2137 	movw	r1, #567	@ 0x237
 8005856:	4b3e      	ldr	r3, [pc, #248]	@ (8005950 <__mdiff+0x120>)
 8005858:	483e      	ldr	r0, [pc, #248]	@ (8005954 <__mdiff+0x124>)
 800585a:	f000 fb0d 	bl	8005e78 <__assert_func>
 800585e:	2301      	movs	r3, #1
 8005860:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005864:	4610      	mov	r0, r2
 8005866:	b003      	add	sp, #12
 8005868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800586c:	bfbc      	itt	lt
 800586e:	464b      	movlt	r3, r9
 8005870:	46a1      	movlt	r9, r4
 8005872:	4630      	mov	r0, r6
 8005874:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005878:	bfba      	itte	lt
 800587a:	461c      	movlt	r4, r3
 800587c:	2501      	movlt	r5, #1
 800587e:	2500      	movge	r5, #0
 8005880:	f7ff fd48 	bl	8005314 <_Balloc>
 8005884:	4602      	mov	r2, r0
 8005886:	b918      	cbnz	r0, 8005890 <__mdiff+0x60>
 8005888:	f240 2145 	movw	r1, #581	@ 0x245
 800588c:	4b30      	ldr	r3, [pc, #192]	@ (8005950 <__mdiff+0x120>)
 800588e:	e7e3      	b.n	8005858 <__mdiff+0x28>
 8005890:	f100 0b14 	add.w	fp, r0, #20
 8005894:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005898:	f109 0310 	add.w	r3, r9, #16
 800589c:	60c5      	str	r5, [r0, #12]
 800589e:	f04f 0c00 	mov.w	ip, #0
 80058a2:	f109 0514 	add.w	r5, r9, #20
 80058a6:	46d9      	mov	r9, fp
 80058a8:	6926      	ldr	r6, [r4, #16]
 80058aa:	f104 0e14 	add.w	lr, r4, #20
 80058ae:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80058b2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80058b6:	9301      	str	r3, [sp, #4]
 80058b8:	9b01      	ldr	r3, [sp, #4]
 80058ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 80058be:	f853 af04 	ldr.w	sl, [r3, #4]!
 80058c2:	b281      	uxth	r1, r0
 80058c4:	9301      	str	r3, [sp, #4]
 80058c6:	fa1f f38a 	uxth.w	r3, sl
 80058ca:	1a5b      	subs	r3, r3, r1
 80058cc:	0c00      	lsrs	r0, r0, #16
 80058ce:	4463      	add	r3, ip
 80058d0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80058d4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80058d8:	b29b      	uxth	r3, r3
 80058da:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80058de:	4576      	cmp	r6, lr
 80058e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80058e4:	f849 3b04 	str.w	r3, [r9], #4
 80058e8:	d8e6      	bhi.n	80058b8 <__mdiff+0x88>
 80058ea:	1b33      	subs	r3, r6, r4
 80058ec:	3b15      	subs	r3, #21
 80058ee:	f023 0303 	bic.w	r3, r3, #3
 80058f2:	3415      	adds	r4, #21
 80058f4:	3304      	adds	r3, #4
 80058f6:	42a6      	cmp	r6, r4
 80058f8:	bf38      	it	cc
 80058fa:	2304      	movcc	r3, #4
 80058fc:	441d      	add	r5, r3
 80058fe:	445b      	add	r3, fp
 8005900:	461e      	mov	r6, r3
 8005902:	462c      	mov	r4, r5
 8005904:	4544      	cmp	r4, r8
 8005906:	d30e      	bcc.n	8005926 <__mdiff+0xf6>
 8005908:	f108 0103 	add.w	r1, r8, #3
 800590c:	1b49      	subs	r1, r1, r5
 800590e:	f021 0103 	bic.w	r1, r1, #3
 8005912:	3d03      	subs	r5, #3
 8005914:	45a8      	cmp	r8, r5
 8005916:	bf38      	it	cc
 8005918:	2100      	movcc	r1, #0
 800591a:	440b      	add	r3, r1
 800591c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005920:	b199      	cbz	r1, 800594a <__mdiff+0x11a>
 8005922:	6117      	str	r7, [r2, #16]
 8005924:	e79e      	b.n	8005864 <__mdiff+0x34>
 8005926:	46e6      	mov	lr, ip
 8005928:	f854 1b04 	ldr.w	r1, [r4], #4
 800592c:	fa1f fc81 	uxth.w	ip, r1
 8005930:	44f4      	add	ip, lr
 8005932:	0c08      	lsrs	r0, r1, #16
 8005934:	4471      	add	r1, lr
 8005936:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800593a:	b289      	uxth	r1, r1
 800593c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005940:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005944:	f846 1b04 	str.w	r1, [r6], #4
 8005948:	e7dc      	b.n	8005904 <__mdiff+0xd4>
 800594a:	3f01      	subs	r7, #1
 800594c:	e7e6      	b.n	800591c <__mdiff+0xec>
 800594e:	bf00      	nop
 8005950:	080065f6 	.word	0x080065f6
 8005954:	08006607 	.word	0x08006607

08005958 <__d2b>:
 8005958:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800595c:	2101      	movs	r1, #1
 800595e:	4690      	mov	r8, r2
 8005960:	4699      	mov	r9, r3
 8005962:	9e08      	ldr	r6, [sp, #32]
 8005964:	f7ff fcd6 	bl	8005314 <_Balloc>
 8005968:	4604      	mov	r4, r0
 800596a:	b930      	cbnz	r0, 800597a <__d2b+0x22>
 800596c:	4602      	mov	r2, r0
 800596e:	f240 310f 	movw	r1, #783	@ 0x30f
 8005972:	4b23      	ldr	r3, [pc, #140]	@ (8005a00 <__d2b+0xa8>)
 8005974:	4823      	ldr	r0, [pc, #140]	@ (8005a04 <__d2b+0xac>)
 8005976:	f000 fa7f 	bl	8005e78 <__assert_func>
 800597a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800597e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005982:	b10d      	cbz	r5, 8005988 <__d2b+0x30>
 8005984:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005988:	9301      	str	r3, [sp, #4]
 800598a:	f1b8 0300 	subs.w	r3, r8, #0
 800598e:	d024      	beq.n	80059da <__d2b+0x82>
 8005990:	4668      	mov	r0, sp
 8005992:	9300      	str	r3, [sp, #0]
 8005994:	f7ff fd85 	bl	80054a2 <__lo0bits>
 8005998:	e9dd 1200 	ldrd	r1, r2, [sp]
 800599c:	b1d8      	cbz	r0, 80059d6 <__d2b+0x7e>
 800599e:	f1c0 0320 	rsb	r3, r0, #32
 80059a2:	fa02 f303 	lsl.w	r3, r2, r3
 80059a6:	430b      	orrs	r3, r1
 80059a8:	40c2      	lsrs	r2, r0
 80059aa:	6163      	str	r3, [r4, #20]
 80059ac:	9201      	str	r2, [sp, #4]
 80059ae:	9b01      	ldr	r3, [sp, #4]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	bf0c      	ite	eq
 80059b4:	2201      	moveq	r2, #1
 80059b6:	2202      	movne	r2, #2
 80059b8:	61a3      	str	r3, [r4, #24]
 80059ba:	6122      	str	r2, [r4, #16]
 80059bc:	b1ad      	cbz	r5, 80059ea <__d2b+0x92>
 80059be:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80059c2:	4405      	add	r5, r0
 80059c4:	6035      	str	r5, [r6, #0]
 80059c6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80059ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059cc:	6018      	str	r0, [r3, #0]
 80059ce:	4620      	mov	r0, r4
 80059d0:	b002      	add	sp, #8
 80059d2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80059d6:	6161      	str	r1, [r4, #20]
 80059d8:	e7e9      	b.n	80059ae <__d2b+0x56>
 80059da:	a801      	add	r0, sp, #4
 80059dc:	f7ff fd61 	bl	80054a2 <__lo0bits>
 80059e0:	9b01      	ldr	r3, [sp, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	6163      	str	r3, [r4, #20]
 80059e6:	3020      	adds	r0, #32
 80059e8:	e7e7      	b.n	80059ba <__d2b+0x62>
 80059ea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80059ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80059f2:	6030      	str	r0, [r6, #0]
 80059f4:	6918      	ldr	r0, [r3, #16]
 80059f6:	f7ff fd35 	bl	8005464 <__hi0bits>
 80059fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80059fe:	e7e4      	b.n	80059ca <__d2b+0x72>
 8005a00:	080065f6 	.word	0x080065f6
 8005a04:	08006607 	.word	0x08006607

08005a08 <__ssputs_r>:
 8005a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a0c:	461f      	mov	r7, r3
 8005a0e:	688e      	ldr	r6, [r1, #8]
 8005a10:	4682      	mov	sl, r0
 8005a12:	42be      	cmp	r6, r7
 8005a14:	460c      	mov	r4, r1
 8005a16:	4690      	mov	r8, r2
 8005a18:	680b      	ldr	r3, [r1, #0]
 8005a1a:	d82d      	bhi.n	8005a78 <__ssputs_r+0x70>
 8005a1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a20:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005a24:	d026      	beq.n	8005a74 <__ssputs_r+0x6c>
 8005a26:	6965      	ldr	r5, [r4, #20]
 8005a28:	6909      	ldr	r1, [r1, #16]
 8005a2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a2e:	eba3 0901 	sub.w	r9, r3, r1
 8005a32:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a36:	1c7b      	adds	r3, r7, #1
 8005a38:	444b      	add	r3, r9
 8005a3a:	106d      	asrs	r5, r5, #1
 8005a3c:	429d      	cmp	r5, r3
 8005a3e:	bf38      	it	cc
 8005a40:	461d      	movcc	r5, r3
 8005a42:	0553      	lsls	r3, r2, #21
 8005a44:	d527      	bpl.n	8005a96 <__ssputs_r+0x8e>
 8005a46:	4629      	mov	r1, r5
 8005a48:	f7ff fbd8 	bl	80051fc <_malloc_r>
 8005a4c:	4606      	mov	r6, r0
 8005a4e:	b360      	cbz	r0, 8005aaa <__ssputs_r+0xa2>
 8005a50:	464a      	mov	r2, r9
 8005a52:	6921      	ldr	r1, [r4, #16]
 8005a54:	f000 fa02 	bl	8005e5c <memcpy>
 8005a58:	89a3      	ldrh	r3, [r4, #12]
 8005a5a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005a5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a62:	81a3      	strh	r3, [r4, #12]
 8005a64:	6126      	str	r6, [r4, #16]
 8005a66:	444e      	add	r6, r9
 8005a68:	6026      	str	r6, [r4, #0]
 8005a6a:	463e      	mov	r6, r7
 8005a6c:	6165      	str	r5, [r4, #20]
 8005a6e:	eba5 0509 	sub.w	r5, r5, r9
 8005a72:	60a5      	str	r5, [r4, #8]
 8005a74:	42be      	cmp	r6, r7
 8005a76:	d900      	bls.n	8005a7a <__ssputs_r+0x72>
 8005a78:	463e      	mov	r6, r7
 8005a7a:	4632      	mov	r2, r6
 8005a7c:	4641      	mov	r1, r8
 8005a7e:	6820      	ldr	r0, [r4, #0]
 8005a80:	f000 f9c2 	bl	8005e08 <memmove>
 8005a84:	2000      	movs	r0, #0
 8005a86:	68a3      	ldr	r3, [r4, #8]
 8005a88:	1b9b      	subs	r3, r3, r6
 8005a8a:	60a3      	str	r3, [r4, #8]
 8005a8c:	6823      	ldr	r3, [r4, #0]
 8005a8e:	4433      	add	r3, r6
 8005a90:	6023      	str	r3, [r4, #0]
 8005a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a96:	462a      	mov	r2, r5
 8005a98:	f000 fa32 	bl	8005f00 <_realloc_r>
 8005a9c:	4606      	mov	r6, r0
 8005a9e:	2800      	cmp	r0, #0
 8005aa0:	d1e0      	bne.n	8005a64 <__ssputs_r+0x5c>
 8005aa2:	4650      	mov	r0, sl
 8005aa4:	6921      	ldr	r1, [r4, #16]
 8005aa6:	f7ff fb37 	bl	8005118 <_free_r>
 8005aaa:	230c      	movs	r3, #12
 8005aac:	f8ca 3000 	str.w	r3, [sl]
 8005ab0:	89a3      	ldrh	r3, [r4, #12]
 8005ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ab6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005aba:	81a3      	strh	r3, [r4, #12]
 8005abc:	e7e9      	b.n	8005a92 <__ssputs_r+0x8a>
	...

08005ac0 <_svfiprintf_r>:
 8005ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ac4:	4698      	mov	r8, r3
 8005ac6:	898b      	ldrh	r3, [r1, #12]
 8005ac8:	4607      	mov	r7, r0
 8005aca:	061b      	lsls	r3, r3, #24
 8005acc:	460d      	mov	r5, r1
 8005ace:	4614      	mov	r4, r2
 8005ad0:	b09d      	sub	sp, #116	@ 0x74
 8005ad2:	d510      	bpl.n	8005af6 <_svfiprintf_r+0x36>
 8005ad4:	690b      	ldr	r3, [r1, #16]
 8005ad6:	b973      	cbnz	r3, 8005af6 <_svfiprintf_r+0x36>
 8005ad8:	2140      	movs	r1, #64	@ 0x40
 8005ada:	f7ff fb8f 	bl	80051fc <_malloc_r>
 8005ade:	6028      	str	r0, [r5, #0]
 8005ae0:	6128      	str	r0, [r5, #16]
 8005ae2:	b930      	cbnz	r0, 8005af2 <_svfiprintf_r+0x32>
 8005ae4:	230c      	movs	r3, #12
 8005ae6:	603b      	str	r3, [r7, #0]
 8005ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8005aec:	b01d      	add	sp, #116	@ 0x74
 8005aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005af2:	2340      	movs	r3, #64	@ 0x40
 8005af4:	616b      	str	r3, [r5, #20]
 8005af6:	2300      	movs	r3, #0
 8005af8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005afa:	2320      	movs	r3, #32
 8005afc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b00:	2330      	movs	r3, #48	@ 0x30
 8005b02:	f04f 0901 	mov.w	r9, #1
 8005b06:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b0a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005ca4 <_svfiprintf_r+0x1e4>
 8005b0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b12:	4623      	mov	r3, r4
 8005b14:	469a      	mov	sl, r3
 8005b16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b1a:	b10a      	cbz	r2, 8005b20 <_svfiprintf_r+0x60>
 8005b1c:	2a25      	cmp	r2, #37	@ 0x25
 8005b1e:	d1f9      	bne.n	8005b14 <_svfiprintf_r+0x54>
 8005b20:	ebba 0b04 	subs.w	fp, sl, r4
 8005b24:	d00b      	beq.n	8005b3e <_svfiprintf_r+0x7e>
 8005b26:	465b      	mov	r3, fp
 8005b28:	4622      	mov	r2, r4
 8005b2a:	4629      	mov	r1, r5
 8005b2c:	4638      	mov	r0, r7
 8005b2e:	f7ff ff6b 	bl	8005a08 <__ssputs_r>
 8005b32:	3001      	adds	r0, #1
 8005b34:	f000 80a7 	beq.w	8005c86 <_svfiprintf_r+0x1c6>
 8005b38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b3a:	445a      	add	r2, fp
 8005b3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b3e:	f89a 3000 	ldrb.w	r3, [sl]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f000 809f 	beq.w	8005c86 <_svfiprintf_r+0x1c6>
 8005b48:	2300      	movs	r3, #0
 8005b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b52:	f10a 0a01 	add.w	sl, sl, #1
 8005b56:	9304      	str	r3, [sp, #16]
 8005b58:	9307      	str	r3, [sp, #28]
 8005b5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005b5e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005b60:	4654      	mov	r4, sl
 8005b62:	2205      	movs	r2, #5
 8005b64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b68:	484e      	ldr	r0, [pc, #312]	@ (8005ca4 <_svfiprintf_r+0x1e4>)
 8005b6a:	f7fe fc6a 	bl	8004442 <memchr>
 8005b6e:	9a04      	ldr	r2, [sp, #16]
 8005b70:	b9d8      	cbnz	r0, 8005baa <_svfiprintf_r+0xea>
 8005b72:	06d0      	lsls	r0, r2, #27
 8005b74:	bf44      	itt	mi
 8005b76:	2320      	movmi	r3, #32
 8005b78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b7c:	0711      	lsls	r1, r2, #28
 8005b7e:	bf44      	itt	mi
 8005b80:	232b      	movmi	r3, #43	@ 0x2b
 8005b82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b86:	f89a 3000 	ldrb.w	r3, [sl]
 8005b8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b8c:	d015      	beq.n	8005bba <_svfiprintf_r+0xfa>
 8005b8e:	4654      	mov	r4, sl
 8005b90:	2000      	movs	r0, #0
 8005b92:	f04f 0c0a 	mov.w	ip, #10
 8005b96:	9a07      	ldr	r2, [sp, #28]
 8005b98:	4621      	mov	r1, r4
 8005b9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b9e:	3b30      	subs	r3, #48	@ 0x30
 8005ba0:	2b09      	cmp	r3, #9
 8005ba2:	d94b      	bls.n	8005c3c <_svfiprintf_r+0x17c>
 8005ba4:	b1b0      	cbz	r0, 8005bd4 <_svfiprintf_r+0x114>
 8005ba6:	9207      	str	r2, [sp, #28]
 8005ba8:	e014      	b.n	8005bd4 <_svfiprintf_r+0x114>
 8005baa:	eba0 0308 	sub.w	r3, r0, r8
 8005bae:	fa09 f303 	lsl.w	r3, r9, r3
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	46a2      	mov	sl, r4
 8005bb6:	9304      	str	r3, [sp, #16]
 8005bb8:	e7d2      	b.n	8005b60 <_svfiprintf_r+0xa0>
 8005bba:	9b03      	ldr	r3, [sp, #12]
 8005bbc:	1d19      	adds	r1, r3, #4
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	9103      	str	r1, [sp, #12]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	bfbb      	ittet	lt
 8005bc6:	425b      	neglt	r3, r3
 8005bc8:	f042 0202 	orrlt.w	r2, r2, #2
 8005bcc:	9307      	strge	r3, [sp, #28]
 8005bce:	9307      	strlt	r3, [sp, #28]
 8005bd0:	bfb8      	it	lt
 8005bd2:	9204      	strlt	r2, [sp, #16]
 8005bd4:	7823      	ldrb	r3, [r4, #0]
 8005bd6:	2b2e      	cmp	r3, #46	@ 0x2e
 8005bd8:	d10a      	bne.n	8005bf0 <_svfiprintf_r+0x130>
 8005bda:	7863      	ldrb	r3, [r4, #1]
 8005bdc:	2b2a      	cmp	r3, #42	@ 0x2a
 8005bde:	d132      	bne.n	8005c46 <_svfiprintf_r+0x186>
 8005be0:	9b03      	ldr	r3, [sp, #12]
 8005be2:	3402      	adds	r4, #2
 8005be4:	1d1a      	adds	r2, r3, #4
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	9203      	str	r2, [sp, #12]
 8005bea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005bee:	9305      	str	r3, [sp, #20]
 8005bf0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005ca8 <_svfiprintf_r+0x1e8>
 8005bf4:	2203      	movs	r2, #3
 8005bf6:	4650      	mov	r0, sl
 8005bf8:	7821      	ldrb	r1, [r4, #0]
 8005bfa:	f7fe fc22 	bl	8004442 <memchr>
 8005bfe:	b138      	cbz	r0, 8005c10 <_svfiprintf_r+0x150>
 8005c00:	2240      	movs	r2, #64	@ 0x40
 8005c02:	9b04      	ldr	r3, [sp, #16]
 8005c04:	eba0 000a 	sub.w	r0, r0, sl
 8005c08:	4082      	lsls	r2, r0
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	3401      	adds	r4, #1
 8005c0e:	9304      	str	r3, [sp, #16]
 8005c10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c14:	2206      	movs	r2, #6
 8005c16:	4825      	ldr	r0, [pc, #148]	@ (8005cac <_svfiprintf_r+0x1ec>)
 8005c18:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005c1c:	f7fe fc11 	bl	8004442 <memchr>
 8005c20:	2800      	cmp	r0, #0
 8005c22:	d036      	beq.n	8005c92 <_svfiprintf_r+0x1d2>
 8005c24:	4b22      	ldr	r3, [pc, #136]	@ (8005cb0 <_svfiprintf_r+0x1f0>)
 8005c26:	bb1b      	cbnz	r3, 8005c70 <_svfiprintf_r+0x1b0>
 8005c28:	9b03      	ldr	r3, [sp, #12]
 8005c2a:	3307      	adds	r3, #7
 8005c2c:	f023 0307 	bic.w	r3, r3, #7
 8005c30:	3308      	adds	r3, #8
 8005c32:	9303      	str	r3, [sp, #12]
 8005c34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c36:	4433      	add	r3, r6
 8005c38:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c3a:	e76a      	b.n	8005b12 <_svfiprintf_r+0x52>
 8005c3c:	460c      	mov	r4, r1
 8005c3e:	2001      	movs	r0, #1
 8005c40:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c44:	e7a8      	b.n	8005b98 <_svfiprintf_r+0xd8>
 8005c46:	2300      	movs	r3, #0
 8005c48:	f04f 0c0a 	mov.w	ip, #10
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	3401      	adds	r4, #1
 8005c50:	9305      	str	r3, [sp, #20]
 8005c52:	4620      	mov	r0, r4
 8005c54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c58:	3a30      	subs	r2, #48	@ 0x30
 8005c5a:	2a09      	cmp	r2, #9
 8005c5c:	d903      	bls.n	8005c66 <_svfiprintf_r+0x1a6>
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d0c6      	beq.n	8005bf0 <_svfiprintf_r+0x130>
 8005c62:	9105      	str	r1, [sp, #20]
 8005c64:	e7c4      	b.n	8005bf0 <_svfiprintf_r+0x130>
 8005c66:	4604      	mov	r4, r0
 8005c68:	2301      	movs	r3, #1
 8005c6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c6e:	e7f0      	b.n	8005c52 <_svfiprintf_r+0x192>
 8005c70:	ab03      	add	r3, sp, #12
 8005c72:	9300      	str	r3, [sp, #0]
 8005c74:	462a      	mov	r2, r5
 8005c76:	4638      	mov	r0, r7
 8005c78:	4b0e      	ldr	r3, [pc, #56]	@ (8005cb4 <_svfiprintf_r+0x1f4>)
 8005c7a:	a904      	add	r1, sp, #16
 8005c7c:	f7fd fe6a 	bl	8003954 <_printf_float>
 8005c80:	1c42      	adds	r2, r0, #1
 8005c82:	4606      	mov	r6, r0
 8005c84:	d1d6      	bne.n	8005c34 <_svfiprintf_r+0x174>
 8005c86:	89ab      	ldrh	r3, [r5, #12]
 8005c88:	065b      	lsls	r3, r3, #25
 8005c8a:	f53f af2d 	bmi.w	8005ae8 <_svfiprintf_r+0x28>
 8005c8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005c90:	e72c      	b.n	8005aec <_svfiprintf_r+0x2c>
 8005c92:	ab03      	add	r3, sp, #12
 8005c94:	9300      	str	r3, [sp, #0]
 8005c96:	462a      	mov	r2, r5
 8005c98:	4638      	mov	r0, r7
 8005c9a:	4b06      	ldr	r3, [pc, #24]	@ (8005cb4 <_svfiprintf_r+0x1f4>)
 8005c9c:	a904      	add	r1, sp, #16
 8005c9e:	f7fe f8f7 	bl	8003e90 <_printf_i>
 8005ca2:	e7ed      	b.n	8005c80 <_svfiprintf_r+0x1c0>
 8005ca4:	08006660 	.word	0x08006660
 8005ca8:	08006666 	.word	0x08006666
 8005cac:	0800666a 	.word	0x0800666a
 8005cb0:	08003955 	.word	0x08003955
 8005cb4:	08005a09 	.word	0x08005a09

08005cb8 <__sflush_r>:
 8005cb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cbe:	0716      	lsls	r6, r2, #28
 8005cc0:	4605      	mov	r5, r0
 8005cc2:	460c      	mov	r4, r1
 8005cc4:	d454      	bmi.n	8005d70 <__sflush_r+0xb8>
 8005cc6:	684b      	ldr	r3, [r1, #4]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	dc02      	bgt.n	8005cd2 <__sflush_r+0x1a>
 8005ccc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	dd48      	ble.n	8005d64 <__sflush_r+0xac>
 8005cd2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005cd4:	2e00      	cmp	r6, #0
 8005cd6:	d045      	beq.n	8005d64 <__sflush_r+0xac>
 8005cd8:	2300      	movs	r3, #0
 8005cda:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005cde:	682f      	ldr	r7, [r5, #0]
 8005ce0:	6a21      	ldr	r1, [r4, #32]
 8005ce2:	602b      	str	r3, [r5, #0]
 8005ce4:	d030      	beq.n	8005d48 <__sflush_r+0x90>
 8005ce6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005ce8:	89a3      	ldrh	r3, [r4, #12]
 8005cea:	0759      	lsls	r1, r3, #29
 8005cec:	d505      	bpl.n	8005cfa <__sflush_r+0x42>
 8005cee:	6863      	ldr	r3, [r4, #4]
 8005cf0:	1ad2      	subs	r2, r2, r3
 8005cf2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005cf4:	b10b      	cbz	r3, 8005cfa <__sflush_r+0x42>
 8005cf6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005cf8:	1ad2      	subs	r2, r2, r3
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	4628      	mov	r0, r5
 8005cfe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005d00:	6a21      	ldr	r1, [r4, #32]
 8005d02:	47b0      	blx	r6
 8005d04:	1c43      	adds	r3, r0, #1
 8005d06:	89a3      	ldrh	r3, [r4, #12]
 8005d08:	d106      	bne.n	8005d18 <__sflush_r+0x60>
 8005d0a:	6829      	ldr	r1, [r5, #0]
 8005d0c:	291d      	cmp	r1, #29
 8005d0e:	d82b      	bhi.n	8005d68 <__sflush_r+0xb0>
 8005d10:	4a28      	ldr	r2, [pc, #160]	@ (8005db4 <__sflush_r+0xfc>)
 8005d12:	40ca      	lsrs	r2, r1
 8005d14:	07d6      	lsls	r6, r2, #31
 8005d16:	d527      	bpl.n	8005d68 <__sflush_r+0xb0>
 8005d18:	2200      	movs	r2, #0
 8005d1a:	6062      	str	r2, [r4, #4]
 8005d1c:	6922      	ldr	r2, [r4, #16]
 8005d1e:	04d9      	lsls	r1, r3, #19
 8005d20:	6022      	str	r2, [r4, #0]
 8005d22:	d504      	bpl.n	8005d2e <__sflush_r+0x76>
 8005d24:	1c42      	adds	r2, r0, #1
 8005d26:	d101      	bne.n	8005d2c <__sflush_r+0x74>
 8005d28:	682b      	ldr	r3, [r5, #0]
 8005d2a:	b903      	cbnz	r3, 8005d2e <__sflush_r+0x76>
 8005d2c:	6560      	str	r0, [r4, #84]	@ 0x54
 8005d2e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d30:	602f      	str	r7, [r5, #0]
 8005d32:	b1b9      	cbz	r1, 8005d64 <__sflush_r+0xac>
 8005d34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d38:	4299      	cmp	r1, r3
 8005d3a:	d002      	beq.n	8005d42 <__sflush_r+0x8a>
 8005d3c:	4628      	mov	r0, r5
 8005d3e:	f7ff f9eb 	bl	8005118 <_free_r>
 8005d42:	2300      	movs	r3, #0
 8005d44:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d46:	e00d      	b.n	8005d64 <__sflush_r+0xac>
 8005d48:	2301      	movs	r3, #1
 8005d4a:	4628      	mov	r0, r5
 8005d4c:	47b0      	blx	r6
 8005d4e:	4602      	mov	r2, r0
 8005d50:	1c50      	adds	r0, r2, #1
 8005d52:	d1c9      	bne.n	8005ce8 <__sflush_r+0x30>
 8005d54:	682b      	ldr	r3, [r5, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d0c6      	beq.n	8005ce8 <__sflush_r+0x30>
 8005d5a:	2b1d      	cmp	r3, #29
 8005d5c:	d001      	beq.n	8005d62 <__sflush_r+0xaa>
 8005d5e:	2b16      	cmp	r3, #22
 8005d60:	d11d      	bne.n	8005d9e <__sflush_r+0xe6>
 8005d62:	602f      	str	r7, [r5, #0]
 8005d64:	2000      	movs	r0, #0
 8005d66:	e021      	b.n	8005dac <__sflush_r+0xf4>
 8005d68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d6c:	b21b      	sxth	r3, r3
 8005d6e:	e01a      	b.n	8005da6 <__sflush_r+0xee>
 8005d70:	690f      	ldr	r7, [r1, #16]
 8005d72:	2f00      	cmp	r7, #0
 8005d74:	d0f6      	beq.n	8005d64 <__sflush_r+0xac>
 8005d76:	0793      	lsls	r3, r2, #30
 8005d78:	bf18      	it	ne
 8005d7a:	2300      	movne	r3, #0
 8005d7c:	680e      	ldr	r6, [r1, #0]
 8005d7e:	bf08      	it	eq
 8005d80:	694b      	ldreq	r3, [r1, #20]
 8005d82:	1bf6      	subs	r6, r6, r7
 8005d84:	600f      	str	r7, [r1, #0]
 8005d86:	608b      	str	r3, [r1, #8]
 8005d88:	2e00      	cmp	r6, #0
 8005d8a:	ddeb      	ble.n	8005d64 <__sflush_r+0xac>
 8005d8c:	4633      	mov	r3, r6
 8005d8e:	463a      	mov	r2, r7
 8005d90:	4628      	mov	r0, r5
 8005d92:	6a21      	ldr	r1, [r4, #32]
 8005d94:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005d98:	47e0      	blx	ip
 8005d9a:	2800      	cmp	r0, #0
 8005d9c:	dc07      	bgt.n	8005dae <__sflush_r+0xf6>
 8005d9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005da2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005da6:	f04f 30ff 	mov.w	r0, #4294967295
 8005daa:	81a3      	strh	r3, [r4, #12]
 8005dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dae:	4407      	add	r7, r0
 8005db0:	1a36      	subs	r6, r6, r0
 8005db2:	e7e9      	b.n	8005d88 <__sflush_r+0xd0>
 8005db4:	20400001 	.word	0x20400001

08005db8 <_fflush_r>:
 8005db8:	b538      	push	{r3, r4, r5, lr}
 8005dba:	690b      	ldr	r3, [r1, #16]
 8005dbc:	4605      	mov	r5, r0
 8005dbe:	460c      	mov	r4, r1
 8005dc0:	b913      	cbnz	r3, 8005dc8 <_fflush_r+0x10>
 8005dc2:	2500      	movs	r5, #0
 8005dc4:	4628      	mov	r0, r5
 8005dc6:	bd38      	pop	{r3, r4, r5, pc}
 8005dc8:	b118      	cbz	r0, 8005dd2 <_fflush_r+0x1a>
 8005dca:	6a03      	ldr	r3, [r0, #32]
 8005dcc:	b90b      	cbnz	r3, 8005dd2 <_fflush_r+0x1a>
 8005dce:	f7fe fa09 	bl	80041e4 <__sinit>
 8005dd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d0f3      	beq.n	8005dc2 <_fflush_r+0xa>
 8005dda:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005ddc:	07d0      	lsls	r0, r2, #31
 8005dde:	d404      	bmi.n	8005dea <_fflush_r+0x32>
 8005de0:	0599      	lsls	r1, r3, #22
 8005de2:	d402      	bmi.n	8005dea <_fflush_r+0x32>
 8005de4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005de6:	f7fe fb2a 	bl	800443e <__retarget_lock_acquire_recursive>
 8005dea:	4628      	mov	r0, r5
 8005dec:	4621      	mov	r1, r4
 8005dee:	f7ff ff63 	bl	8005cb8 <__sflush_r>
 8005df2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005df4:	4605      	mov	r5, r0
 8005df6:	07da      	lsls	r2, r3, #31
 8005df8:	d4e4      	bmi.n	8005dc4 <_fflush_r+0xc>
 8005dfa:	89a3      	ldrh	r3, [r4, #12]
 8005dfc:	059b      	lsls	r3, r3, #22
 8005dfe:	d4e1      	bmi.n	8005dc4 <_fflush_r+0xc>
 8005e00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e02:	f7fe fb1d 	bl	8004440 <__retarget_lock_release_recursive>
 8005e06:	e7dd      	b.n	8005dc4 <_fflush_r+0xc>

08005e08 <memmove>:
 8005e08:	4288      	cmp	r0, r1
 8005e0a:	b510      	push	{r4, lr}
 8005e0c:	eb01 0402 	add.w	r4, r1, r2
 8005e10:	d902      	bls.n	8005e18 <memmove+0x10>
 8005e12:	4284      	cmp	r4, r0
 8005e14:	4623      	mov	r3, r4
 8005e16:	d807      	bhi.n	8005e28 <memmove+0x20>
 8005e18:	1e43      	subs	r3, r0, #1
 8005e1a:	42a1      	cmp	r1, r4
 8005e1c:	d008      	beq.n	8005e30 <memmove+0x28>
 8005e1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e26:	e7f8      	b.n	8005e1a <memmove+0x12>
 8005e28:	4601      	mov	r1, r0
 8005e2a:	4402      	add	r2, r0
 8005e2c:	428a      	cmp	r2, r1
 8005e2e:	d100      	bne.n	8005e32 <memmove+0x2a>
 8005e30:	bd10      	pop	{r4, pc}
 8005e32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e3a:	e7f7      	b.n	8005e2c <memmove+0x24>

08005e3c <_sbrk_r>:
 8005e3c:	b538      	push	{r3, r4, r5, lr}
 8005e3e:	2300      	movs	r3, #0
 8005e40:	4d05      	ldr	r5, [pc, #20]	@ (8005e58 <_sbrk_r+0x1c>)
 8005e42:	4604      	mov	r4, r0
 8005e44:	4608      	mov	r0, r1
 8005e46:	602b      	str	r3, [r5, #0]
 8005e48:	f7fb fde4 	bl	8001a14 <_sbrk>
 8005e4c:	1c43      	adds	r3, r0, #1
 8005e4e:	d102      	bne.n	8005e56 <_sbrk_r+0x1a>
 8005e50:	682b      	ldr	r3, [r5, #0]
 8005e52:	b103      	cbz	r3, 8005e56 <_sbrk_r+0x1a>
 8005e54:	6023      	str	r3, [r4, #0]
 8005e56:	bd38      	pop	{r3, r4, r5, pc}
 8005e58:	2000066c 	.word	0x2000066c

08005e5c <memcpy>:
 8005e5c:	440a      	add	r2, r1
 8005e5e:	4291      	cmp	r1, r2
 8005e60:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e64:	d100      	bne.n	8005e68 <memcpy+0xc>
 8005e66:	4770      	bx	lr
 8005e68:	b510      	push	{r4, lr}
 8005e6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e6e:	4291      	cmp	r1, r2
 8005e70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e74:	d1f9      	bne.n	8005e6a <memcpy+0xe>
 8005e76:	bd10      	pop	{r4, pc}

08005e78 <__assert_func>:
 8005e78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005e7a:	4614      	mov	r4, r2
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	4b09      	ldr	r3, [pc, #36]	@ (8005ea4 <__assert_func+0x2c>)
 8005e80:	4605      	mov	r5, r0
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68d8      	ldr	r0, [r3, #12]
 8005e86:	b14c      	cbz	r4, 8005e9c <__assert_func+0x24>
 8005e88:	4b07      	ldr	r3, [pc, #28]	@ (8005ea8 <__assert_func+0x30>)
 8005e8a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005e8e:	9100      	str	r1, [sp, #0]
 8005e90:	462b      	mov	r3, r5
 8005e92:	4906      	ldr	r1, [pc, #24]	@ (8005eac <__assert_func+0x34>)
 8005e94:	f000 f870 	bl	8005f78 <fiprintf>
 8005e98:	f000 f880 	bl	8005f9c <abort>
 8005e9c:	4b04      	ldr	r3, [pc, #16]	@ (8005eb0 <__assert_func+0x38>)
 8005e9e:	461c      	mov	r4, r3
 8005ea0:	e7f3      	b.n	8005e8a <__assert_func+0x12>
 8005ea2:	bf00      	nop
 8005ea4:	20000020 	.word	0x20000020
 8005ea8:	0800667b 	.word	0x0800667b
 8005eac:	08006688 	.word	0x08006688
 8005eb0:	080066b6 	.word	0x080066b6

08005eb4 <_calloc_r>:
 8005eb4:	b570      	push	{r4, r5, r6, lr}
 8005eb6:	fba1 5402 	umull	r5, r4, r1, r2
 8005eba:	b934      	cbnz	r4, 8005eca <_calloc_r+0x16>
 8005ebc:	4629      	mov	r1, r5
 8005ebe:	f7ff f99d 	bl	80051fc <_malloc_r>
 8005ec2:	4606      	mov	r6, r0
 8005ec4:	b928      	cbnz	r0, 8005ed2 <_calloc_r+0x1e>
 8005ec6:	4630      	mov	r0, r6
 8005ec8:	bd70      	pop	{r4, r5, r6, pc}
 8005eca:	220c      	movs	r2, #12
 8005ecc:	2600      	movs	r6, #0
 8005ece:	6002      	str	r2, [r0, #0]
 8005ed0:	e7f9      	b.n	8005ec6 <_calloc_r+0x12>
 8005ed2:	462a      	mov	r2, r5
 8005ed4:	4621      	mov	r1, r4
 8005ed6:	f7fe fa34 	bl	8004342 <memset>
 8005eda:	e7f4      	b.n	8005ec6 <_calloc_r+0x12>

08005edc <__ascii_mbtowc>:
 8005edc:	b082      	sub	sp, #8
 8005ede:	b901      	cbnz	r1, 8005ee2 <__ascii_mbtowc+0x6>
 8005ee0:	a901      	add	r1, sp, #4
 8005ee2:	b142      	cbz	r2, 8005ef6 <__ascii_mbtowc+0x1a>
 8005ee4:	b14b      	cbz	r3, 8005efa <__ascii_mbtowc+0x1e>
 8005ee6:	7813      	ldrb	r3, [r2, #0]
 8005ee8:	600b      	str	r3, [r1, #0]
 8005eea:	7812      	ldrb	r2, [r2, #0]
 8005eec:	1e10      	subs	r0, r2, #0
 8005eee:	bf18      	it	ne
 8005ef0:	2001      	movne	r0, #1
 8005ef2:	b002      	add	sp, #8
 8005ef4:	4770      	bx	lr
 8005ef6:	4610      	mov	r0, r2
 8005ef8:	e7fb      	b.n	8005ef2 <__ascii_mbtowc+0x16>
 8005efa:	f06f 0001 	mvn.w	r0, #1
 8005efe:	e7f8      	b.n	8005ef2 <__ascii_mbtowc+0x16>

08005f00 <_realloc_r>:
 8005f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f04:	4607      	mov	r7, r0
 8005f06:	4614      	mov	r4, r2
 8005f08:	460d      	mov	r5, r1
 8005f0a:	b921      	cbnz	r1, 8005f16 <_realloc_r+0x16>
 8005f0c:	4611      	mov	r1, r2
 8005f0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f12:	f7ff b973 	b.w	80051fc <_malloc_r>
 8005f16:	b92a      	cbnz	r2, 8005f24 <_realloc_r+0x24>
 8005f18:	f7ff f8fe 	bl	8005118 <_free_r>
 8005f1c:	4625      	mov	r5, r4
 8005f1e:	4628      	mov	r0, r5
 8005f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f24:	f000 f841 	bl	8005faa <_malloc_usable_size_r>
 8005f28:	4284      	cmp	r4, r0
 8005f2a:	4606      	mov	r6, r0
 8005f2c:	d802      	bhi.n	8005f34 <_realloc_r+0x34>
 8005f2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005f32:	d8f4      	bhi.n	8005f1e <_realloc_r+0x1e>
 8005f34:	4621      	mov	r1, r4
 8005f36:	4638      	mov	r0, r7
 8005f38:	f7ff f960 	bl	80051fc <_malloc_r>
 8005f3c:	4680      	mov	r8, r0
 8005f3e:	b908      	cbnz	r0, 8005f44 <_realloc_r+0x44>
 8005f40:	4645      	mov	r5, r8
 8005f42:	e7ec      	b.n	8005f1e <_realloc_r+0x1e>
 8005f44:	42b4      	cmp	r4, r6
 8005f46:	4622      	mov	r2, r4
 8005f48:	4629      	mov	r1, r5
 8005f4a:	bf28      	it	cs
 8005f4c:	4632      	movcs	r2, r6
 8005f4e:	f7ff ff85 	bl	8005e5c <memcpy>
 8005f52:	4629      	mov	r1, r5
 8005f54:	4638      	mov	r0, r7
 8005f56:	f7ff f8df 	bl	8005118 <_free_r>
 8005f5a:	e7f1      	b.n	8005f40 <_realloc_r+0x40>

08005f5c <__ascii_wctomb>:
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	4608      	mov	r0, r1
 8005f60:	b141      	cbz	r1, 8005f74 <__ascii_wctomb+0x18>
 8005f62:	2aff      	cmp	r2, #255	@ 0xff
 8005f64:	d904      	bls.n	8005f70 <__ascii_wctomb+0x14>
 8005f66:	228a      	movs	r2, #138	@ 0x8a
 8005f68:	f04f 30ff 	mov.w	r0, #4294967295
 8005f6c:	601a      	str	r2, [r3, #0]
 8005f6e:	4770      	bx	lr
 8005f70:	2001      	movs	r0, #1
 8005f72:	700a      	strb	r2, [r1, #0]
 8005f74:	4770      	bx	lr
	...

08005f78 <fiprintf>:
 8005f78:	b40e      	push	{r1, r2, r3}
 8005f7a:	b503      	push	{r0, r1, lr}
 8005f7c:	4601      	mov	r1, r0
 8005f7e:	ab03      	add	r3, sp, #12
 8005f80:	4805      	ldr	r0, [pc, #20]	@ (8005f98 <fiprintf+0x20>)
 8005f82:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f86:	6800      	ldr	r0, [r0, #0]
 8005f88:	9301      	str	r3, [sp, #4]
 8005f8a:	f000 f83d 	bl	8006008 <_vfiprintf_r>
 8005f8e:	b002      	add	sp, #8
 8005f90:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f94:	b003      	add	sp, #12
 8005f96:	4770      	bx	lr
 8005f98:	20000020 	.word	0x20000020

08005f9c <abort>:
 8005f9c:	2006      	movs	r0, #6
 8005f9e:	b508      	push	{r3, lr}
 8005fa0:	f000 fa06 	bl	80063b0 <raise>
 8005fa4:	2001      	movs	r0, #1
 8005fa6:	f7fb fcc0 	bl	800192a <_exit>

08005faa <_malloc_usable_size_r>:
 8005faa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fae:	1f18      	subs	r0, r3, #4
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	bfbc      	itt	lt
 8005fb4:	580b      	ldrlt	r3, [r1, r0]
 8005fb6:	18c0      	addlt	r0, r0, r3
 8005fb8:	4770      	bx	lr

08005fba <__sfputc_r>:
 8005fba:	6893      	ldr	r3, [r2, #8]
 8005fbc:	b410      	push	{r4}
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	6093      	str	r3, [r2, #8]
 8005fc4:	da07      	bge.n	8005fd6 <__sfputc_r+0x1c>
 8005fc6:	6994      	ldr	r4, [r2, #24]
 8005fc8:	42a3      	cmp	r3, r4
 8005fca:	db01      	blt.n	8005fd0 <__sfputc_r+0x16>
 8005fcc:	290a      	cmp	r1, #10
 8005fce:	d102      	bne.n	8005fd6 <__sfputc_r+0x1c>
 8005fd0:	bc10      	pop	{r4}
 8005fd2:	f000 b931 	b.w	8006238 <__swbuf_r>
 8005fd6:	6813      	ldr	r3, [r2, #0]
 8005fd8:	1c58      	adds	r0, r3, #1
 8005fda:	6010      	str	r0, [r2, #0]
 8005fdc:	7019      	strb	r1, [r3, #0]
 8005fde:	4608      	mov	r0, r1
 8005fe0:	bc10      	pop	{r4}
 8005fe2:	4770      	bx	lr

08005fe4 <__sfputs_r>:
 8005fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fe6:	4606      	mov	r6, r0
 8005fe8:	460f      	mov	r7, r1
 8005fea:	4614      	mov	r4, r2
 8005fec:	18d5      	adds	r5, r2, r3
 8005fee:	42ac      	cmp	r4, r5
 8005ff0:	d101      	bne.n	8005ff6 <__sfputs_r+0x12>
 8005ff2:	2000      	movs	r0, #0
 8005ff4:	e007      	b.n	8006006 <__sfputs_r+0x22>
 8005ff6:	463a      	mov	r2, r7
 8005ff8:	4630      	mov	r0, r6
 8005ffa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ffe:	f7ff ffdc 	bl	8005fba <__sfputc_r>
 8006002:	1c43      	adds	r3, r0, #1
 8006004:	d1f3      	bne.n	8005fee <__sfputs_r+0xa>
 8006006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006008 <_vfiprintf_r>:
 8006008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800600c:	460d      	mov	r5, r1
 800600e:	4614      	mov	r4, r2
 8006010:	4698      	mov	r8, r3
 8006012:	4606      	mov	r6, r0
 8006014:	b09d      	sub	sp, #116	@ 0x74
 8006016:	b118      	cbz	r0, 8006020 <_vfiprintf_r+0x18>
 8006018:	6a03      	ldr	r3, [r0, #32]
 800601a:	b90b      	cbnz	r3, 8006020 <_vfiprintf_r+0x18>
 800601c:	f7fe f8e2 	bl	80041e4 <__sinit>
 8006020:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006022:	07d9      	lsls	r1, r3, #31
 8006024:	d405      	bmi.n	8006032 <_vfiprintf_r+0x2a>
 8006026:	89ab      	ldrh	r3, [r5, #12]
 8006028:	059a      	lsls	r2, r3, #22
 800602a:	d402      	bmi.n	8006032 <_vfiprintf_r+0x2a>
 800602c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800602e:	f7fe fa06 	bl	800443e <__retarget_lock_acquire_recursive>
 8006032:	89ab      	ldrh	r3, [r5, #12]
 8006034:	071b      	lsls	r3, r3, #28
 8006036:	d501      	bpl.n	800603c <_vfiprintf_r+0x34>
 8006038:	692b      	ldr	r3, [r5, #16]
 800603a:	b99b      	cbnz	r3, 8006064 <_vfiprintf_r+0x5c>
 800603c:	4629      	mov	r1, r5
 800603e:	4630      	mov	r0, r6
 8006040:	f000 f938 	bl	80062b4 <__swsetup_r>
 8006044:	b170      	cbz	r0, 8006064 <_vfiprintf_r+0x5c>
 8006046:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006048:	07dc      	lsls	r4, r3, #31
 800604a:	d504      	bpl.n	8006056 <_vfiprintf_r+0x4e>
 800604c:	f04f 30ff 	mov.w	r0, #4294967295
 8006050:	b01d      	add	sp, #116	@ 0x74
 8006052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006056:	89ab      	ldrh	r3, [r5, #12]
 8006058:	0598      	lsls	r0, r3, #22
 800605a:	d4f7      	bmi.n	800604c <_vfiprintf_r+0x44>
 800605c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800605e:	f7fe f9ef 	bl	8004440 <__retarget_lock_release_recursive>
 8006062:	e7f3      	b.n	800604c <_vfiprintf_r+0x44>
 8006064:	2300      	movs	r3, #0
 8006066:	9309      	str	r3, [sp, #36]	@ 0x24
 8006068:	2320      	movs	r3, #32
 800606a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800606e:	2330      	movs	r3, #48	@ 0x30
 8006070:	f04f 0901 	mov.w	r9, #1
 8006074:	f8cd 800c 	str.w	r8, [sp, #12]
 8006078:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006224 <_vfiprintf_r+0x21c>
 800607c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006080:	4623      	mov	r3, r4
 8006082:	469a      	mov	sl, r3
 8006084:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006088:	b10a      	cbz	r2, 800608e <_vfiprintf_r+0x86>
 800608a:	2a25      	cmp	r2, #37	@ 0x25
 800608c:	d1f9      	bne.n	8006082 <_vfiprintf_r+0x7a>
 800608e:	ebba 0b04 	subs.w	fp, sl, r4
 8006092:	d00b      	beq.n	80060ac <_vfiprintf_r+0xa4>
 8006094:	465b      	mov	r3, fp
 8006096:	4622      	mov	r2, r4
 8006098:	4629      	mov	r1, r5
 800609a:	4630      	mov	r0, r6
 800609c:	f7ff ffa2 	bl	8005fe4 <__sfputs_r>
 80060a0:	3001      	adds	r0, #1
 80060a2:	f000 80a7 	beq.w	80061f4 <_vfiprintf_r+0x1ec>
 80060a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80060a8:	445a      	add	r2, fp
 80060aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80060ac:	f89a 3000 	ldrb.w	r3, [sl]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f000 809f 	beq.w	80061f4 <_vfiprintf_r+0x1ec>
 80060b6:	2300      	movs	r3, #0
 80060b8:	f04f 32ff 	mov.w	r2, #4294967295
 80060bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060c0:	f10a 0a01 	add.w	sl, sl, #1
 80060c4:	9304      	str	r3, [sp, #16]
 80060c6:	9307      	str	r3, [sp, #28]
 80060c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80060cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80060ce:	4654      	mov	r4, sl
 80060d0:	2205      	movs	r2, #5
 80060d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060d6:	4853      	ldr	r0, [pc, #332]	@ (8006224 <_vfiprintf_r+0x21c>)
 80060d8:	f7fe f9b3 	bl	8004442 <memchr>
 80060dc:	9a04      	ldr	r2, [sp, #16]
 80060de:	b9d8      	cbnz	r0, 8006118 <_vfiprintf_r+0x110>
 80060e0:	06d1      	lsls	r1, r2, #27
 80060e2:	bf44      	itt	mi
 80060e4:	2320      	movmi	r3, #32
 80060e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80060ea:	0713      	lsls	r3, r2, #28
 80060ec:	bf44      	itt	mi
 80060ee:	232b      	movmi	r3, #43	@ 0x2b
 80060f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80060f4:	f89a 3000 	ldrb.w	r3, [sl]
 80060f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80060fa:	d015      	beq.n	8006128 <_vfiprintf_r+0x120>
 80060fc:	4654      	mov	r4, sl
 80060fe:	2000      	movs	r0, #0
 8006100:	f04f 0c0a 	mov.w	ip, #10
 8006104:	9a07      	ldr	r2, [sp, #28]
 8006106:	4621      	mov	r1, r4
 8006108:	f811 3b01 	ldrb.w	r3, [r1], #1
 800610c:	3b30      	subs	r3, #48	@ 0x30
 800610e:	2b09      	cmp	r3, #9
 8006110:	d94b      	bls.n	80061aa <_vfiprintf_r+0x1a2>
 8006112:	b1b0      	cbz	r0, 8006142 <_vfiprintf_r+0x13a>
 8006114:	9207      	str	r2, [sp, #28]
 8006116:	e014      	b.n	8006142 <_vfiprintf_r+0x13a>
 8006118:	eba0 0308 	sub.w	r3, r0, r8
 800611c:	fa09 f303 	lsl.w	r3, r9, r3
 8006120:	4313      	orrs	r3, r2
 8006122:	46a2      	mov	sl, r4
 8006124:	9304      	str	r3, [sp, #16]
 8006126:	e7d2      	b.n	80060ce <_vfiprintf_r+0xc6>
 8006128:	9b03      	ldr	r3, [sp, #12]
 800612a:	1d19      	adds	r1, r3, #4
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	9103      	str	r1, [sp, #12]
 8006130:	2b00      	cmp	r3, #0
 8006132:	bfbb      	ittet	lt
 8006134:	425b      	neglt	r3, r3
 8006136:	f042 0202 	orrlt.w	r2, r2, #2
 800613a:	9307      	strge	r3, [sp, #28]
 800613c:	9307      	strlt	r3, [sp, #28]
 800613e:	bfb8      	it	lt
 8006140:	9204      	strlt	r2, [sp, #16]
 8006142:	7823      	ldrb	r3, [r4, #0]
 8006144:	2b2e      	cmp	r3, #46	@ 0x2e
 8006146:	d10a      	bne.n	800615e <_vfiprintf_r+0x156>
 8006148:	7863      	ldrb	r3, [r4, #1]
 800614a:	2b2a      	cmp	r3, #42	@ 0x2a
 800614c:	d132      	bne.n	80061b4 <_vfiprintf_r+0x1ac>
 800614e:	9b03      	ldr	r3, [sp, #12]
 8006150:	3402      	adds	r4, #2
 8006152:	1d1a      	adds	r2, r3, #4
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	9203      	str	r2, [sp, #12]
 8006158:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800615c:	9305      	str	r3, [sp, #20]
 800615e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006228 <_vfiprintf_r+0x220>
 8006162:	2203      	movs	r2, #3
 8006164:	4650      	mov	r0, sl
 8006166:	7821      	ldrb	r1, [r4, #0]
 8006168:	f7fe f96b 	bl	8004442 <memchr>
 800616c:	b138      	cbz	r0, 800617e <_vfiprintf_r+0x176>
 800616e:	2240      	movs	r2, #64	@ 0x40
 8006170:	9b04      	ldr	r3, [sp, #16]
 8006172:	eba0 000a 	sub.w	r0, r0, sl
 8006176:	4082      	lsls	r2, r0
 8006178:	4313      	orrs	r3, r2
 800617a:	3401      	adds	r4, #1
 800617c:	9304      	str	r3, [sp, #16]
 800617e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006182:	2206      	movs	r2, #6
 8006184:	4829      	ldr	r0, [pc, #164]	@ (800622c <_vfiprintf_r+0x224>)
 8006186:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800618a:	f7fe f95a 	bl	8004442 <memchr>
 800618e:	2800      	cmp	r0, #0
 8006190:	d03f      	beq.n	8006212 <_vfiprintf_r+0x20a>
 8006192:	4b27      	ldr	r3, [pc, #156]	@ (8006230 <_vfiprintf_r+0x228>)
 8006194:	bb1b      	cbnz	r3, 80061de <_vfiprintf_r+0x1d6>
 8006196:	9b03      	ldr	r3, [sp, #12]
 8006198:	3307      	adds	r3, #7
 800619a:	f023 0307 	bic.w	r3, r3, #7
 800619e:	3308      	adds	r3, #8
 80061a0:	9303      	str	r3, [sp, #12]
 80061a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061a4:	443b      	add	r3, r7
 80061a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80061a8:	e76a      	b.n	8006080 <_vfiprintf_r+0x78>
 80061aa:	460c      	mov	r4, r1
 80061ac:	2001      	movs	r0, #1
 80061ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80061b2:	e7a8      	b.n	8006106 <_vfiprintf_r+0xfe>
 80061b4:	2300      	movs	r3, #0
 80061b6:	f04f 0c0a 	mov.w	ip, #10
 80061ba:	4619      	mov	r1, r3
 80061bc:	3401      	adds	r4, #1
 80061be:	9305      	str	r3, [sp, #20]
 80061c0:	4620      	mov	r0, r4
 80061c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061c6:	3a30      	subs	r2, #48	@ 0x30
 80061c8:	2a09      	cmp	r2, #9
 80061ca:	d903      	bls.n	80061d4 <_vfiprintf_r+0x1cc>
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d0c6      	beq.n	800615e <_vfiprintf_r+0x156>
 80061d0:	9105      	str	r1, [sp, #20]
 80061d2:	e7c4      	b.n	800615e <_vfiprintf_r+0x156>
 80061d4:	4604      	mov	r4, r0
 80061d6:	2301      	movs	r3, #1
 80061d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80061dc:	e7f0      	b.n	80061c0 <_vfiprintf_r+0x1b8>
 80061de:	ab03      	add	r3, sp, #12
 80061e0:	9300      	str	r3, [sp, #0]
 80061e2:	462a      	mov	r2, r5
 80061e4:	4630      	mov	r0, r6
 80061e6:	4b13      	ldr	r3, [pc, #76]	@ (8006234 <_vfiprintf_r+0x22c>)
 80061e8:	a904      	add	r1, sp, #16
 80061ea:	f7fd fbb3 	bl	8003954 <_printf_float>
 80061ee:	4607      	mov	r7, r0
 80061f0:	1c78      	adds	r0, r7, #1
 80061f2:	d1d6      	bne.n	80061a2 <_vfiprintf_r+0x19a>
 80061f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80061f6:	07d9      	lsls	r1, r3, #31
 80061f8:	d405      	bmi.n	8006206 <_vfiprintf_r+0x1fe>
 80061fa:	89ab      	ldrh	r3, [r5, #12]
 80061fc:	059a      	lsls	r2, r3, #22
 80061fe:	d402      	bmi.n	8006206 <_vfiprintf_r+0x1fe>
 8006200:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006202:	f7fe f91d 	bl	8004440 <__retarget_lock_release_recursive>
 8006206:	89ab      	ldrh	r3, [r5, #12]
 8006208:	065b      	lsls	r3, r3, #25
 800620a:	f53f af1f 	bmi.w	800604c <_vfiprintf_r+0x44>
 800620e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006210:	e71e      	b.n	8006050 <_vfiprintf_r+0x48>
 8006212:	ab03      	add	r3, sp, #12
 8006214:	9300      	str	r3, [sp, #0]
 8006216:	462a      	mov	r2, r5
 8006218:	4630      	mov	r0, r6
 800621a:	4b06      	ldr	r3, [pc, #24]	@ (8006234 <_vfiprintf_r+0x22c>)
 800621c:	a904      	add	r1, sp, #16
 800621e:	f7fd fe37 	bl	8003e90 <_printf_i>
 8006222:	e7e4      	b.n	80061ee <_vfiprintf_r+0x1e6>
 8006224:	08006660 	.word	0x08006660
 8006228:	08006666 	.word	0x08006666
 800622c:	0800666a 	.word	0x0800666a
 8006230:	08003955 	.word	0x08003955
 8006234:	08005fe5 	.word	0x08005fe5

08006238 <__swbuf_r>:
 8006238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800623a:	460e      	mov	r6, r1
 800623c:	4614      	mov	r4, r2
 800623e:	4605      	mov	r5, r0
 8006240:	b118      	cbz	r0, 800624a <__swbuf_r+0x12>
 8006242:	6a03      	ldr	r3, [r0, #32]
 8006244:	b90b      	cbnz	r3, 800624a <__swbuf_r+0x12>
 8006246:	f7fd ffcd 	bl	80041e4 <__sinit>
 800624a:	69a3      	ldr	r3, [r4, #24]
 800624c:	60a3      	str	r3, [r4, #8]
 800624e:	89a3      	ldrh	r3, [r4, #12]
 8006250:	071a      	lsls	r2, r3, #28
 8006252:	d501      	bpl.n	8006258 <__swbuf_r+0x20>
 8006254:	6923      	ldr	r3, [r4, #16]
 8006256:	b943      	cbnz	r3, 800626a <__swbuf_r+0x32>
 8006258:	4621      	mov	r1, r4
 800625a:	4628      	mov	r0, r5
 800625c:	f000 f82a 	bl	80062b4 <__swsetup_r>
 8006260:	b118      	cbz	r0, 800626a <__swbuf_r+0x32>
 8006262:	f04f 37ff 	mov.w	r7, #4294967295
 8006266:	4638      	mov	r0, r7
 8006268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800626a:	6823      	ldr	r3, [r4, #0]
 800626c:	6922      	ldr	r2, [r4, #16]
 800626e:	b2f6      	uxtb	r6, r6
 8006270:	1a98      	subs	r0, r3, r2
 8006272:	6963      	ldr	r3, [r4, #20]
 8006274:	4637      	mov	r7, r6
 8006276:	4283      	cmp	r3, r0
 8006278:	dc05      	bgt.n	8006286 <__swbuf_r+0x4e>
 800627a:	4621      	mov	r1, r4
 800627c:	4628      	mov	r0, r5
 800627e:	f7ff fd9b 	bl	8005db8 <_fflush_r>
 8006282:	2800      	cmp	r0, #0
 8006284:	d1ed      	bne.n	8006262 <__swbuf_r+0x2a>
 8006286:	68a3      	ldr	r3, [r4, #8]
 8006288:	3b01      	subs	r3, #1
 800628a:	60a3      	str	r3, [r4, #8]
 800628c:	6823      	ldr	r3, [r4, #0]
 800628e:	1c5a      	adds	r2, r3, #1
 8006290:	6022      	str	r2, [r4, #0]
 8006292:	701e      	strb	r6, [r3, #0]
 8006294:	6962      	ldr	r2, [r4, #20]
 8006296:	1c43      	adds	r3, r0, #1
 8006298:	429a      	cmp	r2, r3
 800629a:	d004      	beq.n	80062a6 <__swbuf_r+0x6e>
 800629c:	89a3      	ldrh	r3, [r4, #12]
 800629e:	07db      	lsls	r3, r3, #31
 80062a0:	d5e1      	bpl.n	8006266 <__swbuf_r+0x2e>
 80062a2:	2e0a      	cmp	r6, #10
 80062a4:	d1df      	bne.n	8006266 <__swbuf_r+0x2e>
 80062a6:	4621      	mov	r1, r4
 80062a8:	4628      	mov	r0, r5
 80062aa:	f7ff fd85 	bl	8005db8 <_fflush_r>
 80062ae:	2800      	cmp	r0, #0
 80062b0:	d0d9      	beq.n	8006266 <__swbuf_r+0x2e>
 80062b2:	e7d6      	b.n	8006262 <__swbuf_r+0x2a>

080062b4 <__swsetup_r>:
 80062b4:	b538      	push	{r3, r4, r5, lr}
 80062b6:	4b29      	ldr	r3, [pc, #164]	@ (800635c <__swsetup_r+0xa8>)
 80062b8:	4605      	mov	r5, r0
 80062ba:	6818      	ldr	r0, [r3, #0]
 80062bc:	460c      	mov	r4, r1
 80062be:	b118      	cbz	r0, 80062c8 <__swsetup_r+0x14>
 80062c0:	6a03      	ldr	r3, [r0, #32]
 80062c2:	b90b      	cbnz	r3, 80062c8 <__swsetup_r+0x14>
 80062c4:	f7fd ff8e 	bl	80041e4 <__sinit>
 80062c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062cc:	0719      	lsls	r1, r3, #28
 80062ce:	d422      	bmi.n	8006316 <__swsetup_r+0x62>
 80062d0:	06da      	lsls	r2, r3, #27
 80062d2:	d407      	bmi.n	80062e4 <__swsetup_r+0x30>
 80062d4:	2209      	movs	r2, #9
 80062d6:	602a      	str	r2, [r5, #0]
 80062d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062dc:	f04f 30ff 	mov.w	r0, #4294967295
 80062e0:	81a3      	strh	r3, [r4, #12]
 80062e2:	e033      	b.n	800634c <__swsetup_r+0x98>
 80062e4:	0758      	lsls	r0, r3, #29
 80062e6:	d512      	bpl.n	800630e <__swsetup_r+0x5a>
 80062e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80062ea:	b141      	cbz	r1, 80062fe <__swsetup_r+0x4a>
 80062ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80062f0:	4299      	cmp	r1, r3
 80062f2:	d002      	beq.n	80062fa <__swsetup_r+0x46>
 80062f4:	4628      	mov	r0, r5
 80062f6:	f7fe ff0f 	bl	8005118 <_free_r>
 80062fa:	2300      	movs	r3, #0
 80062fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80062fe:	89a3      	ldrh	r3, [r4, #12]
 8006300:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006304:	81a3      	strh	r3, [r4, #12]
 8006306:	2300      	movs	r3, #0
 8006308:	6063      	str	r3, [r4, #4]
 800630a:	6923      	ldr	r3, [r4, #16]
 800630c:	6023      	str	r3, [r4, #0]
 800630e:	89a3      	ldrh	r3, [r4, #12]
 8006310:	f043 0308 	orr.w	r3, r3, #8
 8006314:	81a3      	strh	r3, [r4, #12]
 8006316:	6923      	ldr	r3, [r4, #16]
 8006318:	b94b      	cbnz	r3, 800632e <__swsetup_r+0x7a>
 800631a:	89a3      	ldrh	r3, [r4, #12]
 800631c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006320:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006324:	d003      	beq.n	800632e <__swsetup_r+0x7a>
 8006326:	4621      	mov	r1, r4
 8006328:	4628      	mov	r0, r5
 800632a:	f000 f882 	bl	8006432 <__smakebuf_r>
 800632e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006332:	f013 0201 	ands.w	r2, r3, #1
 8006336:	d00a      	beq.n	800634e <__swsetup_r+0x9a>
 8006338:	2200      	movs	r2, #0
 800633a:	60a2      	str	r2, [r4, #8]
 800633c:	6962      	ldr	r2, [r4, #20]
 800633e:	4252      	negs	r2, r2
 8006340:	61a2      	str	r2, [r4, #24]
 8006342:	6922      	ldr	r2, [r4, #16]
 8006344:	b942      	cbnz	r2, 8006358 <__swsetup_r+0xa4>
 8006346:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800634a:	d1c5      	bne.n	80062d8 <__swsetup_r+0x24>
 800634c:	bd38      	pop	{r3, r4, r5, pc}
 800634e:	0799      	lsls	r1, r3, #30
 8006350:	bf58      	it	pl
 8006352:	6962      	ldrpl	r2, [r4, #20]
 8006354:	60a2      	str	r2, [r4, #8]
 8006356:	e7f4      	b.n	8006342 <__swsetup_r+0x8e>
 8006358:	2000      	movs	r0, #0
 800635a:	e7f7      	b.n	800634c <__swsetup_r+0x98>
 800635c:	20000020 	.word	0x20000020

08006360 <_raise_r>:
 8006360:	291f      	cmp	r1, #31
 8006362:	b538      	push	{r3, r4, r5, lr}
 8006364:	4605      	mov	r5, r0
 8006366:	460c      	mov	r4, r1
 8006368:	d904      	bls.n	8006374 <_raise_r+0x14>
 800636a:	2316      	movs	r3, #22
 800636c:	6003      	str	r3, [r0, #0]
 800636e:	f04f 30ff 	mov.w	r0, #4294967295
 8006372:	bd38      	pop	{r3, r4, r5, pc}
 8006374:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006376:	b112      	cbz	r2, 800637e <_raise_r+0x1e>
 8006378:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800637c:	b94b      	cbnz	r3, 8006392 <_raise_r+0x32>
 800637e:	4628      	mov	r0, r5
 8006380:	f000 f830 	bl	80063e4 <_getpid_r>
 8006384:	4622      	mov	r2, r4
 8006386:	4601      	mov	r1, r0
 8006388:	4628      	mov	r0, r5
 800638a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800638e:	f000 b817 	b.w	80063c0 <_kill_r>
 8006392:	2b01      	cmp	r3, #1
 8006394:	d00a      	beq.n	80063ac <_raise_r+0x4c>
 8006396:	1c59      	adds	r1, r3, #1
 8006398:	d103      	bne.n	80063a2 <_raise_r+0x42>
 800639a:	2316      	movs	r3, #22
 800639c:	6003      	str	r3, [r0, #0]
 800639e:	2001      	movs	r0, #1
 80063a0:	e7e7      	b.n	8006372 <_raise_r+0x12>
 80063a2:	2100      	movs	r1, #0
 80063a4:	4620      	mov	r0, r4
 80063a6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80063aa:	4798      	blx	r3
 80063ac:	2000      	movs	r0, #0
 80063ae:	e7e0      	b.n	8006372 <_raise_r+0x12>

080063b0 <raise>:
 80063b0:	4b02      	ldr	r3, [pc, #8]	@ (80063bc <raise+0xc>)
 80063b2:	4601      	mov	r1, r0
 80063b4:	6818      	ldr	r0, [r3, #0]
 80063b6:	f7ff bfd3 	b.w	8006360 <_raise_r>
 80063ba:	bf00      	nop
 80063bc:	20000020 	.word	0x20000020

080063c0 <_kill_r>:
 80063c0:	b538      	push	{r3, r4, r5, lr}
 80063c2:	2300      	movs	r3, #0
 80063c4:	4d06      	ldr	r5, [pc, #24]	@ (80063e0 <_kill_r+0x20>)
 80063c6:	4604      	mov	r4, r0
 80063c8:	4608      	mov	r0, r1
 80063ca:	4611      	mov	r1, r2
 80063cc:	602b      	str	r3, [r5, #0]
 80063ce:	f7fb fa9c 	bl	800190a <_kill>
 80063d2:	1c43      	adds	r3, r0, #1
 80063d4:	d102      	bne.n	80063dc <_kill_r+0x1c>
 80063d6:	682b      	ldr	r3, [r5, #0]
 80063d8:	b103      	cbz	r3, 80063dc <_kill_r+0x1c>
 80063da:	6023      	str	r3, [r4, #0]
 80063dc:	bd38      	pop	{r3, r4, r5, pc}
 80063de:	bf00      	nop
 80063e0:	2000066c 	.word	0x2000066c

080063e4 <_getpid_r>:
 80063e4:	f7fb ba8a 	b.w	80018fc <_getpid>

080063e8 <__swhatbuf_r>:
 80063e8:	b570      	push	{r4, r5, r6, lr}
 80063ea:	460c      	mov	r4, r1
 80063ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063f0:	4615      	mov	r5, r2
 80063f2:	2900      	cmp	r1, #0
 80063f4:	461e      	mov	r6, r3
 80063f6:	b096      	sub	sp, #88	@ 0x58
 80063f8:	da0c      	bge.n	8006414 <__swhatbuf_r+0x2c>
 80063fa:	89a3      	ldrh	r3, [r4, #12]
 80063fc:	2100      	movs	r1, #0
 80063fe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006402:	bf14      	ite	ne
 8006404:	2340      	movne	r3, #64	@ 0x40
 8006406:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800640a:	2000      	movs	r0, #0
 800640c:	6031      	str	r1, [r6, #0]
 800640e:	602b      	str	r3, [r5, #0]
 8006410:	b016      	add	sp, #88	@ 0x58
 8006412:	bd70      	pop	{r4, r5, r6, pc}
 8006414:	466a      	mov	r2, sp
 8006416:	f000 f849 	bl	80064ac <_fstat_r>
 800641a:	2800      	cmp	r0, #0
 800641c:	dbed      	blt.n	80063fa <__swhatbuf_r+0x12>
 800641e:	9901      	ldr	r1, [sp, #4]
 8006420:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006424:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006428:	4259      	negs	r1, r3
 800642a:	4159      	adcs	r1, r3
 800642c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006430:	e7eb      	b.n	800640a <__swhatbuf_r+0x22>

08006432 <__smakebuf_r>:
 8006432:	898b      	ldrh	r3, [r1, #12]
 8006434:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006436:	079d      	lsls	r5, r3, #30
 8006438:	4606      	mov	r6, r0
 800643a:	460c      	mov	r4, r1
 800643c:	d507      	bpl.n	800644e <__smakebuf_r+0x1c>
 800643e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006442:	6023      	str	r3, [r4, #0]
 8006444:	6123      	str	r3, [r4, #16]
 8006446:	2301      	movs	r3, #1
 8006448:	6163      	str	r3, [r4, #20]
 800644a:	b003      	add	sp, #12
 800644c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800644e:	466a      	mov	r2, sp
 8006450:	ab01      	add	r3, sp, #4
 8006452:	f7ff ffc9 	bl	80063e8 <__swhatbuf_r>
 8006456:	9f00      	ldr	r7, [sp, #0]
 8006458:	4605      	mov	r5, r0
 800645a:	4639      	mov	r1, r7
 800645c:	4630      	mov	r0, r6
 800645e:	f7fe fecd 	bl	80051fc <_malloc_r>
 8006462:	b948      	cbnz	r0, 8006478 <__smakebuf_r+0x46>
 8006464:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006468:	059a      	lsls	r2, r3, #22
 800646a:	d4ee      	bmi.n	800644a <__smakebuf_r+0x18>
 800646c:	f023 0303 	bic.w	r3, r3, #3
 8006470:	f043 0302 	orr.w	r3, r3, #2
 8006474:	81a3      	strh	r3, [r4, #12]
 8006476:	e7e2      	b.n	800643e <__smakebuf_r+0xc>
 8006478:	89a3      	ldrh	r3, [r4, #12]
 800647a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800647e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006482:	81a3      	strh	r3, [r4, #12]
 8006484:	9b01      	ldr	r3, [sp, #4]
 8006486:	6020      	str	r0, [r4, #0]
 8006488:	b15b      	cbz	r3, 80064a2 <__smakebuf_r+0x70>
 800648a:	4630      	mov	r0, r6
 800648c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006490:	f000 f81e 	bl	80064d0 <_isatty_r>
 8006494:	b128      	cbz	r0, 80064a2 <__smakebuf_r+0x70>
 8006496:	89a3      	ldrh	r3, [r4, #12]
 8006498:	f023 0303 	bic.w	r3, r3, #3
 800649c:	f043 0301 	orr.w	r3, r3, #1
 80064a0:	81a3      	strh	r3, [r4, #12]
 80064a2:	89a3      	ldrh	r3, [r4, #12]
 80064a4:	431d      	orrs	r5, r3
 80064a6:	81a5      	strh	r5, [r4, #12]
 80064a8:	e7cf      	b.n	800644a <__smakebuf_r+0x18>
	...

080064ac <_fstat_r>:
 80064ac:	b538      	push	{r3, r4, r5, lr}
 80064ae:	2300      	movs	r3, #0
 80064b0:	4d06      	ldr	r5, [pc, #24]	@ (80064cc <_fstat_r+0x20>)
 80064b2:	4604      	mov	r4, r0
 80064b4:	4608      	mov	r0, r1
 80064b6:	4611      	mov	r1, r2
 80064b8:	602b      	str	r3, [r5, #0]
 80064ba:	f7fb fa85 	bl	80019c8 <_fstat>
 80064be:	1c43      	adds	r3, r0, #1
 80064c0:	d102      	bne.n	80064c8 <_fstat_r+0x1c>
 80064c2:	682b      	ldr	r3, [r5, #0]
 80064c4:	b103      	cbz	r3, 80064c8 <_fstat_r+0x1c>
 80064c6:	6023      	str	r3, [r4, #0]
 80064c8:	bd38      	pop	{r3, r4, r5, pc}
 80064ca:	bf00      	nop
 80064cc:	2000066c 	.word	0x2000066c

080064d0 <_isatty_r>:
 80064d0:	b538      	push	{r3, r4, r5, lr}
 80064d2:	2300      	movs	r3, #0
 80064d4:	4d05      	ldr	r5, [pc, #20]	@ (80064ec <_isatty_r+0x1c>)
 80064d6:	4604      	mov	r4, r0
 80064d8:	4608      	mov	r0, r1
 80064da:	602b      	str	r3, [r5, #0]
 80064dc:	f7fb fa83 	bl	80019e6 <_isatty>
 80064e0:	1c43      	adds	r3, r0, #1
 80064e2:	d102      	bne.n	80064ea <_isatty_r+0x1a>
 80064e4:	682b      	ldr	r3, [r5, #0]
 80064e6:	b103      	cbz	r3, 80064ea <_isatty_r+0x1a>
 80064e8:	6023      	str	r3, [r4, #0]
 80064ea:	bd38      	pop	{r3, r4, r5, pc}
 80064ec:	2000066c 	.word	0x2000066c

080064f0 <_init>:
 80064f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064f2:	bf00      	nop
 80064f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064f6:	bc08      	pop	{r3}
 80064f8:	469e      	mov	lr, r3
 80064fa:	4770      	bx	lr

080064fc <_fini>:
 80064fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064fe:	bf00      	nop
 8006500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006502:	bc08      	pop	{r3}
 8006504:	469e      	mov	lr, r3
 8006506:	4770      	bx	lr
